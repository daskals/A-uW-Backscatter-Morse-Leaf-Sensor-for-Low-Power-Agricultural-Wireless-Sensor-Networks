

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Apr 05 21:22:58 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.44
    42                           ; Generated 14/09/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16LF1459 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  0111                     	;# 
   122  0112                     	;# 
   123  0113                     	;# 
   124  0114                     	;# 
   125  0115                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  0118                     	;# 
   129  0119                     	;# 
   130  011D                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  018E                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0194                     	;# 
   140  0195                     	;# 
   141  0196                     	;# 
   142  0199                     	;# 
   143  019A                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019C                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019F                     	;# 
   150  020C                     	;# 
   151  020D                     	;# 
   152  0211                     	;# 
   153  0211                     	;# 
   154  0212                     	;# 
   155  0212                     	;# 
   156  0213                     	;# 
   157  0213                     	;# 
   158  0214                     	;# 
   159  0214                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0216                     	;# 
   164  0216                     	;# 
   165  0217                     	;# 
   166  0217                     	;# 
   167  0391                     	;# 
   168  0392                     	;# 
   169  0393                     	;# 
   170  0394                     	;# 
   171  0395                     	;# 
   172  0396                     	;# 
   173  039A                     	;# 
   174  039B                     	;# 
   175  0611                     	;# 
   176  0612                     	;# 
   177  0613                     	;# 
   178  0613                     	;# 
   179  0614                     	;# 
   180  0615                     	;# 
   181  0616                     	;# 
   182  0616                     	;# 
   183  0691                     	;# 
   184  0692                     	;# 
   185  0693                     	;# 
   186  0694                     	;# 
   187  0695                     	;# 
   188  0E8E                     	;# 
   189  0E8F                     	;# 
   190  0E90                     	;# 
   191  0E91                     	;# 
   192  0E92                     	;# 
   193  0E93                     	;# 
   194  0E94                     	;# 
   195  0E94                     	;# 
   196  0E95                     	;# 
   197  0E96                     	;# 
   198  0E97                     	;# 
   199  0E98                     	;# 
   200  0E99                     	;# 
   201  0E9A                     	;# 
   202  0E9B                     	;# 
   203  0E9C                     	;# 
   204  0E9D                     	;# 
   205  0E9E                     	;# 
   206  0E9F                     	;# 
   207  0FE4                     	;# 
   208  0FE5                     	;# 
   209  0FE6                     	;# 
   210  0FE7                     	;# 
   211  0FE8                     	;# 
   212  0FE9                     	;# 
   213  0FEA                     	;# 
   214  0FEB                     	;# 
   215  0FED                     	;# 
   216  0FEE                     	;# 
   217  0FEF                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0008                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  008C                     	;# 
   245  008D                     	;# 
   246  008E                     	;# 
   247  0091                     	;# 
   248  0092                     	;# 
   249  0095                     	;# 
   250  0096                     	;# 
   251  0097                     	;# 
   252  0098                     	;# 
   253  0099                     	;# 
   254  009A                     	;# 
   255  009B                     	;# 
   256  009B                     	;# 
   257  009C                     	;# 
   258  009D                     	;# 
   259  009E                     	;# 
   260  009F                     	;# 
   261  010C                     	;# 
   262  010D                     	;# 
   263  010E                     	;# 
   264  0111                     	;# 
   265  0112                     	;# 
   266  0113                     	;# 
   267  0114                     	;# 
   268  0115                     	;# 
   269  0116                     	;# 
   270  0117                     	;# 
   271  0118                     	;# 
   272  0119                     	;# 
   273  011D                     	;# 
   274  018C                     	;# 
   275  018D                     	;# 
   276  018E                     	;# 
   277  0191                     	;# 
   278  0191                     	;# 
   279  0192                     	;# 
   280  0193                     	;# 
   281  0193                     	;# 
   282  0194                     	;# 
   283  0195                     	;# 
   284  0196                     	;# 
   285  0199                     	;# 
   286  019A                     	;# 
   287  019B                     	;# 
   288  019B                     	;# 
   289  019C                     	;# 
   290  019D                     	;# 
   291  019E                     	;# 
   292  019F                     	;# 
   293  020C                     	;# 
   294  020D                     	;# 
   295  0211                     	;# 
   296  0211                     	;# 
   297  0212                     	;# 
   298  0212                     	;# 
   299  0213                     	;# 
   300  0213                     	;# 
   301  0214                     	;# 
   302  0214                     	;# 
   303  0215                     	;# 
   304  0215                     	;# 
   305  0215                     	;# 
   306  0216                     	;# 
   307  0216                     	;# 
   308  0217                     	;# 
   309  0217                     	;# 
   310  0391                     	;# 
   311  0392                     	;# 
   312  0393                     	;# 
   313  0394                     	;# 
   314  0395                     	;# 
   315  0396                     	;# 
   316  039A                     	;# 
   317  039B                     	;# 
   318  0611                     	;# 
   319  0612                     	;# 
   320  0613                     	;# 
   321  0613                     	;# 
   322  0614                     	;# 
   323  0615                     	;# 
   324  0616                     	;# 
   325  0616                     	;# 
   326  0691                     	;# 
   327  0692                     	;# 
   328  0693                     	;# 
   329  0694                     	;# 
   330  0695                     	;# 
   331  0E8E                     	;# 
   332  0E8F                     	;# 
   333  0E90                     	;# 
   334  0E91                     	;# 
   335  0E92                     	;# 
   336  0E93                     	;# 
   337  0E94                     	;# 
   338  0E94                     	;# 
   339  0E95                     	;# 
   340  0E96                     	;# 
   341  0E97                     	;# 
   342  0E98                     	;# 
   343  0E99                     	;# 
   344  0E9A                     	;# 
   345  0E9B                     	;# 
   346  0E9C                     	;# 
   347  0E9D                     	;# 
   348  0E9E                     	;# 
   349  0E9F                     	;# 
   350  0FE4                     	;# 
   351  0FE5                     	;# 
   352  0FE6                     	;# 
   353  0FE7                     	;# 
   354  0FE8                     	;# 
   355  0FE9                     	;# 
   356  0FEA                     	;# 
   357  0FEB                     	;# 
   358  0FED                     	;# 
   359  0FEE                     	;# 
   360  0FEF                     	;# 
   361  0000                     	;# 
   362  0001                     	;# 
   363  0002                     	;# 
   364  0003                     	;# 
   365  0004                     	;# 
   366  0005                     	;# 
   367  0006                     	;# 
   368  0007                     	;# 
   369  0008                     	;# 
   370  0009                     	;# 
   371  000A                     	;# 
   372  000B                     	;# 
   373  000C                     	;# 
   374  000D                     	;# 
   375  000E                     	;# 
   376  0011                     	;# 
   377  0012                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0095                     	;# 
   393  0096                     	;# 
   394  0097                     	;# 
   395  0098                     	;# 
   396  0099                     	;# 
   397  009A                     	;# 
   398  009B                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  009F                     	;# 
   404  010C                     	;# 
   405  010D                     	;# 
   406  010E                     	;# 
   407  0111                     	;# 
   408  0112                     	;# 
   409  0113                     	;# 
   410  0114                     	;# 
   411  0115                     	;# 
   412  0116                     	;# 
   413  0117                     	;# 
   414  0118                     	;# 
   415  0119                     	;# 
   416  011D                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  018E                     	;# 
   420  0191                     	;# 
   421  0191                     	;# 
   422  0192                     	;# 
   423  0193                     	;# 
   424  0193                     	;# 
   425  0194                     	;# 
   426  0195                     	;# 
   427  0196                     	;# 
   428  0199                     	;# 
   429  019A                     	;# 
   430  019B                     	;# 
   431  019B                     	;# 
   432  019C                     	;# 
   433  019D                     	;# 
   434  019E                     	;# 
   435  019F                     	;# 
   436  020C                     	;# 
   437  020D                     	;# 
   438  0211                     	;# 
   439  0211                     	;# 
   440  0212                     	;# 
   441  0212                     	;# 
   442  0213                     	;# 
   443  0213                     	;# 
   444  0214                     	;# 
   445  0214                     	;# 
   446  0215                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0216                     	;# 
   450  0216                     	;# 
   451  0217                     	;# 
   452  0217                     	;# 
   453  0391                     	;# 
   454  0392                     	;# 
   455  0393                     	;# 
   456  0394                     	;# 
   457  0395                     	;# 
   458  0396                     	;# 
   459  039A                     	;# 
   460  039B                     	;# 
   461  0611                     	;# 
   462  0612                     	;# 
   463  0613                     	;# 
   464  0613                     	;# 
   465  0614                     	;# 
   466  0615                     	;# 
   467  0616                     	;# 
   468  0616                     	;# 
   469  0691                     	;# 
   470  0692                     	;# 
   471  0693                     	;# 
   472  0694                     	;# 
   473  0695                     	;# 
   474  0E8E                     	;# 
   475  0E8F                     	;# 
   476  0E90                     	;# 
   477  0E91                     	;# 
   478  0E92                     	;# 
   479  0E93                     	;# 
   480  0E94                     	;# 
   481  0E94                     	;# 
   482  0E95                     	;# 
   483  0E96                     	;# 
   484  0E97                     	;# 
   485  0E98                     	;# 
   486  0E99                     	;# 
   487  0E9A                     	;# 
   488  0E9B                     	;# 
   489  0E9C                     	;# 
   490  0E9D                     	;# 
   491  0E9E                     	;# 
   492  0E9F                     	;# 
   493  0FE4                     	;# 
   494  0FE5                     	;# 
   495  0FE6                     	;# 
   496  0FE7                     	;# 
   497  0FE8                     	;# 
   498  0FE9                     	;# 
   499  0FEA                     	;# 
   500  0FEB                     	;# 
   501  0FED                     	;# 
   502  0FEE                     	;# 
   503  0FEF                     	;# 
   504  0000                     	;# 
   505  0001                     	;# 
   506  0002                     	;# 
   507  0003                     	;# 
   508  0004                     	;# 
   509  0005                     	;# 
   510  0006                     	;# 
   511  0007                     	;# 
   512  0008                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  0011                     	;# 
   520  0012                     	;# 
   521  0015                     	;# 
   522  0016                     	;# 
   523  0016                     	;# 
   524  0017                     	;# 
   525  0018                     	;# 
   526  0019                     	;# 
   527  001A                     	;# 
   528  001B                     	;# 
   529  001C                     	;# 
   530  008C                     	;# 
   531  008D                     	;# 
   532  008E                     	;# 
   533  0091                     	;# 
   534  0092                     	;# 
   535  0095                     	;# 
   536  0096                     	;# 
   537  0097                     	;# 
   538  0098                     	;# 
   539  0099                     	;# 
   540  009A                     	;# 
   541  009B                     	;# 
   542  009B                     	;# 
   543  009C                     	;# 
   544  009D                     	;# 
   545  009E                     	;# 
   546  009F                     	;# 
   547  010C                     	;# 
   548  010D                     	;# 
   549  010E                     	;# 
   550  0111                     	;# 
   551  0112                     	;# 
   552  0113                     	;# 
   553  0114                     	;# 
   554  0115                     	;# 
   555  0116                     	;# 
   556  0117                     	;# 
   557  0118                     	;# 
   558  0119                     	;# 
   559  011D                     	;# 
   560  018C                     	;# 
   561  018D                     	;# 
   562  018E                     	;# 
   563  0191                     	;# 
   564  0191                     	;# 
   565  0192                     	;# 
   566  0193                     	;# 
   567  0193                     	;# 
   568  0194                     	;# 
   569  0195                     	;# 
   570  0196                     	;# 
   571  0199                     	;# 
   572  019A                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019C                     	;# 
   576  019D                     	;# 
   577  019E                     	;# 
   578  019F                     	;# 
   579  020C                     	;# 
   580  020D                     	;# 
   581  0211                     	;# 
   582  0211                     	;# 
   583  0212                     	;# 
   584  0212                     	;# 
   585  0213                     	;# 
   586  0213                     	;# 
   587  0214                     	;# 
   588  0214                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0216                     	;# 
   593  0216                     	;# 
   594  0217                     	;# 
   595  0217                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0394                     	;# 
   600  0395                     	;# 
   601  0396                     	;# 
   602  039A                     	;# 
   603  039B                     	;# 
   604  0611                     	;# 
   605  0612                     	;# 
   606  0613                     	;# 
   607  0613                     	;# 
   608  0614                     	;# 
   609  0615                     	;# 
   610  0616                     	;# 
   611  0616                     	;# 
   612  0691                     	;# 
   613  0692                     	;# 
   614  0693                     	;# 
   615  0694                     	;# 
   616  0695                     	;# 
   617  0E8E                     	;# 
   618  0E8F                     	;# 
   619  0E90                     	;# 
   620  0E91                     	;# 
   621  0E92                     	;# 
   622  0E93                     	;# 
   623  0E94                     	;# 
   624  0E94                     	;# 
   625  0E95                     	;# 
   626  0E96                     	;# 
   627  0E97                     	;# 
   628  0E98                     	;# 
   629  0E99                     	;# 
   630  0E9A                     	;# 
   631  0E9B                     	;# 
   632  0E9C                     	;# 
   633  0E9D                     	;# 
   634  0E9E                     	;# 
   635  0E9F                     	;# 
   636  0FE4                     	;# 
   637  0FE5                     	;# 
   638  0FE6                     	;# 
   639  0FE7                     	;# 
   640  0FE8                     	;# 
   641  0FE9                     	;# 
   642  0FEA                     	;# 
   643  0FEB                     	;# 
   644  0FED                     	;# 
   645  0FEE                     	;# 
   646  0FEF                     	;# 
   647  0000                     	;# 
   648  0001                     	;# 
   649  0002                     	;# 
   650  0003                     	;# 
   651  0004                     	;# 
   652  0005                     	;# 
   653  0006                     	;# 
   654  0007                     	;# 
   655  0008                     	;# 
   656  0009                     	;# 
   657  000A                     	;# 
   658  000B                     	;# 
   659  000C                     	;# 
   660  000D                     	;# 
   661  000E                     	;# 
   662  0011                     	;# 
   663  0012                     	;# 
   664  0015                     	;# 
   665  0016                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001C                     	;# 
   673  008C                     	;# 
   674  008D                     	;# 
   675  008E                     	;# 
   676  0091                     	;# 
   677  0092                     	;# 
   678  0095                     	;# 
   679  0096                     	;# 
   680  0097                     	;# 
   681  0098                     	;# 
   682  0099                     	;# 
   683  009A                     	;# 
   684  009B                     	;# 
   685  009B                     	;# 
   686  009C                     	;# 
   687  009D                     	;# 
   688  009E                     	;# 
   689  009F                     	;# 
   690  010C                     	;# 
   691  010D                     	;# 
   692  010E                     	;# 
   693  0111                     	;# 
   694  0112                     	;# 
   695  0113                     	;# 
   696  0114                     	;# 
   697  0115                     	;# 
   698  0116                     	;# 
   699  0117                     	;# 
   700  0118                     	;# 
   701  0119                     	;# 
   702  011D                     	;# 
   703  018C                     	;# 
   704  018D                     	;# 
   705  018E                     	;# 
   706  0191                     	;# 
   707  0191                     	;# 
   708  0192                     	;# 
   709  0193                     	;# 
   710  0193                     	;# 
   711  0194                     	;# 
   712  0195                     	;# 
   713  0196                     	;# 
   714  0199                     	;# 
   715  019A                     	;# 
   716  019B                     	;# 
   717  019B                     	;# 
   718  019C                     	;# 
   719  019D                     	;# 
   720  019E                     	;# 
   721  019F                     	;# 
   722  020C                     	;# 
   723  020D                     	;# 
   724  0211                     	;# 
   725  0211                     	;# 
   726  0212                     	;# 
   727  0212                     	;# 
   728  0213                     	;# 
   729  0213                     	;# 
   730  0214                     	;# 
   731  0214                     	;# 
   732  0215                     	;# 
   733  0215                     	;# 
   734  0215                     	;# 
   735  0216                     	;# 
   736  0216                     	;# 
   737  0217                     	;# 
   738  0217                     	;# 
   739  0391                     	;# 
   740  0392                     	;# 
   741  0393                     	;# 
   742  0394                     	;# 
   743  0395                     	;# 
   744  0396                     	;# 
   745  039A                     	;# 
   746  039B                     	;# 
   747  0611                     	;# 
   748  0612                     	;# 
   749  0613                     	;# 
   750  0613                     	;# 
   751  0614                     	;# 
   752  0615                     	;# 
   753  0616                     	;# 
   754  0616                     	;# 
   755  0691                     	;# 
   756  0692                     	;# 
   757  0693                     	;# 
   758  0694                     	;# 
   759  0695                     	;# 
   760  0E8E                     	;# 
   761  0E8F                     	;# 
   762  0E90                     	;# 
   763  0E91                     	;# 
   764  0E92                     	;# 
   765  0E93                     	;# 
   766  0E94                     	;# 
   767  0E94                     	;# 
   768  0E95                     	;# 
   769  0E96                     	;# 
   770  0E97                     	;# 
   771  0E98                     	;# 
   772  0E99                     	;# 
   773  0E9A                     	;# 
   774  0E9B                     	;# 
   775  0E9C                     	;# 
   776  0E9D                     	;# 
   777  0E9E                     	;# 
   778  0E9F                     	;# 
   779  0FE4                     	;# 
   780  0FE5                     	;# 
   781  0FE6                     	;# 
   782  0FE7                     	;# 
   783  0FE8                     	;# 
   784  0FE9                     	;# 
   785  0FEA                     	;# 
   786  0FEB                     	;# 
   787  0FED                     	;# 
   788  0FEE                     	;# 
   789  0FEF                     	;# 
   790  0000                     	;# 
   791  0001                     	;# 
   792  0002                     	;# 
   793  0003                     	;# 
   794  0004                     	;# 
   795  0005                     	;# 
   796  0006                     	;# 
   797  0007                     	;# 
   798  0008                     	;# 
   799  0009                     	;# 
   800  000A                     	;# 
   801  000B                     	;# 
   802  000C                     	;# 
   803  000D                     	;# 
   804  000E                     	;# 
   805  0011                     	;# 
   806  0012                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  008C                     	;# 
   817  008D                     	;# 
   818  008E                     	;# 
   819  0091                     	;# 
   820  0092                     	;# 
   821  0095                     	;# 
   822  0096                     	;# 
   823  0097                     	;# 
   824  0098                     	;# 
   825  0099                     	;# 
   826  009A                     	;# 
   827  009B                     	;# 
   828  009B                     	;# 
   829  009C                     	;# 
   830  009D                     	;# 
   831  009E                     	;# 
   832  009F                     	;# 
   833  010C                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  0111                     	;# 
   837  0112                     	;# 
   838  0113                     	;# 
   839  0114                     	;# 
   840  0115                     	;# 
   841  0116                     	;# 
   842  0117                     	;# 
   843  0118                     	;# 
   844  0119                     	;# 
   845  011D                     	;# 
   846  018C                     	;# 
   847  018D                     	;# 
   848  018E                     	;# 
   849  0191                     	;# 
   850  0191                     	;# 
   851  0192                     	;# 
   852  0193                     	;# 
   853  0193                     	;# 
   854  0194                     	;# 
   855  0195                     	;# 
   856  0196                     	;# 
   857  0199                     	;# 
   858  019A                     	;# 
   859  019B                     	;# 
   860  019B                     	;# 
   861  019C                     	;# 
   862  019D                     	;# 
   863  019E                     	;# 
   864  019F                     	;# 
   865  020C                     	;# 
   866  020D                     	;# 
   867  0211                     	;# 
   868  0211                     	;# 
   869  0212                     	;# 
   870  0212                     	;# 
   871  0213                     	;# 
   872  0213                     	;# 
   873  0214                     	;# 
   874  0214                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0216                     	;# 
   879  0216                     	;# 
   880  0217                     	;# 
   881  0217                     	;# 
   882  0391                     	;# 
   883  0392                     	;# 
   884  0393                     	;# 
   885  0394                     	;# 
   886  0395                     	;# 
   887  0396                     	;# 
   888  039A                     	;# 
   889  039B                     	;# 
   890  0611                     	;# 
   891  0612                     	;# 
   892  0613                     	;# 
   893  0613                     	;# 
   894  0614                     	;# 
   895  0615                     	;# 
   896  0616                     	;# 
   897  0616                     	;# 
   898  0691                     	;# 
   899  0692                     	;# 
   900  0693                     	;# 
   901  0694                     	;# 
   902  0695                     	;# 
   903  0E8E                     	;# 
   904  0E8F                     	;# 
   905  0E90                     	;# 
   906  0E91                     	;# 
   907  0E92                     	;# 
   908  0E93                     	;# 
   909  0E94                     	;# 
   910  0E94                     	;# 
   911  0E95                     	;# 
   912  0E96                     	;# 
   913  0E97                     	;# 
   914  0E98                     	;# 
   915  0E99                     	;# 
   916  0E9A                     	;# 
   917  0E9B                     	;# 
   918  0E9C                     	;# 
   919  0E9D                     	;# 
   920  0E9E                     	;# 
   921  0E9F                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0097                     	;# 
   967  0098                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  009F                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0111                     	;# 
   980  0112                     	;# 
   981  0113                     	;# 
   982  0114                     	;# 
   983  0115                     	;# 
   984  0116                     	;# 
   985  0117                     	;# 
   986  0118                     	;# 
   987  0119                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020C                     	;# 
  1009  020D                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0391                     	;# 
  1026  0392                     	;# 
  1027  0393                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  039A                     	;# 
  1032  039B                     	;# 
  1033  0611                     	;# 
  1034  0612                     	;# 
  1035  0613                     	;# 
  1036  0613                     	;# 
  1037  0614                     	;# 
  1038  0615                     	;# 
  1039  0616                     	;# 
  1040  0616                     	;# 
  1041  0691                     	;# 
  1042  0692                     	;# 
  1043  0693                     	;# 
  1044  0694                     	;# 
  1045  0695                     	;# 
  1046  0E8E                     	;# 
  1047  0E8F                     	;# 
  1048  0E90                     	;# 
  1049  0E91                     	;# 
  1050  0E92                     	;# 
  1051  0E93                     	;# 
  1052  0E94                     	;# 
  1053  0E94                     	;# 
  1054  0E95                     	;# 
  1055  0E96                     	;# 
  1056  0E97                     	;# 
  1057  0E98                     	;# 
  1058  0E99                     	;# 
  1059  0E9A                     	;# 
  1060  0E9B                     	;# 
  1061  0E9C                     	;# 
  1062  0E9D                     	;# 
  1063  0E9E                     	;# 
  1064  0E9F                     	;# 
  1065  0FE4                     	;# 
  1066  0FE5                     	;# 
  1067  0FE6                     	;# 
  1068  0FE7                     	;# 
  1069  0FE8                     	;# 
  1070  0FE9                     	;# 
  1071  0FEA                     	;# 
  1072  0FEB                     	;# 
  1073  0FED                     	;# 
  1074  0FEE                     	;# 
  1075  0FEF                     	;# 
  1076                           
  1077                           	psect	idataBANK0
  1078  0455                     __pidataBANK0:	
  1079                           
  1080                           ;initializer for _NODE_ID
  1081  0455  3401               	retlw	1
  1082  0456  3400               	retlw	0
  1083                           
  1084                           ;initializer for _delay
  1085  0457  3404               	retlw	4
  1086  0458  3400               	retlw	0
  1087                           
  1088                           	psect	stringtext1
  1089  041D                     __pstringtext1:	
  1090  041D                     _dpowers:	
  1091  041D  3401               	retlw	1
  1092  041E  3400               	retlw	0
  1093  041F  340A               	retlw	10
  1094  0420  3400               	retlw	0
  1095  0421  3464               	retlw	100
  1096  0422  3400               	retlw	0
  1097  0423  34E8               	retlw	232
  1098  0424  3403               	retlw	3
  1099  0425  3410               	retlw	16
  1100  0426  3427               	retlw	39
  1101  0427                     __end_of_dpowers:	
  1102                           
  1103                           	psect	nvBANK0
  1104  0056                     __pnvBANK0:	
  1105  0056                     _INT_InterruptHandler:	
  1106  0056                     	ds	2
  1107  000B                     _INTCONbits	set	11
  1108  0095                     _OPTION_REGbits	set	149
  1109  008E                     _TRISC	set	142
  1110  008D                     _TRISB	set	141
  1111  008C                     _TRISA	set	140
  1112  0097                     _WDTCON	set	151
  1113  0098                     _OSCTUNE	set	152
  1114  0099                     _OSCCON	set	153
  1115  009D                     _ADCON0bits	set	157
  1116  009C                     _ADRESH	set	156
  1117  009B                     _ADRESL	set	155
  1118  009F                     _ADCON2	set	159
  1119  009E                     _ADCON1	set	158
  1120  009D                     _ADCON0	set	157
  1121  0119                     _DACCON1	set	281
  1122  0118                     _DACCON0	set	280
  1123  011D                     _APFCON	set	285
  1124  010E                     _LATC	set	270
  1125  010D                     _LATB	set	269
  1126  010C                     _LATA	set	268
  1127  0873                     _LATC3	set	2163
  1128  086C                     _LATB4	set	2156
  1129  08C7                     _DACEN	set	2247
  1130  018C                     _ANSELA	set	396
  1131  018D                     _ANSELB	set	397
  1132  018E                     _ANSELC	set	398
  1133  020C                     _WPUA	set	524
  1134  020D                     _WPUB	set	525
  1135  039B                     _ACTCON	set	923
  1136                           
  1137                           	psect	stringtext2
  1138  0430                     __pstringtext2:	
  1139  0430                     STR_1:	
  1140  0430  3453               	retlw	83	;'S'
  1141  0431  3474               	retlw	116	;'t'
  1142  0432  3461               	retlw	97	;'a'
  1143  0433  3472               	retlw	114	;'r'
  1144  0434  3474               	retlw	116	;'t'
  1145  0435  340A               	retlw	10
  1146  0436  3400               	retlw	0
  1147                           
  1148                           	psect	stringtext3
  1149  0437                     __pstringtext3:	
  1150  0437                     STR_2:	
  1151  0437  3425               	retlw	37	;'%'
  1152  0438  3464               	retlw	100	;'d'
  1153  0439  3445               	retlw	69	;'E'
  1154  043A  3425               	retlw	37	;'%'
  1155  043B  3464               	retlw	100	;'d'
  1156  043C  3400               	retlw	0
  1157                           
  1158                           	psect	stringtext4
  1159  0000                     __pstringtext4:	
  1160                           
  1161                           ; #config settings
  1162  0000                     
  1163                           	psect	cinit
  1164  0015                     start_initialization:	
  1165  0015                     __initialization:	
  1166                           
  1167                           ; Initialize objects allocated to BANK0
  1168  0015  3184  2455  3180   	fcall	__pidataBANK0	;fetch initializer
  1169  0018  00D2               	movwf	__pdataBANK0& (0+127)
  1170  0019  3184  2456  3180   	fcall	__pidataBANK0+1	;fetch initializer
  1171  001C  00D3               	movwf	(__pdataBANK0+1)& (0+127)
  1172  001D  3184  2457  3180   	fcall	__pidataBANK0+2	;fetch initializer
  1173  0020  00D4               	movwf	(__pdataBANK0+2)& (0+127)
  1174  0021  3184  2458  3180   	fcall	__pidataBANK0+3	;fetch initializer
  1175  0024  00D5               	movwf	(__pdataBANK0+3)& (0+127)
  1176                           
  1177                           ; Clear objects allocated to BANK0
  1178  0025  303E               	movlw	low __pbssBANK0
  1179  0026  0084               	movwf	4
  1180  0027  3000               	movlw	high __pbssBANK0
  1181  0028  0085               	movwf	5
  1182  0029  3014               	movlw	20
  1183  002A  3184  243D         	fcall	clear_ram0
  1184  002C                     end_of_initialization:	
  1185                           ;End of C runtime variable initialization code
  1186                           
  1187  002C                     __end_of__initialization:	
  1188  002C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1189  002D  0020               	movlb	0
  1190  002E  3182  2A37         	ljmp	_main	;jump to C main() function
  1191                           
  1192                           	psect	bssBANK0
  1193  003E                     __pbssBANK0:	
  1194  003E                     _sensor1:	
  1195  003E                     	ds	2
  1196  0040                     _sensor0:	
  1197  0040                     	ds	2
  1198  0042                     _sleep:	
  1199  0042                     	ds	2
  1200  0044                     _SENSORID:	
  1201  0044                     	ds	2
  1202  0046                     _v:	
  1203  0046                     	ds	2
  1204  0048                     _str8:	
  1205  0048                     	ds	10
  1206                           
  1207                           	psect	dataBANK0
  1208  0052                     __pdataBANK0:	
  1209  0052                     _NODE_ID:	
  1210  0052                     	ds	2
  1211  0054                     _delay:	
  1212  0054                     	ds	2
  1213                           
  1214                           	psect	clrtext
  1215  043D                     clear_ram0:	
  1216                           ;	Called with FSR0 containing the base address, and
  1217                           ;	WREG with the size to clear
  1218                           
  1219  043D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1220  043E                     clrloop0:	
  1221  043E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1222  043F  3101               	addfsr 0,1
  1223  0440  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1224  0441  2C3E               	goto	clrloop0	;have we reached the end yet?
  1225  0442  3400               	retlw	0	;all done for this memory range, return
  1226                           
  1227                           	psect	cstackCOMMON
  1228  0070                     __pcstackCOMMON:	
  1229  0070                     ?_INT_ISR:	
  1230  0070                     ??_INT_ISR:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233  0070                     ?_PIN_MANAGER_Initialize:	
  1234                           ; 1 bytes @ 0x0
  1235                           
  1236  0070                     ?_OSCILLATOR_Initialize:	
  1237                           ; 1 bytes @ 0x0
  1238                           
  1239  0070                     ?_WDT_Initialize:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242  0070                     ?_EXT_INT_Initialize:	
  1243                           ; 1 bytes @ 0x0
  1244                           
  1245  0070                     ?_INT_CallBack:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248  0070                     ??_INT_CallBack:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  0070                     ?_sendChar:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  0070                     ?_ADC_Initialize:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257  0070                     ?_INTERRUPT_InterruptManager:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260  0070                     ??_INTERRUPT_InterruptManager:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263  0070                     ?_SYSTEM_Initialize:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  0070                     ?_INT_DefaultInterruptHandler:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0070                     ??_INT_DefaultInterruptHandler:	
  1270                           ; 1 bytes @ 0x0
  1271                           
  1272  0070                     ?_DAC_Initialize:	
  1273                           ; 1 bytes @ 0x0
  1274                           
  1275  0070                     ?_main:	
  1276                           ; 1 bytes @ 0x0
  1277                           
  1278  0070                     ?_dot:	
  1279                           ; 1 bytes @ 0x0
  1280                           
  1281  0070                     ?_dash:	
  1282                           ; 1 bytes @ 0x0
  1283                           
  1284                           
  1285                           ; 1 bytes @ 0x0
  1286  0070                     	ds	1
  1287  0071                     ??_PIN_MANAGER_Initialize:	
  1288  0071                     ??_OSCILLATOR_Initialize:	
  1289                           ; 1 bytes @ 0x1
  1290                           
  1291  0071                     ??_WDT_Initialize:	
  1292                           ; 1 bytes @ 0x1
  1293                           
  1294  0071                     ?_putch:	
  1295                           ; 1 bytes @ 0x1
  1296                           
  1297  0071                     ??_ADC_Initialize:	
  1298                           ; 1 bytes @ 0x1
  1299                           
  1300  0071                     ?_INT_SetInterruptHandler:	
  1301                           ; 1 bytes @ 0x1
  1302                           
  1303  0071                     ??_DAC_Initialize:	
  1304                           ; 1 bytes @ 0x1
  1305                           
  1306  0071                     ??_dot:	
  1307                           ; 1 bytes @ 0x1
  1308                           
  1309  0071                     ??_dash:	
  1310                           ; 1 bytes @ 0x1
  1311                           
  1312  0071                     ?_ADC_GetConversion:	
  1313                           ; 1 bytes @ 0x1
  1314                           
  1315  0071                     ?___lwdiv:	
  1316                           ; 2 bytes @ 0x1
  1317                           
  1318  0071                     putch@c:	
  1319                           ; 2 bytes @ 0x1
  1320                           
  1321  0071                     INT_SetInterruptHandler@InterruptHandler:	
  1322                           ; 1 bytes @ 0x1
  1323                           
  1324  0071                     ___lwdiv@divisor:	
  1325                           ; 2 bytes @ 0x1
  1326                           
  1327                           
  1328                           ; 2 bytes @ 0x1
  1329  0071                     	ds	1
  1330  0072                     ??_putch:	
  1331  0072                     dot@i:	
  1332                           ; 1 bytes @ 0x2
  1333                           
  1334  0072                     dash@i:	
  1335                           ; 2 bytes @ 0x2
  1336                           
  1337                           
  1338                           ; 2 bytes @ 0x2
  1339  0072                     	ds	1
  1340  0073                     ??_EXT_INT_Initialize:	
  1341  0073                     ??_ADC_GetConversion:	
  1342                           ; 1 bytes @ 0x3
  1343                           
  1344  0073                     ??_SYSTEM_Initialize:	
  1345                           ; 1 bytes @ 0x3
  1346                           
  1347  0073                     ??_INT_SetInterruptHandler:	
  1348                           ; 1 bytes @ 0x3
  1349                           
  1350  0073                     ___lwdiv@dividend:	
  1351                           ; 1 bytes @ 0x3
  1352                           
  1353                           
  1354                           ; 2 bytes @ 0x3
  1355  0073                     	ds	1
  1356  0074                     ??_sendChar:	
  1357  0074                     ADC_GetConversion@channel:	
  1358                           ; 1 bytes @ 0x4
  1359                           
  1360                           
  1361                           ; 1 bytes @ 0x4
  1362  0074                     	ds	1
  1363  0075                     ??___lwdiv:	
  1364  0075                     sendChar@i:	
  1365                           ; 1 bytes @ 0x5
  1366                           
  1367                           
  1368                           ; 2 bytes @ 0x5
  1369  0075                     	ds	1
  1370  0076                     ___lwdiv@quotient:	
  1371                           
  1372                           ; 2 bytes @ 0x6
  1373  0076                     	ds	1
  1374  0077                     sendChar@a:	
  1375                           
  1376                           ; 1 bytes @ 0x7
  1377  0077                     	ds	1
  1378  0078                     ___lwdiv@counter:	
  1379                           
  1380                           ; 1 bytes @ 0x8
  1381  0078                     	ds	1
  1382  0079                     ?___lwmod:	
  1383  0079                     ___lwmod@divisor:	
  1384                           ; 2 bytes @ 0x9
  1385                           
  1386                           
  1387                           ; 2 bytes @ 0x9
  1388  0079                     	ds	2
  1389  007B                     ___lwmod@dividend:	
  1390                           
  1391                           ; 2 bytes @ 0xB
  1392  007B                     	ds	2
  1393                           
  1394                           	psect	cstackBANK0
  1395  0020                     __pcstackBANK0:	
  1396  0020                     ??___lwmod:	
  1397                           
  1398                           ; 1 bytes @ 0x0
  1399  0020                     	ds	1
  1400  0021                     ___lwmod@counter:	
  1401                           
  1402                           ; 1 bytes @ 0x1
  1403  0021                     	ds	1
  1404  0022                     ?__doprnt:	
  1405  0022                     __doprnt@f:	
  1406                           ; 2 bytes @ 0x2
  1407                           
  1408                           
  1409                           ; 2 bytes @ 0x2
  1410  0022                     	ds	2
  1411  0024                     __doprnt@ap:	
  1412                           
  1413                           ; 1 bytes @ 0x4
  1414  0024                     	ds	1
  1415  0025                     ??__doprnt:	
  1416                           
  1417                           ; 1 bytes @ 0x5
  1418  0025                     	ds	4
  1419  0029                     __doprnt@flag:	
  1420                           
  1421                           ; 1 bytes @ 0x9
  1422  0029                     	ds	1
  1423  002A                     __doprnt@prec:	
  1424                           
  1425                           ; 1 bytes @ 0xA
  1426  002A                     	ds	1
  1427  002B                     __doprnt@val:	
  1428                           
  1429                           ; 2 bytes @ 0xB
  1430  002B                     	ds	2
  1431  002D                     __doprnt@c:	
  1432                           
  1433                           ; 1 bytes @ 0xD
  1434  002D                     	ds	1
  1435  002E                     __doprnt@pb:	
  1436                           
  1437                           ; 1 bytes @ 0xE
  1438  002E                     	ds	1
  1439  002F                     ?_printf:	
  1440  002F                     ?_sprintf:	
  1441                           ; 2 bytes @ 0xF
  1442                           
  1443  002F                     printf@f:	
  1444                           ; 2 bytes @ 0xF
  1445                           
  1446  002F                     sprintf@f:	
  1447                           ; 2 bytes @ 0xF
  1448                           
  1449                           
  1450                           ; 2 bytes @ 0xF
  1451  002F                     	ds	2
  1452  0031                     ??_printf:	
  1453                           
  1454                           ; 1 bytes @ 0x11
  1455  0031                     	ds	1
  1456  0032                     printf@ap:	
  1457                           
  1458                           ; 1 bytes @ 0x12
  1459  0032                     	ds	1
  1460  0033                     printf@pb:	
  1461                           
  1462                           ; 3 bytes @ 0x13
  1463  0033                     	ds	2
  1464  0035                     ??_sprintf:	
  1465                           
  1466                           ; 1 bytes @ 0x15
  1467  0035                     	ds	1
  1468  0036                     sprintf@wh:	
  1469                           
  1470                           ; 1 bytes @ 0x16
  1471  0036                     	ds	1
  1472  0037                     sprintf@ap:	
  1473                           
  1474                           ; 1 bytes @ 0x17
  1475  0037                     	ds	1
  1476  0038                     sprintf@pb:	
  1477                           
  1478                           ; 3 bytes @ 0x18
  1479  0038                     	ds	3
  1480  003B                     ??_main:	
  1481                           
  1482                           ; 1 bytes @ 0x1B
  1483  003B                     	ds	1
  1484  003C                     main@count:	
  1485                           
  1486                           ; 1 bytes @ 0x1C
  1487  003C                     	ds	1
  1488  003D                     main@c:	
  1489                           
  1490                           ; 1 bytes @ 0x1D
  1491  003D                     	ds	1
  1492                           
  1493                           	psect	maintext
  1494  0237                     __pmaintext:	
  1495 ;;
  1496 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1497 ;;
  1498 ;; *************** function _main *****************
  1499 ;; Defined at:
  1500 ;;		line 26 in file "main.c"
  1501 ;; Parameters:    Size  Location     Type
  1502 ;;		None
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;  c               1   29[BANK0 ] PTR unsigned char 
  1505 ;;		 -> str8(10), 
  1506 ;;  count           1   28[BANK0 ] unsigned char 
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      void 
  1509 ;; Registers used:
  1510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1511 ;; Tracked objects:
  1512 ;;		On entry : B1F/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1517 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1519 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1520 ;;Total ram usage:        3 bytes
  1521 ;; Hardware stack levels required when called:    7
  1522 ;; This function calls:
  1523 ;;		_ADC_GetConversion
  1524 ;;		_ADC_Initialize
  1525 ;;		_DAC_Initialize
  1526 ;;		_SYSTEM_Initialize
  1527 ;;		_printf
  1528 ;;		_sendChar
  1529 ;;		_sprintf
  1530 ;; This function is called by:
  1531 ;;		Startup code after reset
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           
  1536                           ;psect for function _main
  1537  0237                     _main:	
  1538                           
  1539                           ;main.c: 31: SYSTEM_Initialize();
  1540                           
  1541                           ;incstack = 0
  1542                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1543  0237  3183  23FB  3182   	fcall	_SYSTEM_Initialize
  1544                           
  1545                           ;main.c: 32: uint8_t count=0;
  1546  023A  0020               	movlb	0	; select bank0
  1547  023B  01BC               	clrf	main@count
  1548                           
  1549                           ;main.c: 38: if (sleep==1)
  1550  023C  0342               	decf	_sleep,w
  1551  023D  0443               	iorwf	_sleep+1,w
  1552  023E  1D03               	btfss	3,2
  1553  023F  2A42               	goto	l186
  1554                           
  1555                           ;main.c: 39: {
  1556                           ;main.c: 41: (INTCONbits.GIE = 1);
  1557  0240  178B               	bsf	11,7	;volatile
  1558                           
  1559                           ;main.c: 42: }
  1560  0241  2A43               	goto	l1346
  1561  0242                     l186:	
  1562                           
  1563                           ;main.c: 43: else
  1564                           ;main.c: 44: {
  1565                           ;main.c: 46: (INTCONbits.GIE = 0);
  1566  0242  138B               	bcf	11,7	;volatile
  1567  0243                     l1346:	
  1568                           
  1569                           ;main.c: 47: }
  1570                           ;main.c: 56: ADC_Initialize();
  1571  0243  3184  2427  3182   	fcall	_ADC_Initialize
  1572                           
  1573                           ;main.c: 57: DAC_Initialize();
  1574  0246  3184  244F  3182   	fcall	_DAC_Initialize
  1575                           
  1576                           ;main.c: 59: printf("Start\n");
  1577  0249  3030               	movlw	low (STR_1| (0+32768))
  1578  024A  0020               	movlb	0	; select bank0
  1579  024B  00AF               	movwf	printf@f
  1580  024C  3084               	movlw	high (STR_1| (0+32768))
  1581  024D  00B0               	movwf	printf@f+1
  1582  024E  3183  23D0  3182   	fcall	_printf
  1583  0251                     l1350:	
  1584                           ;main.c: 60: while (1)
  1585                           
  1586                           
  1587                           ;main.c: 61: {
  1588                           ;main.c: 63: DACEN=0;
  1589  0251  0022               	movlb	2	; select bank2
  1590  0252  1398               	bcf	24,7	;volatile
  1591                           
  1592                           ;main.c: 67: sensor0= ADC_GetConversion(channel_AN8);
  1593  0253  3008               	movlw	8
  1594  0254  3183  23E6  3182   	fcall	_ADC_GetConversion
  1595  0257  0872               	movf	?_ADC_GetConversion+1,w
  1596  0258  0020               	movlb	0	; select bank0
  1597  0259  00C1               	movwf	_sensor0+1
  1598  025A  0871               	movf	?_ADC_GetConversion,w
  1599  025B  00C0               	movwf	_sensor0
  1600                           
  1601                           ;main.c: 71: sensor1= ADC_GetConversion(channel_AN9);
  1602  025C  3009               	movlw	9
  1603  025D  3183  23E6  3182   	fcall	_ADC_GetConversion
  1604  0260  0872               	movf	?_ADC_GetConversion+1,w
  1605  0261  0020               	movlb	0	; select bank0
  1606  0262  00BF               	movwf	_sensor1+1
  1607  0263  0871               	movf	?_ADC_GetConversion,w
  1608  0264  00BE               	movwf	_sensor1
  1609                           
  1610                           ;main.c: 74: ADCON0 = 0x00;
  1611  0265  0021               	movlb	1	; select bank1
  1612  0266  019D               	clrf	29	;volatile
  1613                           
  1614                           ;main.c: 83: DACEN=0;
  1615  0267  0022               	movlb	2	; select bank2
  1616  0268  1398               	bcf	24,7	;volatile
  1617                           
  1618                           ;main.c: 84: DACCON1 = 0 ;
  1619  0269  0199               	clrf	25	;volatile
  1620                           
  1621                           ;main.c: 85: LATB4 = 1;
  1622  026A  160D               	bsf	13,4	;volatile
  1623                           
  1624                           ;main.c: 87: sprintf(str8,"%dE%d", 2, 4);
  1625  026B  3037               	movlw	low (STR_2| (0+32768))
  1626  026C  0020               	movlb	0	; select bank0
  1627  026D  00AF               	movwf	sprintf@f
  1628  026E  3084               	movlw	high (STR_2| (0+32768))
  1629  026F  00B0               	movwf	sprintf@f+1
  1630  0270  3002               	movlw	2
  1631  0271  00B1               	movwf	?_sprintf+2
  1632  0272  3000               	movlw	0
  1633  0273  00B2               	movwf	?_sprintf+3
  1634  0274  3004               	movlw	4
  1635  0275  00B3               	movwf	?_sprintf+4
  1636  0276  3000               	movlw	0
  1637  0277  00B4               	movwf	?_sprintf+5
  1638  0278  3048               	movlw	(low (_str8| 0))& (0+255)
  1639  0279  3183  2398  3182   	fcall	_sprintf
  1640                           
  1641                           ;main.c: 89: char *c = str8;
  1642  027C  3048               	movlw	(low (_str8| 0))& (0+255)
  1643  027D  0020               	movlb	0	; select bank0
  1644  027E  00BB               	movwf	??_main
  1645  027F  083B               	movf	??_main,w
  1646  0280  00BD               	movwf	main@c
  1647  0281                     l1372:	
  1648                           ;main.c: 90: for( ; *c ; c++ )
  1649                           
  1650  0281  083D               	movf	main@c,w
  1651  0282  0086               	movwf	6
  1652  0283  0187               	clrf	7
  1653  0284  0801               	movf	1,w
  1654  0285  1903               	btfsc	3,2
  1655  0286  2A94               	goto	l191
  1656                           
  1657                           ;main.c: 91: {
  1658                           ;main.c: 92: sendChar( *c );
  1659  0287  083D               	movf	main@c,w
  1660  0288  0086               	movwf	6
  1661  0289  0187               	clrf	7
  1662  028A  0801               	movf	1,w
  1663  028B  3181  214C  3182   	fcall	_sendChar
  1664  028E  3001               	movlw	1
  1665  028F  0020               	movlb	0	; select bank0
  1666  0290  00BB               	movwf	??_main
  1667  0291  083B               	movf	??_main,w
  1668  0292  07BD               	addwf	main@c,f
  1669  0293  2A81               	goto	l1372
  1670  0294                     l191:	
  1671                           
  1672                           ;main.c: 93: }
  1673                           ;main.c: 95: DACEN=0;
  1674  0294  0022               	movlb	2	; select bank2
  1675  0295  1398               	bcf	24,7	;volatile
  1676                           
  1677                           ;main.c: 96: LATB4 = 0;
  1678  0296  120D               	bcf	13,4	;volatile
  1679                           
  1680                           ;main.c: 97: if (sleep==1) {
  1681  0297  0020               	movlb	0	; select bank0
  1682  0298  0342               	decf	_sleep,w
  1683  0299  0443               	iorwf	_sleep+1,w
  1684  029A  1903               	btfsc	3,2
  1685  029B  0063               	sleep	;# 
  1686                           
  1687                           ;main.c: 101: }
  1688                           ;main.c: 103: for(v = 0; v < 250; ++v)
  1689  029C  0020               	movlb	0	; select bank0
  1690  029D  01C6               	clrf	_v
  1691  029E  01C7               	clrf	_v+1
  1692  029F                     L1:	
  1693  029F  0847               	movf	_v+1,w
  1694  02A0  3A80               	xorlw	128
  1695  02A1  00BB               	movwf	??_main
  1696  02A2  3080               	movlw	128
  1697  02A3  023B               	subwf	??_main,w
  1698  02A4  1D03               	skipz
  1699  02A5  2AA8               	goto	u1035
  1700  02A6  30FA               	movlw	250
  1701  02A7  0246               	subwf	_v,w
  1702  02A8                     u1035:	
  1703  02A8  1803               	btfsc	3,0
  1704  02A9  2A51               	goto	l1350
  1705                           
  1706                           ;main.c: 104: {
  1707                           ;main.c: 105: __nop();
  1708  02AA  0000               	nop
  1709  02AB  3001               	movlw	1
  1710  02AC  0020               	movlb	0	; select bank0
  1711  02AD  07C6               	addwf	_v,f
  1712  02AE  3000               	movlw	0
  1713  02AF  3DC7               	addwfc	_v+1,f
  1714  02B0  2A9F               	goto	L1
  1715  02B1                     __end_of_main:	
  1716                           
  1717                           	psect	text1
  1718  0398                     __ptext1:	
  1719 ;; *************** function _sprintf *****************
  1720 ;; Defined at:
  1721 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprintf.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  wh              1    wreg     PTR unsigned char 
  1724 ;;		 -> str8(10), 
  1725 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  1726 ;;		 -> STR_2(6), 
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;  wh              1   22[BANK0 ] PTR unsigned char 
  1729 ;;		 -> str8(10), 
  1730 ;;  pb              3   24[BANK0 ] struct __prbuf
  1731 ;;  ap              1   23[BANK0 ] PTR void [1]
  1732 ;;		 -> ?_sprintf(2), ?_printf(2), 
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  2   15[BANK0 ] int 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1742 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1743 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1744 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1745 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1746 ;;Total ram usage:       12 bytes
  1747 ;; Hardware stack levels used:    1
  1748 ;; Hardware stack levels required when called:    6
  1749 ;; This function calls:
  1750 ;;		__doprnt
  1751 ;; This function is called by:
  1752 ;;		_main
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           
  1757                           ;psect for function _sprintf
  1758  0398                     _sprintf:	
  1759                           
  1760                           ;incstack = 0
  1761                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1762                           ;sprintf@wh stored from wreg
  1763  0398  0020               	movlb	0	; select bank0
  1764  0399  00B6               	movwf	sprintf@wh
  1765  039A  0836               	movf	sprintf@wh,w
  1766  039B  00B5               	movwf	??_sprintf
  1767  039C  0835               	movf	??_sprintf,w
  1768  039D  00B8               	movwf	sprintf@pb
  1769  039E  01B9               	clrf	low ((sprintf@pb| 0+1))
  1770  039F  01BA               	clrf	(low ((sprintf@pb| 0+1))+1)
  1771  03A0  3031               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1772  03A1  00B5               	movwf	??_sprintf
  1773  03A2  0835               	movf	??_sprintf,w
  1774  03A3  00B7               	movwf	sprintf@ap
  1775  03A4  0830               	movf	sprintf@f+1,w
  1776  03A5  00A3               	movwf	__doprnt@f+1
  1777  03A6  082F               	movf	sprintf@f,w
  1778  03A7  00A2               	movwf	__doprnt@f
  1779  03A8  3037               	movlw	(low (sprintf@ap| 0))& (0+255)
  1780  03A9  00B5               	movwf	??_sprintf
  1781  03AA  0835               	movf	??_sprintf,w
  1782  03AB  00A4               	movwf	__doprnt@ap
  1783  03AC  3038               	movlw	(low (sprintf@pb| 0))& (0+255)
  1784  03AD  3180  2030         	fcall	__doprnt
  1785  03AF  0020               	movlb	0	; select bank0
  1786  03B0  0838               	movf	sprintf@pb,w
  1787  03B1  0086               	movwf	6
  1788  03B2  0187               	clrf	7
  1789  03B3  0181               	clrf	1
  1790  03B4  0008               	return
  1791  03B5                     __end_of_sprintf:	
  1792                           ;	Return value of _sprintf is never used
  1793                           
  1794                           
  1795                           	psect	text2
  1796  014C                     __ptext2:	
  1797 ;; *************** function _sendChar *****************
  1798 ;; Defined at:
  1799 ;;		line 158 in file "main.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  a               1    wreg     unsigned char 
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;  a               1    7[COMMON] unsigned char 
  1804 ;;  i               2    5[COMMON] int 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0, pclath, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1815 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1816 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1817 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1818 ;;Total ram usage:        4 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    5
  1821 ;; This function calls:
  1822 ;;		_dash
  1823 ;;		_dot
  1824 ;; This function is called by:
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           
  1830                           ;psect for function _sendChar
  1831  014C                     _sendChar:	
  1832                           
  1833                           ;incstack = 0
  1834                           ; Regs used in _sendChar: [wreg+status,2+status,0+pclath+cstack]
  1835                           ;sendChar@a stored from wreg
  1836  014C  00F7               	movwf	sendChar@a
  1837                           
  1838                           ;main.c: 160: int i;
  1839                           ;main.c: 161: if (a=='0'){
  1840  014D  3030               	movlw	48
  1841  014E  0677               	xorwf	sendChar@a,w
  1842  014F  1D03               	btfss	3,2
  1843  0150  2961               	goto	l1284
  1844                           
  1845                           ;main.c: 162: dash();dash();dash();dash();dash();}
  1846  0151  3182  22B1  3181   	fcall	_dash
  1847  0154  3182  22B1  3181   	fcall	_dash
  1848  0157  3182  22B1  3181   	fcall	_dash
  1849  015A  3182  22B1  3181   	fcall	_dash
  1850  015D  3182  22B1  3181   	fcall	_dash
  1851  0160  2A0D               	goto	l1324
  1852  0161                     l1284:	
  1853                           
  1854                           ;main.c: 163: else if (a=='1'){
  1855  0161  3031               	movlw	49
  1856  0162  0677               	xorwf	sendChar@a,w
  1857  0163  1D03               	btfss	3,2
  1858  0164  2975               	goto	l1288
  1859                           
  1860                           ;main.c: 164: dot(); dash(); dash(); dash(); dash();}
  1861  0165  3183  233D  3181   	fcall	_dot
  1862  0168  3182  22B1  3181   	fcall	_dash
  1863  016B  3182  22B1  3181   	fcall	_dash
  1864  016E  3182  22B1  3181   	fcall	_dash
  1865  0171  3182  22B1  3181   	fcall	_dash
  1866  0174  2A0D               	goto	l1324
  1867  0175                     l1288:	
  1868                           
  1869                           ;main.c: 165: else if (a=='2'){
  1870  0175  3032               	movlw	50
  1871  0176  0677               	xorwf	sendChar@a,w
  1872  0177  1D03               	btfss	3,2
  1873  0178  2989               	goto	l1292
  1874                           
  1875                           ;main.c: 166: dot(); dot(); dash(); dash(); dash();}
  1876  0179  3183  233D  3181   	fcall	_dot
  1877  017C  3183  233D  3181   	fcall	_dot
  1878  017F  3182  22B1  3181   	fcall	_dash
  1879  0182  3182  22B1  3181   	fcall	_dash
  1880  0185  3182  22B1  3181   	fcall	_dash
  1881  0188  2A0D               	goto	l1324
  1882  0189                     l1292:	
  1883                           
  1884                           ;main.c: 167: else if (a=='3'){
  1885  0189  3033               	movlw	51
  1886  018A  0677               	xorwf	sendChar@a,w
  1887  018B  1D03               	btfss	3,2
  1888  018C  299D               	goto	l1296
  1889                           
  1890                           ;main.c: 168: dot(); dot(); dot(); dash(); dash();}
  1891  018D  3183  233D  3181   	fcall	_dot
  1892  0190  3183  233D  3181   	fcall	_dot
  1893  0193  3183  233D  3181   	fcall	_dot
  1894  0196  3182  22B1  3181   	fcall	_dash
  1895  0199  3182  22B1  3181   	fcall	_dash
  1896  019C  2A0D               	goto	l1324
  1897  019D                     l1296:	
  1898                           
  1899                           ;main.c: 169: else if (a=='4'){
  1900  019D  3034               	movlw	52
  1901  019E  0677               	xorwf	sendChar@a,w
  1902  019F  1D03               	btfss	3,2
  1903  01A0  29B1               	goto	l1300
  1904                           
  1905                           ;main.c: 170: dot(); dot(); dot(); dot(); dash();}
  1906  01A1  3183  233D  3181   	fcall	_dot
  1907  01A4  3183  233D  3181   	fcall	_dot
  1908  01A7  3183  233D  3181   	fcall	_dot
  1909  01AA  3183  233D  3181   	fcall	_dot
  1910  01AD  3182  22B1  3181   	fcall	_dash
  1911  01B0  2A0D               	goto	l1324
  1912  01B1                     l1300:	
  1913                           
  1914                           ;main.c: 171: else if (a=='5'){
  1915  01B1  3035               	movlw	53
  1916  01B2  0677               	xorwf	sendChar@a,w
  1917  01B3  1D03               	btfss	3,2
  1918  01B4  29C2               	goto	l1304
  1919                           
  1920                           ;main.c: 172: dot(); dot(); dot(); dot(); dot();}
  1921  01B5  3183  233D  3181   	fcall	_dot
  1922  01B8  3183  233D  3181   	fcall	_dot
  1923  01BB  3183  233D  3181   	fcall	_dot
  1924  01BE  3183  233D  3181   	fcall	_dot
  1925  01C1  2A0A               	goto	l1322
  1926  01C2                     l1304:	
  1927                           
  1928                           ;main.c: 173: else if (a=='6'){
  1929  01C2  3036               	movlw	54
  1930  01C3  0677               	xorwf	sendChar@a,w
  1931  01C4  1D03               	btfss	3,2
  1932  01C5  29D3               	goto	l1308
  1933                           
  1934                           ;main.c: 174: dash(); dot(); dot(); dot(); dot();}
  1935  01C6  3182  22B1  3181   	fcall	_dash
  1936  01C9  3183  233D  3181   	fcall	_dot
  1937  01CC  3183  233D  3181   	fcall	_dot
  1938  01CF  3183  233D  3181   	fcall	_dot
  1939  01D2  2A0A               	goto	l1322
  1940  01D3                     l1308:	
  1941                           
  1942                           ;main.c: 175: else if (a=='7'){
  1943  01D3  3037               	movlw	55
  1944  01D4  0677               	xorwf	sendChar@a,w
  1945  01D5  1D03               	btfss	3,2
  1946  01D6  29E4               	goto	l1312
  1947                           
  1948                           ;main.c: 176: dash(); dash(); dot(); dot(); dot();}
  1949  01D7  3182  22B1  3181   	fcall	_dash
  1950  01DA  3182  22B1  3181   	fcall	_dash
  1951  01DD  3183  233D  3181   	fcall	_dot
  1952  01E0  3183  233D  3181   	fcall	_dot
  1953  01E3  2A0A               	goto	l1322
  1954  01E4                     l1312:	
  1955                           
  1956                           ;main.c: 177: else if (a=='8'){
  1957  01E4  3038               	movlw	56
  1958  01E5  0677               	xorwf	sendChar@a,w
  1959  01E6  1D03               	btfss	3,2
  1960  01E7  29F5               	goto	l1316
  1961                           
  1962                           ;main.c: 178: dash();dash();dash(); dot(); dot(); }
  1963  01E8  3182  22B1  3181   	fcall	_dash
  1964  01EB  3182  22B1  3181   	fcall	_dash
  1965  01EE  3182  22B1  3181   	fcall	_dash
  1966  01F1  3183  233D  3181   	fcall	_dot
  1967  01F4  2A0A               	goto	l1322
  1968  01F5                     l1316:	
  1969                           
  1970                           ;main.c: 179: else if (a=='9'){
  1971  01F5  3039               	movlw	57
  1972  01F6  0677               	xorwf	sendChar@a,w
  1973  01F7  1D03               	btfss	3,2
  1974  01F8  2A06               	goto	l1320
  1975                           
  1976                           ;main.c: 180: dash();dash();dash();dash(); dot();}
  1977  01F9  3182  22B1  3181   	fcall	_dash
  1978  01FC  3182  22B1  3181   	fcall	_dash
  1979  01FF  3182  22B1  3181   	fcall	_dash
  1980  0202  3182  22B1  3181   	fcall	_dash
  1981  0205  2A0A               	goto	l1322
  1982  0206                     l1320:	
  1983                           
  1984                           ;main.c: 181: else if (a=='E'){
  1985  0206  3045               	movlw	69
  1986  0207  0677               	xorwf	sendChar@a,w
  1987  0208  1D03               	btfss	3,2
  1988  0209  2A0D               	goto	l1324
  1989  020A                     l1322:	
  1990                           
  1991                           ;main.c: 182: dot();}
  1992  020A  3183  233D  3181   	fcall	_dot
  1993  020D                     l1324:	
  1994                           
  1995                           ;main.c: 185: for(i = 0; i < delay; ++i){
  1996  020D  01F5               	clrf	sendChar@i
  1997  020E  01F6               	clrf	sendChar@i+1
  1998  020F                     l245:	
  1999  020F  0876               	movf	sendChar@i+1,w
  2000  0210  3A80               	xorlw	128
  2001  0211  00F4               	movwf	??_sendChar
  2002  0212  0020               	movlb	0	; select bank0
  2003  0213  0855               	movf	_delay+1,w
  2004  0214  3A80               	xorlw	128
  2005  0215  0274               	subwf	??_sendChar,w
  2006  0216  1D03               	skipz
  2007  0217  2A1A               	goto	u965
  2008  0218  0854               	movf	_delay,w
  2009  0219  0275               	subwf	sendChar@i,w
  2010  021A                     u965:	
  2011  021A  1803               	btfsc	3,0
  2012  021B  2A22               	goto	l1328
  2013                           
  2014                           ;main.c: 186: __nop();
  2015  021C  0000               	nop
  2016  021D  3001               	movlw	1
  2017  021E  07F5               	addwf	sendChar@i,f
  2018  021F  3000               	movlw	0
  2019  0220  3DF6               	addwfc	sendChar@i+1,f
  2020  0221  2A0F               	goto	l245
  2021  0222                     l1328:	
  2022                           
  2023                           ;main.c: 187: }
  2024                           ;main.c: 188: for(i = 0; i < delay; ++i){
  2025  0222  01F5               	clrf	sendChar@i
  2026  0223  01F6               	clrf	sendChar@i+1
  2027  0224                     l248:	
  2028  0224  0876               	movf	sendChar@i+1,w
  2029  0225  3A80               	xorlw	128
  2030  0226  00F4               	movwf	??_sendChar
  2031  0227  0020               	movlb	0	; select bank0
  2032  0228  0855               	movf	_delay+1,w
  2033  0229  3A80               	xorlw	128
  2034  022A  0274               	subwf	??_sendChar,w
  2035  022B  1D03               	skipz
  2036  022C  2A2F               	goto	u975
  2037  022D  0854               	movf	_delay,w
  2038  022E  0275               	subwf	sendChar@i,w
  2039  022F                     u975:	
  2040  022F  1803               	btfsc	3,0
  2041  0230  0008               	return
  2042                           
  2043                           ;main.c: 189: __nop();
  2044  0231  0000               	nop
  2045  0232  3001               	movlw	1
  2046  0233  07F5               	addwf	sendChar@i,f
  2047  0234  3000               	movlw	0
  2048  0235  3DF6               	addwfc	sendChar@i+1,f
  2049  0236  2A24               	goto	l248
  2050  0237                     __end_of_sendChar:	
  2051                           
  2052                           	psect	text3
  2053  033D                     __ptext3:	
  2054 ;; *************** function _dot *****************
  2055 ;; Defined at:
  2056 ;;		line 113 in file "main.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  i               2    2[COMMON] int 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2072 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2073 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2074 ;;Total ram usage:        3 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    4
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_sendChar
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           
  2085                           ;psect for function _dot
  2086  033D                     _dot:	
  2087                           
  2088                           ;main.c: 115: int i;
  2089                           ;main.c: 116: LATC3=1;
  2090                           
  2091                           ;incstack = 0
  2092                           ; Regs used in _dot: [wreg+status,2]
  2093  033D  0022               	movlb	2	; select bank2
  2094  033E  158E               	bsf	14,3	;volatile
  2095                           
  2096                           ;main.c: 118: for(i = 0; i < delay; ++i)
  2097  033F  01F2               	clrf	dot@i
  2098  0340  01F3               	clrf	dot@i+1
  2099  0341                     l200:	
  2100  0341  0873               	movf	dot@i+1,w
  2101  0342  3A80               	xorlw	128
  2102  0343  00F1               	movwf	??_dot
  2103  0344  0020               	movlb	0	; select bank0
  2104  0345  0855               	movf	_delay+1,w
  2105  0346  3A80               	xorlw	128
  2106  0347  0271               	subwf	??_dot,w
  2107  0348  1D03               	skipz
  2108  0349  2B4C               	goto	u675
  2109  034A  0854               	movf	_delay,w
  2110  034B  0272               	subwf	dot@i,w
  2111  034C                     u675:	
  2112  034C  1803               	btfsc	3,0
  2113  034D  2B54               	goto	l202
  2114                           
  2115                           ;main.c: 119: {
  2116                           ;main.c: 120: __nop();
  2117  034E  0000               	nop
  2118  034F  3001               	movlw	1
  2119  0350  07F2               	addwf	dot@i,f
  2120  0351  3000               	movlw	0
  2121  0352  3DF3               	addwfc	dot@i+1,f
  2122  0353  2B41               	goto	l200
  2123  0354                     l202:	
  2124                           
  2125                           ;main.c: 121: }
  2126                           ;main.c: 122: LATC3=0;
  2127  0354  0022               	movlb	2	; select bank2
  2128  0355  118E               	bcf	14,3	;volatile
  2129                           
  2130                           ;main.c: 123: for(i = 0; i < delay; ++i)
  2131  0356  01F2               	clrf	dot@i
  2132  0357  01F3               	clrf	dot@i+1
  2133  0358                     l203:	
  2134  0358  0873               	movf	dot@i+1,w
  2135  0359  3A80               	xorlw	128
  2136  035A  00F1               	movwf	??_dot
  2137  035B  0020               	movlb	0	; select bank0
  2138  035C  0855               	movf	_delay+1,w
  2139  035D  3A80               	xorlw	128
  2140  035E  0271               	subwf	??_dot,w
  2141  035F  1D03               	skipz
  2142  0360  2B63               	goto	u685
  2143  0361  0854               	movf	_delay,w
  2144  0362  0272               	subwf	dot@i,w
  2145  0363                     u685:	
  2146  0363  1803               	btfsc	3,0
  2147  0364  0008               	return
  2148                           
  2149                           ;main.c: 124: {
  2150                           ;main.c: 125: __nop();
  2151  0365  0000               	nop
  2152  0366  3001               	movlw	1
  2153  0367  07F2               	addwf	dot@i,f
  2154  0368  3000               	movlw	0
  2155  0369  3DF3               	addwfc	dot@i+1,f
  2156  036A  2B58               	goto	l203
  2157  036B                     __end_of_dot:	
  2158                           
  2159                           	psect	text4
  2160  02B1                     __ptext4:	
  2161 ;; *************** function _dash *****************
  2162 ;; Defined at:
  2163 ;;		line 129 in file "main.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  i               2    2[COMMON] int 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2180 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2181 ;;Total ram usage:        3 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    4
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_sendChar
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           
  2192                           ;psect for function _dash
  2193  02B1                     _dash:	
  2194                           
  2195                           ;main.c: 131: int i;
  2196                           ;main.c: 132: LATC3=1;
  2197                           
  2198                           ;incstack = 0
  2199                           ; Regs used in _dash: [wreg+status,2]
  2200  02B1  0022               	movlb	2	; select bank2
  2201  02B2  158E               	bsf	14,3	;volatile
  2202                           
  2203                           ;main.c: 135: for(i = 0; i < delay; ++i)
  2204  02B3  01F2               	clrf	dash@i
  2205  02B4  01F3               	clrf	dash@i+1
  2206  02B5                     l209:	
  2207  02B5  0873               	movf	dash@i+1,w
  2208  02B6  3A80               	xorlw	128
  2209  02B7  00F1               	movwf	??_dash
  2210  02B8  0020               	movlb	0	; select bank0
  2211  02B9  0855               	movf	_delay+1,w
  2212  02BA  3A80               	xorlw	128
  2213  02BB  0271               	subwf	??_dash,w
  2214  02BC  1D03               	skipz
  2215  02BD  2AC0               	goto	u695
  2216  02BE  0854               	movf	_delay,w
  2217  02BF  0272               	subwf	dash@i,w
  2218  02C0                     u695:	
  2219  02C0  1803               	btfsc	3,0
  2220  02C1  2AC8               	goto	l1144
  2221                           
  2222                           ;main.c: 136: {
  2223                           ;main.c: 137: __nop();
  2224  02C2  0000               	nop
  2225  02C3  3001               	movlw	1
  2226  02C4  07F2               	addwf	dash@i,f
  2227  02C5  3000               	movlw	0
  2228  02C6  3DF3               	addwfc	dash@i+1,f
  2229  02C7  2AB5               	goto	l209
  2230  02C8                     l1144:	
  2231                           
  2232                           ;main.c: 138: }
  2233                           ;main.c: 139: for(i = 0; i < delay; ++i)
  2234  02C8  01F2               	clrf	dash@i
  2235  02C9  01F3               	clrf	dash@i+1
  2236  02CA                     l212:	
  2237  02CA  0873               	movf	dash@i+1,w
  2238  02CB  3A80               	xorlw	128
  2239  02CC  00F1               	movwf	??_dash
  2240  02CD  0020               	movlb	0	; select bank0
  2241  02CE  0855               	movf	_delay+1,w
  2242  02CF  3A80               	xorlw	128
  2243  02D0  0271               	subwf	??_dash,w
  2244  02D1  1D03               	skipz
  2245  02D2  2AD5               	goto	u705
  2246  02D3  0854               	movf	_delay,w
  2247  02D4  0272               	subwf	dash@i,w
  2248  02D5                     u705:	
  2249  02D5  1803               	btfsc	3,0
  2250  02D6  2ADD               	goto	l1148
  2251                           
  2252                           ;main.c: 140: {
  2253                           ;main.c: 141: __nop();
  2254  02D7  0000               	nop
  2255  02D8  3001               	movlw	1
  2256  02D9  07F2               	addwf	dash@i,f
  2257  02DA  3000               	movlw	0
  2258  02DB  3DF3               	addwfc	dash@i+1,f
  2259  02DC  2ACA               	goto	l212
  2260  02DD                     l1148:	
  2261                           
  2262                           ;main.c: 142: }
  2263                           ;main.c: 144: for(i = 0; i < delay; ++i)
  2264  02DD  01F2               	clrf	dash@i
  2265  02DE  01F3               	clrf	dash@i+1
  2266  02DF                     l215:	
  2267  02DF  0873               	movf	dash@i+1,w
  2268  02E0  3A80               	xorlw	128
  2269  02E1  00F1               	movwf	??_dash
  2270  02E2  0020               	movlb	0	; select bank0
  2271  02E3  0855               	movf	_delay+1,w
  2272  02E4  3A80               	xorlw	128
  2273  02E5  0271               	subwf	??_dash,w
  2274  02E6  1D03               	skipz
  2275  02E7  2AEA               	goto	u715
  2276  02E8  0854               	movf	_delay,w
  2277  02E9  0272               	subwf	dash@i,w
  2278  02EA                     u715:	
  2279  02EA  1803               	btfsc	3,0
  2280  02EB  2AF2               	goto	l217
  2281                           
  2282                           ;main.c: 145: {
  2283                           ;main.c: 146: __nop();
  2284  02EC  0000               	nop
  2285  02ED  3001               	movlw	1
  2286  02EE  07F2               	addwf	dash@i,f
  2287  02EF  3000               	movlw	0
  2288  02F0  3DF3               	addwfc	dash@i+1,f
  2289  02F1  2ADF               	goto	l215
  2290  02F2                     l217:	
  2291                           
  2292                           ;main.c: 147: }
  2293                           ;main.c: 149: LATC3=0;
  2294  02F2  0022               	movlb	2	; select bank2
  2295  02F3  118E               	bcf	14,3	;volatile
  2296                           
  2297                           ;main.c: 150: for(i = 0; i < delay; ++i)
  2298  02F4  01F2               	clrf	dash@i
  2299  02F5  01F3               	clrf	dash@i+1
  2300  02F6                     l218:	
  2301  02F6  0873               	movf	dash@i+1,w
  2302  02F7  3A80               	xorlw	128
  2303  02F8  00F1               	movwf	??_dash
  2304  02F9  0020               	movlb	0	; select bank0
  2305  02FA  0855               	movf	_delay+1,w
  2306  02FB  3A80               	xorlw	128
  2307  02FC  0271               	subwf	??_dash,w
  2308  02FD  1D03               	skipz
  2309  02FE  2B01               	goto	u725
  2310  02FF  0854               	movf	_delay,w
  2311  0300  0272               	subwf	dash@i,w
  2312  0301                     u725:	
  2313  0301  1803               	btfsc	3,0
  2314  0302  0008               	return
  2315                           
  2316                           ;main.c: 151: {
  2317                           ;main.c: 152: __nop();
  2318  0303  0000               	nop
  2319  0304  3001               	movlw	1
  2320  0305  07F2               	addwf	dash@i,f
  2321  0306  3000               	movlw	0
  2322  0307  3DF3               	addwfc	dash@i+1,f
  2323  0308  2AF6               	goto	l218
  2324  0309                     __end_of_dash:	
  2325                           
  2326                           	psect	text5
  2327  03D0                     __ptext5:	
  2328 ;; *************** function _printf *****************
  2329 ;; Defined at:
  2330 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\printf.c"
  2331 ;; Parameters:    Size  Location     Type
  2332 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  2333 ;;		 -> STR_1(7), 
  2334 ;; Auto vars:     Size  Location     Type
  2335 ;;  pb              3   19[BANK0 ] struct __prbuf
  2336 ;;  ap              1   18[BANK0 ] PTR void [1]
  2337 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  2   15[BANK0 ] int 
  2340 ;; Registers used:
  2341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2347 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2348 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2350 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2351 ;;Total ram usage:        7 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    6
  2354 ;; This function calls:
  2355 ;;		__doprnt
  2356 ;; This function is called by:
  2357 ;;		_main
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           
  2362                           ;psect for function _printf
  2363  03D0                     _printf:	
  2364                           
  2365                           ;incstack = 0
  2366                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2367  03D0  0020               	movlb	0	; select bank0
  2368  03D1  01B3               	clrf	printf@pb
  2369  03D2  3061               	movlw	low _putch
  2370  03D3  00B4               	movwf	low ((printf@pb| 0+1))
  2371  03D4  3004               	movlw	high _putch
  2372  03D5  00B5               	movwf	(low ((printf@pb| 0+1))+1)
  2373  03D6  3031               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2374  03D7  00B1               	movwf	??_printf
  2375  03D8  0831               	movf	??_printf,w
  2376  03D9  00B2               	movwf	printf@ap
  2377                           
  2378                           ;	Return value of _printf is never used
  2379  03DA  0830               	movf	printf@f+1,w
  2380  03DB  00A3               	movwf	__doprnt@f+1
  2381  03DC  082F               	movf	printf@f,w
  2382  03DD  00A2               	movwf	__doprnt@f
  2383  03DE  3032               	movlw	(low (printf@ap| 0))& (0+255)
  2384  03DF  00B1               	movwf	??_printf
  2385  03E0  0831               	movf	??_printf,w
  2386  03E1  00A4               	movwf	__doprnt@ap
  2387  03E2  3033               	movlw	(low (printf@pb| 0))& (0+255)
  2388  03E3  3180  2030         	fcall	__doprnt
  2389  03E5  0008               	return
  2390  03E6                     __end_of_printf:	
  2391                           
  2392                           	psect	text6
  2393  0030                     __ptext6:	
  2394 ;; *************** function __doprnt *****************
  2395 ;; Defined at:
  2396 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  pb              1    wreg     PTR struct __prbuf
  2399 ;;		 -> sprintf@pb(3), printf@pb(3), 
  2400 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  2401 ;;		 -> STR_2(6), STR_1(7), 
  2402 ;;  ap              1    4[BANK0 ] PTR PTR void 
  2403 ;;		 -> sprintf@ap(1), printf@ap(1), 
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  pb              1   14[BANK0 ] PTR struct __prbuf
  2406 ;;		 -> sprintf@pb(3), printf@pb(3), 
  2407 ;;  tmpval          4    0        struct .
  2408 ;;  val             2   11[BANK0 ] unsigned int 
  2409 ;;  cp              2    0        PTR const unsigned char 
  2410 ;;  len             2    0        unsigned int 
  2411 ;;  c               1   13[BANK0 ] char 
  2412 ;;  prec            1   10[BANK0 ] char 
  2413 ;;  flag            1    9[BANK0 ] unsigned char 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  2    2[BANK0 ] int 
  2416 ;; Registers used:
  2417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2423 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2424 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2425 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2426 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2427 ;;Total ram usage:       13 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    5
  2430 ;; This function calls:
  2431 ;;		Absolute function
  2432 ;;		___lwdiv
  2433 ;;		___lwmod
  2434 ;;		_putch
  2435 ;; This function is called by:
  2436 ;;		_printf
  2437 ;;		_sprintf
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           
  2442                           ;psect for function __doprnt
  2443  0030                     __doprnt:	
  2444                           
  2445                           ;incstack = 0
  2446                           ; Regs used in __doprnt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2447                           ;__doprnt@pb stored from wreg
  2448  0030  0020               	movlb	0	; select bank0
  2449  0031  00AE               	movwf	__doprnt@pb
  2450  0032                     l1218:	
  2451                           ;doprnt.c: 499: signed char c;
  2452                           ;doprnt.c: 506: signed char prec;
  2453                           ;doprnt.c: 508: unsigned char flag;
  2454                           ;doprnt.c: 523: union {
  2455                           ;doprnt.c: 524: unsigned long vd;
  2456                           ;doprnt.c: 525: double integ;
  2457                           ;doprnt.c: 526: } tmpval;
  2458                           ;doprnt.c: 528: unsigned int val;
  2459                           ;doprnt.c: 529: unsigned len;
  2460                           ;doprnt.c: 530: const char * cp;
  2461                           ;doprnt.c: 536: while(c = *f++) {
  2462                           
  2463  0032  0020               	movlb	0	; select bank0
  2464  0033  0823               	movf	__doprnt@f+1,w
  2465  0034  00A6               	movwf	??__doprnt+1
  2466  0035  0822               	movf	__doprnt@f,w
  2467  0036  00A5               	movwf	??__doprnt
  2468  0037  0AA2               	incf	__doprnt@f,f
  2469  0038  1903               	skipnz
  2470  0039  0AA3               	incf	__doprnt@f+1,f
  2471  003A  0825               	movf	??__doprnt,w
  2472  003B  0084               	movwf	4
  2473  003C  0826               	movf	??__doprnt+1,w
  2474  003D  0085               	movwf	5
  2475  003E  0800               	movf	0,w	;code access
  2476  003F  00A7               	movwf	??__doprnt+2
  2477  0040  0827               	movf	??__doprnt+2,w
  2478  0041  00AD               	movwf	__doprnt@c
  2479  0042  082D               	movf	__doprnt@c,w
  2480  0043  1903               	btfsc	3,2
  2481  0044  2949               	goto	l1220
  2482                           
  2483                           ;doprnt.c: 538: if(c != '%')
  2484  0045  3025               	movlw	37
  2485  0046  062D               	xorwf	__doprnt@c,w
  2486  0047  1903               	btfsc	3,2
  2487  0048  2870               	goto	l1168
  2488                           
  2489                           ;doprnt.c: 540: {
  2490                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  2491  0049  0A2E               	incf	__doprnt@pb,w
  2492  004A  0086               	movwf	6
  2493  004B  0187               	clrf	7
  2494  004C  0016               	moviw fsr1++
  2495  004D  0401               	iorwf	1,w
  2496  004E  1903               	btfsc	3,2
  2497  004F  285D               	goto	l1164
  2498  0050  082D               	movf	__doprnt@c,w
  2499  0051  00A5               	movwf	??__doprnt
  2500  0052  0825               	movf	??__doprnt,w
  2501  0053  00F1               	movwf	putch@c
  2502  0054  0A2E               	incf	__doprnt@pb,w
  2503  0055  0086               	movwf	6
  2504  0056  0187               	clrf	7
  2505  0057  3F41               	moviw [1]fsr1
  2506  0058  008A               	movwf	10
  2507  0059  3F40               	moviw [0]fsr1
  2508  005A  000A               	callw
  2509  005B  3180               	pagesel	$
  2510  005C  2832               	goto	l1218
  2511  005D                     l1164:	
  2512  005D  0020               	movlb	0	; select bank0
  2513  005E  082D               	movf	__doprnt@c,w
  2514  005F  00A5               	movwf	??__doprnt
  2515  0060  082E               	movf	__doprnt@pb,w
  2516  0061  0086               	movwf	6
  2517  0062  0187               	clrf	7
  2518  0063  0801               	movf	1,w
  2519  0064  0086               	movwf	6
  2520  0065  0187               	clrf	7
  2521  0066  0825               	movf	??__doprnt,w
  2522  0067  0081               	movwf	1
  2523  0068  3001               	movlw	1
  2524  0069  00A5               	movwf	??__doprnt
  2525  006A  082E               	movf	__doprnt@pb,w
  2526  006B  0086               	movwf	6
  2527  006C  0187               	clrf	7
  2528  006D  0825               	movf	??__doprnt,w
  2529  006E  0781               	addwf	1,f
  2530                           
  2531                           ;doprnt.c: 542: continue;
  2532  006F  2832               	goto	l1218
  2533  0070                     l1168:	
  2534                           
  2535                           ;doprnt.c: 543: }
  2536                           ;doprnt.c: 548: flag = 0;
  2537  0070  01A9               	clrf	__doprnt@flag
  2538                           
  2539                           ;doprnt.c: 822: }
  2540                           
  2541                           ;doprnt.c: 813: continue;
  2542                           
  2543                           ;doprnt.c: 802: default:
  2544                           
  2545                           ;doprnt.c: 698: case 'i':
  2546                           ;doprnt.c: 699: break;
  2547                           
  2548                           ;doprnt.c: 697: case 'd':
  2549                           
  2550                           ;doprnt.c: 638: goto alldone;
  2551                           
  2552                           ;doprnt.c: 637: case 0:
  2553                           
  2554                           ;doprnt.c: 635: switch(c = *f++) {
  2555  0071  0823               	movf	__doprnt@f+1,w
  2556  0072  00A6               	movwf	??__doprnt+1
  2557  0073  0822               	movf	__doprnt@f,w
  2558  0074  00A5               	movwf	??__doprnt
  2559  0075  0AA2               	incf	__doprnt@f,f
  2560  0076  1903               	skipnz
  2561  0077  0AA3               	incf	__doprnt@f+1,f
  2562  0078  0825               	movf	??__doprnt,w
  2563  0079  0084               	movwf	4
  2564  007A  0826               	movf	??__doprnt+1,w
  2565  007B  0085               	movwf	5
  2566  007C  0800               	movf	0,w	;code access
  2567  007D  00AD               	movwf	__doprnt@c
  2568                           
  2569                           ; Switch size 1, requested type "space"
  2570                           ; Number of cases is 3, Range of values is 0 to 105
  2571                           ; switch strategies available:
  2572                           ; Name         Instructions Cycles
  2573                           ; simple_byte           10     6 (average)
  2574                           ; direct_byte          218     6 (fixed)
  2575                           ; jumptable            260     6 (fixed)
  2576                           ;	Chosen strategy is simple_byte
  2577  007E  3A00               	xorlw	0	; case 0
  2578  007F  1903               	skipnz
  2579  0080  2949               	goto	l1220
  2580  0081  3A64               	xorlw	100	; case 100
  2581  0082  1903               	skipnz
  2582  0083  2888               	goto	l1174
  2583  0084  3A0D               	xorlw	13	; case 105
  2584  0085  1903               	skipnz
  2585  0086  2888               	goto	l1174
  2586  0087  2832               	goto	l1218
  2587  0088                     l1174:	
  2588                           
  2589                           ;doprnt.c: 1253: {
  2590                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2591  0088  0824               	movf	__doprnt@ap,w
  2592  0089  0086               	movwf	6
  2593  008A  0187               	clrf	7
  2594  008B  0801               	movf	1,w
  2595  008C  0084               	movwf	4
  2596  008D  0185               	clrf	5
  2597  008E  3002               	movlw	2
  2598  008F  0781               	addwf	1,f
  2599  0090  3F00               	moviw [0]fsr0
  2600  0091  00AB               	movwf	__doprnt@val
  2601  0092  3F01               	moviw [1]fsr0
  2602  0093  00AC               	movwf	__doprnt@val+1
  2603                           
  2604                           ;doprnt.c: 1261: if((int)val < 0) {
  2605  0094  1FAC               	btfss	__doprnt@val+1,7
  2606  0095  289F               	goto	l1182
  2607                           
  2608                           ;doprnt.c: 1262: flag |= 0x03;
  2609  0096  3003               	movlw	3
  2610  0097  00A5               	movwf	??__doprnt
  2611  0098  0825               	movf	??__doprnt,w
  2612  0099  04A9               	iorwf	__doprnt@flag,f
  2613                           
  2614                           ;doprnt.c: 1263: val = -val;
  2615  009A  09AB               	comf	__doprnt@val,f
  2616  009B  09AC               	comf	__doprnt@val+1,f
  2617  009C  0AAB               	incf	__doprnt@val,f
  2618  009D  1903               	skipnz
  2619  009E  0AAC               	incf	__doprnt@val+1,f
  2620  009F                     l1182:	
  2621                           
  2622                           ;doprnt.c: 1264: }
  2623                           ;doprnt.c: 1266: }
  2624                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2625  009F  01AD               	clrf	__doprnt@c
  2626  00A0  0AAD               	incf	__doprnt@c,f
  2627  00A1  3005               	movlw	5
  2628  00A2  062D               	xorwf	__doprnt@c,w
  2629  00A3  1903               	btfsc	3,2
  2630  00A4  28C4               	goto	l1194
  2631  00A5                     l1188:	
  2632                           
  2633                           ;doprnt.c: 1306: if(val < dpowers[c])
  2634  00A5  082D               	movf	__doprnt@c,w
  2635  00A6  00A5               	movwf	??__doprnt
  2636  00A7  01A6               	clrf	??__doprnt+1
  2637  00A8  35A5               	lslf	??__doprnt,f
  2638  00A9  0DA6               	rlf	??__doprnt+1,f
  2639  00AA  301D               	movlw	low (_dpowers| (0+32768))
  2640  00AB  0725               	addwf	??__doprnt,w
  2641  00AC  0084               	movwf	4
  2642  00AD  3084               	movlw	high (_dpowers| (0+32768))
  2643  00AE  3D26               	addwfc	??__doprnt+1,w
  2644  00AF  0085               	movwf	5
  2645  00B0  3F00               	moviw [0]fsr0
  2646  00B1  00A7               	movwf	??__doprnt+2
  2647  00B2  3F01               	moviw [1]fsr0
  2648  00B3  00A8               	movwf	??__doprnt+3
  2649  00B4  0828               	movf	??__doprnt+3,w
  2650  00B5  022C               	subwf	__doprnt@val+1,w
  2651  00B6  1D03               	skipz
  2652  00B7  28BA               	goto	u775
  2653  00B8  0827               	movf	??__doprnt+2,w
  2654  00B9  022B               	subwf	__doprnt@val,w
  2655  00BA                     u775:	
  2656  00BA  1C03               	btfss	3,0
  2657  00BB  28C4               	goto	l1194
  2658                           
  2659                           ;doprnt.c: 1307: break;
  2660  00BC  3001               	movlw	1
  2661  00BD  00A5               	movwf	??__doprnt
  2662  00BE  0825               	movf	??__doprnt,w
  2663  00BF  07AD               	addwf	__doprnt@c,f
  2664  00C0  3005               	movlw	5
  2665  00C1  062D               	xorwf	__doprnt@c,w
  2666  00C2  1D03               	btfss	3,2
  2667  00C3  28A5               	goto	l1188
  2668  00C4                     l1194:	
  2669                           
  2670                           ;doprnt.c: 1422: {
  2671                           ;doprnt.c: 1438: if(flag & 0x03)
  2672  00C4  0829               	movf	__doprnt@flag,w
  2673  00C5  3903               	andlw	3
  2674  00C6  1903               	btfsc	3,2
  2675  00C7  28EE               	goto	l1204
  2676                           
  2677                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  2678  00C8  0A2E               	incf	__doprnt@pb,w
  2679  00C9  0086               	movwf	6
  2680  00CA  0187               	clrf	7
  2681  00CB  0016               	moviw fsr1++
  2682  00CC  0401               	iorwf	1,w
  2683  00CD  1903               	btfsc	3,2
  2684  00CE  28DC               	goto	l1200
  2685  00CF  302D               	movlw	45
  2686  00D0  00A5               	movwf	??__doprnt
  2687  00D1  0825               	movf	??__doprnt,w
  2688  00D2  00F1               	movwf	putch@c
  2689  00D3  0A2E               	incf	__doprnt@pb,w
  2690  00D4  0086               	movwf	6
  2691  00D5  0187               	clrf	7
  2692  00D6  3F41               	moviw [1]fsr1
  2693  00D7  008A               	movwf	10
  2694  00D8  3F40               	moviw [0]fsr1
  2695  00D9  000A               	callw
  2696  00DA  3180               	pagesel	$
  2697  00DB  28EE               	goto	l1204
  2698  00DC                     l1200:	
  2699  00DC  302D               	movlw	45
  2700  00DD  0020               	movlb	0	; select bank0
  2701  00DE  00A5               	movwf	??__doprnt
  2702  00DF  082E               	movf	__doprnt@pb,w
  2703  00E0  0086               	movwf	6
  2704  00E1  0187               	clrf	7
  2705  00E2  0801               	movf	1,w
  2706  00E3  0086               	movwf	6
  2707  00E4  0187               	clrf	7
  2708  00E5  0825               	movf	??__doprnt,w
  2709  00E6  0081               	movwf	1
  2710  00E7  3001               	movlw	1
  2711  00E8  00A5               	movwf	??__doprnt
  2712  00E9  082E               	movf	__doprnt@pb,w
  2713  00EA  0086               	movwf	6
  2714  00EB  0187               	clrf	7
  2715  00EC  0825               	movf	??__doprnt,w
  2716  00ED  0781               	addwf	1,f
  2717  00EE                     l1204:	
  2718                           
  2719                           ;doprnt.c: 1469: }
  2720                           ;doprnt.c: 1472: prec = c;
  2721  00EE  0020               	movlb	0	; select bank0
  2722  00EF  082D               	movf	__doprnt@c,w
  2723  00F0  00A5               	movwf	??__doprnt
  2724  00F1  0825               	movf	??__doprnt,w
  2725  00F2  00AA               	movwf	__doprnt@prec
  2726  00F3                     l1216:	
  2727                           ;doprnt.c: 1474: while(prec--) {
  2728                           
  2729  00F3  30FF               	movlw	255
  2730  00F4  0020               	movlb	0	; select bank0
  2731  00F5  00A5               	movwf	??__doprnt
  2732  00F6  0825               	movf	??__doprnt,w
  2733  00F7  07AA               	addwf	__doprnt@prec,f
  2734  00F8  0A2A               	incf	__doprnt@prec,w
  2735  00F9  1903               	btfsc	3,2
  2736  00FA  2832               	goto	l1218
  2737                           
  2738                           ;doprnt.c: 1478: {
  2739                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2740  00FB  300A               	movlw	10
  2741  00FC  00F9               	movwf	___lwmod@divisor
  2742  00FD  3000               	movlw	0
  2743  00FE  00FA               	movwf	___lwmod@divisor+1
  2744  00FF  082A               	movf	__doprnt@prec,w
  2745  0100  00A5               	movwf	??__doprnt
  2746  0101  01A6               	clrf	??__doprnt+1
  2747  0102  35A5               	lslf	??__doprnt,f
  2748  0103  0DA6               	rlf	??__doprnt+1,f
  2749  0104  301D               	movlw	low (_dpowers| (0+32768))
  2750  0105  0725               	addwf	??__doprnt,w
  2751  0106  0084               	movwf	4
  2752  0107  3084               	movlw	high (_dpowers| (0+32768))
  2753  0108  3D26               	addwfc	??__doprnt+1,w
  2754  0109  0085               	movwf	5
  2755  010A  3F00               	moviw [0]fsr0
  2756  010B  00F1               	movwf	___lwdiv@divisor
  2757  010C  3F01               	moviw [1]fsr0
  2758  010D  00F2               	movwf	___lwdiv@divisor+1
  2759  010E  082C               	movf	__doprnt@val+1,w
  2760  010F  00F4               	movwf	___lwdiv@dividend+1
  2761  0110  082B               	movf	__doprnt@val,w
  2762  0111  00F3               	movwf	___lwdiv@dividend
  2763  0112  3183  2309  3180   	fcall	___lwdiv
  2764  0115  0872               	movf	?___lwdiv+1,w
  2765  0116  00FC               	movwf	___lwmod@dividend+1
  2766  0117  0871               	movf	?___lwdiv,w
  2767  0118  00FB               	movwf	___lwmod@dividend
  2768  0119  3183  236B  3180   	fcall	___lwmod
  2769  011C  0879               	movf	?___lwmod,w
  2770  011D  3E30               	addlw	48
  2771  011E  0020               	movlb	0	; select bank0
  2772  011F  00A7               	movwf	??__doprnt+2
  2773  0120  0827               	movf	??__doprnt+2,w
  2774  0121  00AD               	movwf	__doprnt@c
  2775                           
  2776                           ;doprnt.c: 1523: }
  2777                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  2778  0122  0A2E               	incf	__doprnt@pb,w
  2779  0123  0086               	movwf	6
  2780  0124  0187               	clrf	7
  2781  0125  0016               	moviw fsr1++
  2782  0126  0401               	iorwf	1,w
  2783  0127  1903               	btfsc	3,2
  2784  0128  2936               	goto	l1212
  2785  0129  082D               	movf	__doprnt@c,w
  2786  012A  00A5               	movwf	??__doprnt
  2787  012B  0825               	movf	??__doprnt,w
  2788  012C  00F1               	movwf	putch@c
  2789  012D  0A2E               	incf	__doprnt@pb,w
  2790  012E  0086               	movwf	6
  2791  012F  0187               	clrf	7
  2792  0130  3F41               	moviw [1]fsr1
  2793  0131  008A               	movwf	10
  2794  0132  3F40               	moviw [0]fsr1
  2795  0133  000A               	callw
  2796  0134  3180               	pagesel	$
  2797  0135  28F3               	goto	l1216
  2798  0136                     l1212:	
  2799  0136  0020               	movlb	0	; select bank0
  2800  0137  082D               	movf	__doprnt@c,w
  2801  0138  00A5               	movwf	??__doprnt
  2802  0139  082E               	movf	__doprnt@pb,w
  2803  013A  0086               	movwf	6
  2804  013B  0187               	clrf	7
  2805  013C  0801               	movf	1,w
  2806  013D  0086               	movwf	6
  2807  013E  0187               	clrf	7
  2808  013F  0825               	movf	??__doprnt,w
  2809  0140  0081               	movwf	1
  2810  0141  3001               	movlw	1
  2811  0142  00A5               	movwf	??__doprnt
  2812  0143  082E               	movf	__doprnt@pb,w
  2813  0144  0086               	movwf	6
  2814  0145  0187               	clrf	7
  2815  0146  0825               	movf	??__doprnt,w
  2816  0147  0781               	addwf	1,f
  2817  0148  28F3               	goto	l1216
  2818  0149                     l1220:	
  2819                           ;doprnt.c: 1525: }
  2820                           ;doprnt.c: 1533: }
  2821                           ;doprnt.c: 1535: alldone:
  2822                           
  2823                           
  2824                           ;doprnt.c: 1540: return 0;
  2825  0149  01A2               	clrf	?__doprnt
  2826  014A  01A3               	clrf	?__doprnt+1
  2827  014B  0008               	return
  2828  014C                     __end_of__doprnt:	
  2829                           
  2830                           	psect	text7
  2831  0461                     __ptext7:	
  2832 ;; *************** function _putch *****************
  2833 ;; Defined at:
  2834 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\putch.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  c               1    1[COMMON] unsigned char 
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;		None
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		None
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2848 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2851 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2852 ;;Total ram usage:        1 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    4
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_printf
  2859 ;;		__doprnt
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           
  2864                           ;psect for function _putch
  2865  0461                     _putch:	
  2866                           
  2867                           ;incstack = 0
  2868                           ; Regs used in _putch: []
  2869  0461  0008               	return
  2870  0462                     __end_of_putch:	
  2871                           
  2872                           	psect	text8
  2873  036B                     __ptext8:	
  2874 ;; *************** function ___lwmod *****************
  2875 ;; Defined at:
  2876 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;  divisor         2    9[COMMON] unsigned int 
  2879 ;;  dividend        2   11[COMMON] unsigned int 
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;  counter         1    1[BANK0 ] unsigned char 
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  2    9[COMMON] unsigned int 
  2884 ;; Registers used:
  2885 ;;		wreg, status,2, status,0
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2892 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2894 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2895 ;;Total ram usage:        6 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    4
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		__doprnt
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           
  2906                           ;psect for function ___lwmod
  2907  036B                     ___lwmod:	
  2908                           
  2909                           ;incstack = 0
  2910                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2911  036B  0879               	movf	___lwmod@divisor,w
  2912  036C  047A               	iorwf	___lwmod@divisor+1,w
  2913  036D  1903               	btfsc	3,2
  2914  036E  2B93               	goto	l1090
  2915  036F  0020               	movlb	0	; select bank0
  2916  0370  01A1               	clrf	___lwmod@counter
  2917  0371  0AA1               	incf	___lwmod@counter,f
  2918  0372                     l1080:	
  2919  0372  1BFA               	btfsc	___lwmod@divisor+1,7
  2920  0373  2B7E               	goto	l1082
  2921  0374  3001               	movlw	1
  2922  0375                     u615:	
  2923  0375  35F9               	lslf	___lwmod@divisor,f
  2924  0376  0DFA               	rlf	___lwmod@divisor+1,f
  2925  0377  0B89               	decfsz	9,f
  2926  0378  2B75               	goto	u615
  2927  0379  3001               	movlw	1
  2928  037A  00A0               	movwf	??___lwmod
  2929  037B  0820               	movf	??___lwmod,w
  2930  037C  07A1               	addwf	___lwmod@counter,f
  2931  037D  2B72               	goto	l1080
  2932  037E                     l1082:	
  2933  037E  087A               	movf	___lwmod@divisor+1,w
  2934  037F  027C               	subwf	___lwmod@dividend+1,w
  2935  0380  1D03               	skipz
  2936  0381  2B84               	goto	u635
  2937  0382  0879               	movf	___lwmod@divisor,w
  2938  0383  027B               	subwf	___lwmod@dividend,w
  2939  0384                     u635:	
  2940  0384  1C03               	skipc
  2941  0385  2B8A               	goto	l1086
  2942  0386  0879               	movf	___lwmod@divisor,w
  2943  0387  02FB               	subwf	___lwmod@dividend,f
  2944  0388  087A               	movf	___lwmod@divisor+1,w
  2945  0389  3BFC               	subwfb	___lwmod@dividend+1,f
  2946  038A                     l1086:	
  2947  038A  3001               	movlw	1
  2948  038B                     u645:	
  2949  038B  36FA               	lsrf	___lwmod@divisor+1,f
  2950  038C  0CF9               	rrf	___lwmod@divisor,f
  2951  038D  0B89               	decfsz	9,f
  2952  038E  2B8B               	goto	u645
  2953  038F  3001               	movlw	1
  2954  0390  02A1               	subwf	___lwmod@counter,f
  2955  0391  1D03               	btfss	3,2
  2956  0392  2B7E               	goto	l1082
  2957  0393                     l1090:	
  2958  0393  087C               	movf	___lwmod@dividend+1,w
  2959  0394  00FA               	movwf	?___lwmod+1
  2960  0395  087B               	movf	___lwmod@dividend,w
  2961  0396  00F9               	movwf	?___lwmod
  2962  0397  0008               	return
  2963  0398                     __end_of___lwmod:	
  2964                           
  2965                           	psect	text9
  2966  0309                     __ptext9:	
  2967 ;; *************** function ___lwdiv *****************
  2968 ;; Defined at:
  2969 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  divisor         2    1[COMMON] unsigned int 
  2972 ;;  dividend        2    3[COMMON] unsigned int 
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;  quotient        2    6[COMMON] unsigned int 
  2975 ;;  counter         1    8[COMMON] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  2    1[COMMON] unsigned int 
  2978 ;; Registers used:
  2979 ;;		wreg, status,2, status,0
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2985 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2986 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2987 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2988 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2989 ;;Total ram usage:        8 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    4
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		__doprnt
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function ___lwdiv
  3001  0309                     ___lwdiv:	
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3005  0309  01F6               	clrf	___lwdiv@quotient
  3006  030A  01F7               	clrf	___lwdiv@quotient+1
  3007  030B  0871               	movf	___lwdiv@divisor,w
  3008  030C  0472               	iorwf	___lwdiv@divisor+1,w
  3009  030D  1903               	btfsc	3,2
  3010  030E  2B38               	goto	l1068
  3011  030F  01F8               	clrf	___lwdiv@counter
  3012  0310  0AF8               	incf	___lwdiv@counter,f
  3013  0311                     l1056:	
  3014  0311  1BF2               	btfsc	___lwdiv@divisor+1,7
  3015  0312  2B1D               	goto	l1058
  3016  0313  3001               	movlw	1
  3017  0314                     u545:	
  3018  0314  35F1               	lslf	___lwdiv@divisor,f
  3019  0315  0DF2               	rlf	___lwdiv@divisor+1,f
  3020  0316  0B89               	decfsz	9,f
  3021  0317  2B14               	goto	u545
  3022  0318  3001               	movlw	1
  3023  0319  00F5               	movwf	??___lwdiv
  3024  031A  0875               	movf	??___lwdiv,w
  3025  031B  07F8               	addwf	___lwdiv@counter,f
  3026  031C  2B11               	goto	l1056
  3027  031D                     l1058:	
  3028  031D  3001               	movlw	1
  3029  031E                     u565:	
  3030  031E  35F6               	lslf	___lwdiv@quotient,f
  3031  031F  0DF7               	rlf	___lwdiv@quotient+1,f
  3032  0320  0B89               	decfsz	9,f
  3033  0321  2B1E               	goto	u565
  3034  0322  0872               	movf	___lwdiv@divisor+1,w
  3035  0323  0274               	subwf	___lwdiv@dividend+1,w
  3036  0324  1D03               	skipz
  3037  0325  2B28               	goto	u575
  3038  0326  0871               	movf	___lwdiv@divisor,w
  3039  0327  0273               	subwf	___lwdiv@dividend,w
  3040  0328                     u575:	
  3041  0328  1C03               	skipc
  3042  0329  2B2F               	goto	l1064
  3043  032A  0871               	movf	___lwdiv@divisor,w
  3044  032B  02F3               	subwf	___lwdiv@dividend,f
  3045  032C  0872               	movf	___lwdiv@divisor+1,w
  3046  032D  3BF4               	subwfb	___lwdiv@dividend+1,f
  3047  032E  1476               	bsf	___lwdiv@quotient,0
  3048  032F                     l1064:	
  3049  032F  3001               	movlw	1
  3050  0330                     u585:	
  3051  0330  36F2               	lsrf	___lwdiv@divisor+1,f
  3052  0331  0CF1               	rrf	___lwdiv@divisor,f
  3053  0332  0B89               	decfsz	9,f
  3054  0333  2B30               	goto	u585
  3055  0334  3001               	movlw	1
  3056  0335  02F8               	subwf	___lwdiv@counter,f
  3057  0336  1D03               	btfss	3,2
  3058  0337  2B1D               	goto	l1058
  3059  0338                     l1068:	
  3060  0338  0877               	movf	___lwdiv@quotient+1,w
  3061  0339  00F2               	movwf	?___lwdiv+1
  3062  033A  0876               	movf	___lwdiv@quotient,w
  3063  033B  00F1               	movwf	?___lwdiv
  3064  033C  0008               	return
  3065  033D                     __end_of___lwdiv:	
  3066                           
  3067                           	psect	text10
  3068  03FB                     __ptext10:	
  3069 ;; *************** function _SYSTEM_Initialize *****************
  3070 ;; Defined at:
  3071 ;;		line 72 in file "mcc_generated_files/mcc.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      void 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0, pclath, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3089 ;;Total ram usage:        0 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    6
  3092 ;; This function calls:
  3093 ;;		_EXT_INT_Initialize
  3094 ;;		_OSCILLATOR_Initialize
  3095 ;;		_PIN_MANAGER_Initialize
  3096 ;;		_WDT_Initialize
  3097 ;; This function is called by:
  3098 ;;		_main
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           
  3103                           ;psect for function _SYSTEM_Initialize
  3104  03FB                     _SYSTEM_Initialize:	
  3105                           
  3106                           ;mcc.c: 75: PIN_MANAGER_Initialize();
  3107                           
  3108                           ;incstack = 0
  3109                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3110  03FB  3183  23B5  3183   	fcall	_PIN_MANAGER_Initialize
  3111                           
  3112                           ;mcc.c: 76: OSCILLATOR_Initialize();
  3113  03FE  3184  2443  3183   	fcall	_OSCILLATOR_Initialize
  3114                           
  3115                           ;mcc.c: 77: WDT_Initialize();
  3116  0401  3184  2459  3183   	fcall	_WDT_Initialize
  3117                           
  3118                           ;mcc.c: 78: EXT_INT_Initialize();
  3119  0404  3184  2407         	fcall	_EXT_INT_Initialize
  3120  0406  0008               	return
  3121  0407                     __end_of_SYSTEM_Initialize:	
  3122                           
  3123                           	psect	text11
  3124  0459                     __ptext11:	
  3125 ;; *************** function _WDT_Initialize *****************
  3126 ;; Defined at:
  3127 ;;		line 92 in file "mcc_generated_files/mcc.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3145 ;;Total ram usage:        0 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    4
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_SYSTEM_Initialize
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           
  3156                           ;psect for function _WDT_Initialize
  3157  0459                     _WDT_Initialize:	
  3158                           
  3159                           ;mcc.c: 95: WDTCON = 0x16;
  3160                           
  3161                           ;incstack = 0
  3162                           ; Regs used in _WDT_Initialize: [wreg]
  3163  0459  3016               	movlw	22
  3164  045A  0021               	movlb	1	; select bank1
  3165  045B  0097               	movwf	23	;volatile
  3166  045C  0008               	return
  3167  045D                     __end_of_WDT_Initialize:	
  3168                           
  3169                           	psect	text12
  3170  03B5                     __ptext12:	
  3171 ;; *************** function _PIN_MANAGER_Initialize *****************
  3172 ;; Defined at:
  3173 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;		None
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;		None
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      void 
  3180 ;; Registers used:
  3181 ;;		wreg, status,2
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3191 ;;Total ram usage:        0 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    4
  3194 ;; This function calls:
  3195 ;;		Nothing
  3196 ;; This function is called by:
  3197 ;;		_SYSTEM_Initialize
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           
  3202                           ;psect for function _PIN_MANAGER_Initialize
  3203  03B5                     _PIN_MANAGER_Initialize:	
  3204                           
  3205                           ;pin_manager.c: 57: LATA = 0x00;
  3206                           
  3207                           ;incstack = 0
  3208                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3209  03B5  0022               	movlb	2	; select bank2
  3210  03B6  018C               	clrf	12	;volatile
  3211                           
  3212                           ;pin_manager.c: 58: LATB = 0x00;
  3213  03B7  018D               	clrf	13	;volatile
  3214                           
  3215                           ;pin_manager.c: 59: LATC = 0x00;
  3216  03B8  018E               	clrf	14	;volatile
  3217                           
  3218                           ;pin_manager.c: 64: TRISA = 0x30;
  3219  03B9  3030               	movlw	48
  3220  03BA  0021               	movlb	1	; select bank1
  3221  03BB  008C               	movwf	12	;volatile
  3222                           
  3223                           ;pin_manager.c: 65: TRISB = 0xE0;
  3224  03BC  30E0               	movlw	224
  3225  03BD  008D               	movwf	13	;volatile
  3226                           
  3227                           ;pin_manager.c: 66: TRISC = 0xF3;
  3228  03BE  30F3               	movlw	243
  3229  03BF  008E               	movwf	14	;volatile
  3230                           
  3231                           ;pin_manager.c: 71: ANSELC = 0xCD;
  3232  03C0  30CD               	movlw	205
  3233  03C1  0023               	movlb	3	; select bank3
  3234  03C2  008E               	movwf	14	;volatile
  3235                           
  3236                           ;pin_manager.c: 72: ANSELB = 0x00;
  3237  03C3  018D               	clrf	13	;volatile
  3238                           
  3239                           ;pin_manager.c: 73: ANSELA = 0x10;
  3240  03C4  3010               	movlw	16
  3241  03C5  008C               	movwf	12	;volatile
  3242                           
  3243                           ;pin_manager.c: 78: WPUB = 0xF0;
  3244  03C6  30F0               	movlw	240
  3245  03C7  0024               	movlb	4	; select bank4
  3246  03C8  008D               	movwf	13	;volatile
  3247                           
  3248                           ;pin_manager.c: 79: WPUA = 0x38;
  3249  03C9  3038               	movlw	56
  3250  03CA  008C               	movwf	12	;volatile
  3251                           
  3252                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  3253  03CB  0021               	movlb	1	; select bank1
  3254  03CC  1395               	bcf	21,7	;volatile
  3255                           
  3256                           ;pin_manager.c: 86: APFCON = 0x00;
  3257  03CD  0022               	movlb	2	; select bank2
  3258  03CE  019D               	clrf	29	;volatile
  3259  03CF  0008               	return
  3260  03D0                     __end_of_PIN_MANAGER_Initialize:	
  3261                           
  3262                           	psect	text13
  3263  0443                     __ptext13:	
  3264 ;; *************** function _OSCILLATOR_Initialize *****************
  3265 ;; Defined at:
  3266 ;;		line 82 in file "mcc_generated_files/mcc.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;		None
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;		None
  3271 ;; Return value:  Size  Location     Type
  3272 ;;                  1    wreg      void 
  3273 ;; Registers used:
  3274 ;;		status,2
  3275 ;; Tracked objects:
  3276 ;;		On entry : 0/0
  3277 ;;		On exit  : 0/0
  3278 ;;		Unchanged: 0/0
  3279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3284 ;;Total ram usage:        0 bytes
  3285 ;; Hardware stack levels used:    1
  3286 ;; Hardware stack levels required when called:    4
  3287 ;; This function calls:
  3288 ;;		Nothing
  3289 ;; This function is called by:
  3290 ;;		_SYSTEM_Initialize
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           
  3295                           ;psect for function _OSCILLATOR_Initialize
  3296  0443                     _OSCILLATOR_Initialize:	
  3297                           
  3298                           ;mcc.c: 85: OSCCON = 0x00;
  3299                           
  3300                           ;incstack = 0
  3301                           ; Regs used in _OSCILLATOR_Initialize: [status,2]
  3302  0443  0021               	movlb	1	; select bank1
  3303  0444  0199               	clrf	25	;volatile
  3304                           
  3305                           ;mcc.c: 87: OSCTUNE = 0x00;
  3306  0445  0198               	clrf	24	;volatile
  3307                           
  3308                           ;mcc.c: 89: ACTCON = 0x00;
  3309  0446  0027               	movlb	7	; select bank7
  3310  0447  019B               	clrf	27	;volatile
  3311  0448  0008               	return
  3312  0449                     __end_of_OSCILLATOR_Initialize:	
  3313                           
  3314                           	psect	text14
  3315  0407                     __ptext14:	
  3316 ;; *************** function _EXT_INT_Initialize *****************
  3317 ;; Defined at:
  3318 ;;		line 90 in file "mcc_generated_files/ext_int.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;		None
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;		None
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, status,2, status,0, pclath, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3336 ;;Total ram usage:        0 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    5
  3339 ;; This function calls:
  3340 ;;		_INT_SetInterruptHandler
  3341 ;; This function is called by:
  3342 ;;		_SYSTEM_Initialize
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           
  3347                           ;psect for function _EXT_INT_Initialize
  3348  0407                     _EXT_INT_Initialize:	
  3349                           
  3350                           ;ext_int.c: 99: (INTCONbits.INTF = 0);
  3351                           
  3352                           ;incstack = 0
  3353                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3354  0407  108B               	bcf	11,1	;volatile
  3355                           
  3356                           ;ext_int.c: 100: (OPTION_REGbits.INTEDG = 1);
  3357  0408  0021               	movlb	1	; select bank1
  3358  0409  1715               	bsf	21,6	;volatile
  3359                           
  3360                           ;ext_int.c: 102: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  3361  040A  3062               	movlw	low _INT_DefaultInterruptHandler
  3362  040B  00F1               	movwf	INT_SetInterruptHandler@InterruptHandler
  3363  040C  3004               	movlw	high _INT_DefaultInterruptHandler
  3364  040D  00F2               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  3365  040E  3184  2449         	fcall	_INT_SetInterruptHandler
  3366                           
  3367                           ;ext_int.c: 103: (INTCONbits.INTE = 1);
  3368  0410  160B               	bsf	11,4	;volatile
  3369  0411  0008               	return
  3370  0412                     __end_of_EXT_INT_Initialize:	
  3371                           
  3372                           	psect	text15
  3373  0449                     __ptext15:	
  3374 ;; *************** function _INT_SetInterruptHandler *****************
  3375 ;; Defined at:
  3376 ;;		line 70 in file "mcc_generated_files/ext_int.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  3379 ;;		 -> INT_DefaultInterruptHandler(1), 
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;		None
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  1    wreg      void 
  3384 ;; Registers used:
  3385 ;;		wreg
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3395 ;;Total ram usage:        2 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    4
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_EXT_INT_Initialize
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           
  3406                           ;psect for function _INT_SetInterruptHandler
  3407  0449                     _INT_SetInterruptHandler:	
  3408                           
  3409                           ;ext_int.c: 71: INT_InterruptHandler = InterruptHandler;
  3410                           
  3411                           ;incstack = 0
  3412                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  3413  0449  0872               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  3414  044A  0020               	movlb	0	; select bank0
  3415  044B  00D7               	movwf	_INT_InterruptHandler+1
  3416  044C  0871               	movf	INT_SetInterruptHandler@InterruptHandler,w
  3417  044D  00D6               	movwf	_INT_InterruptHandler
  3418  044E  0008               	return
  3419  044F                     __end_of_INT_SetInterruptHandler:	
  3420                           
  3421                           	psect	text16
  3422  044F                     __ptext16:	
  3423 ;; *************** function _DAC_Initialize *****************
  3424 ;; Defined at:
  3425 ;;		line 57 in file "mcc_generated_files/dac.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;		None
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3443 ;;Total ram usage:        0 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    4
  3446 ;; This function calls:
  3447 ;;		Nothing
  3448 ;; This function is called by:
  3449 ;;		_main
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           
  3454                           ;psect for function _DAC_Initialize
  3455  044F                     _DAC_Initialize:	
  3456                           
  3457                           ;dac.c: 60: DACCON0 = 0xA4;
  3458                           
  3459                           ;incstack = 0
  3460                           ; Regs used in _DAC_Initialize: [wreg]
  3461  044F  30A4               	movlw	164
  3462  0450  0022               	movlb	2	; select bank2
  3463  0451  0098               	movwf	24	;volatile
  3464                           
  3465                           ;dac.c: 62: DACCON1 = 0x08;
  3466  0452  3008               	movlw	8
  3467  0453  0099               	movwf	25	;volatile
  3468  0454  0008               	return
  3469  0455                     __end_of_DAC_Initialize:	
  3470                           
  3471                           	psect	text17
  3472  0427                     __ptext17:	
  3473 ;; *************** function _ADC_Initialize *****************
  3474 ;; Defined at:
  3475 ;;		line 64 in file "mcc_generated_files/adc.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, status,2
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3493 ;;Total ram usage:        0 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    4
  3496 ;; This function calls:
  3497 ;;		Nothing
  3498 ;; This function is called by:
  3499 ;;		_main
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           
  3504                           ;psect for function _ADC_Initialize
  3505  0427                     _ADC_Initialize:	
  3506                           
  3507                           ;adc.c: 69: ADCON0 = 0x01;
  3508                           
  3509                           ;incstack = 0
  3510                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  3511  0427  3001               	movlw	1
  3512  0428  0021               	movlb	1	; select bank1
  3513  0429  009D               	movwf	29	;volatile
  3514                           
  3515                           ;adc.c: 72: ADCON1 = 0xF2;
  3516  042A  30F2               	movlw	242
  3517  042B  009E               	movwf	30	;volatile
  3518                           
  3519                           ;adc.c: 75: ADCON2 = 0x00;
  3520  042C  019F               	clrf	31	;volatile
  3521                           
  3522                           ;adc.c: 78: ADRESL = 0x00;
  3523  042D  019B               	clrf	27	;volatile
  3524                           
  3525                           ;adc.c: 81: ADRESH = 0x00;
  3526  042E  019C               	clrf	28	;volatile
  3527  042F  0008               	return
  3528  0430                     __end_of_ADC_Initialize:	
  3529                           
  3530                           	psect	text18
  3531  03E6                     __ptext18:	
  3532 ;; *************** function _ADC_GetConversion *****************
  3533 ;; Defined at:
  3534 ;;		line 112 in file "mcc_generated_files/adc.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  channel         1    wreg     enum E2635
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  channel         1    4[COMMON] enum E2635
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  2    1[COMMON] unsigned int 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3548 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3549 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3551 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3552 ;;Total ram usage:        4 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    4
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_main
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           
  3563                           ;psect for function _ADC_GetConversion
  3564  03E6                     _ADC_GetConversion:	
  3565                           
  3566                           ;incstack = 0
  3567                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  3568                           ;ADC_GetConversion@channel stored from wreg
  3569  03E6  00F4               	movwf	ADC_GetConversion@channel
  3570                           
  3571                           ;adc.c: 115: ADCON0bits.CHS = channel;
  3572  03E7  0874               	movf	ADC_GetConversion@channel,w
  3573  03E8  00F3               	movwf	??_ADC_GetConversion
  3574  03E9  0DF3               	rlf	??_ADC_GetConversion,f
  3575  03EA  0DF3               	rlf	??_ADC_GetConversion,f
  3576  03EB  0021               	movlb	1	; select bank1
  3577  03EC  081D               	movf	29,w	;volatile
  3578  03ED  0673               	xorwf	??_ADC_GetConversion,w
  3579  03EE  3983               	andlw	-125
  3580  03EF  0673               	xorwf	??_ADC_GetConversion,w
  3581  03F0  009D               	movwf	29	;volatile
  3582                           
  3583                           ;adc.c: 118: ADCON0bits.ADON = 1;
  3584  03F1  141D               	bsf	29,0	;volatile
  3585                           
  3586                           ;adc.c: 123: ADCON0bits.GO_nDONE = 1;
  3587                           
  3588                           ;adc.c: 120: _delay((unsigned long)((5)*(31000/4000000.0)));
  3589  03F2  0021               	movlb	1	; select bank1
  3590  03F3  149D               	bsf	29,1	;volatile
  3591  03F4                     l32:	
  3592                           ;adc.c: 127: {
  3593                           
  3594                           ;adc.c: 126: while (ADCON0bits.GO_nDONE)
  3595                           
  3596  03F4  189D               	btfsc	29,1	;volatile
  3597  03F5  2BF4               	goto	l32
  3598                           
  3599                           ;adc.c: 128: }
  3600                           ;adc.c: 131: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  3601  03F6  081C               	movf	28,w	;volatile
  3602  03F7  00F2               	movwf	?_ADC_GetConversion+1
  3603  03F8  081B               	movf	27,w	;volatile
  3604  03F9  00F1               	movwf	?_ADC_GetConversion
  3605  03FA  0008               	return
  3606  03FB                     __end_of_ADC_GetConversion:	
  3607                           
  3608                           	psect	intentry
  3609  0004                     __pintentry:	
  3610 ;; *************** function _INTERRUPT_InterruptManager *****************
  3611 ;; Defined at:
  3612 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;		None
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;		None
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		wreg, status,2, status,0, pclath, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3628 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;Total ram usage:        1 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:    3
  3633 ;; This function calls:
  3634 ;;		_INT_ISR
  3635 ;; This function is called by:
  3636 ;;		Interrupt level 1
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640  0004                     _INTERRUPT_InterruptManager:	
  3641                           
  3642                           ;incstack = 0
  3643  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3644                           
  3645                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  3646  0005  3180               	pagesel	$
  3647  0006  0020               	movlb	0	; select bank0
  3648  0007  087F               	movf	127,w
  3649  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
  3650                           
  3651                           ;interrupt_manager.c: 54: if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
  3652  0009  1A0B               	btfsc	11,4	;volatile
  3653  000A  1C8B               	btfss	11,1	;volatile
  3654  000B  280E               	goto	i1l46
  3655                           
  3656                           ;interrupt_manager.c: 55: {
  3657                           ;interrupt_manager.c: 56: INT_ISR();
  3658  000C  3184  245D         	fcall	_INT_ISR
  3659  000E                     i1l46:	
  3660                           ;interrupt_manager.c: 58: else
  3661                           ;interrupt_manager.c: 59: {
  3662                           
  3663                           ;interrupt_manager.c: 57: }
  3664                           
  3665  000E  0870               	movf	??_INTERRUPT_InterruptManager,w
  3666  000F  0020               	movlb	0	; select bank0
  3667  0010  00FF               	movwf	127
  3668  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3669  0012  0009               	retfie
  3670  0013                     __end_of_INTERRUPT_InterruptManager:	
  3671                           
  3672                           	psect	text20
  3673  045D                     __ptext20:	
  3674 ;; *************** function _INT_ISR *****************
  3675 ;; Defined at:
  3676 ;;		line 43 in file "mcc_generated_files/ext_int.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;		None
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;		None
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      void 
  3683 ;; Registers used:
  3684 ;;		wreg, status,2, status,0, pclath, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3694 ;;Total ram usage:        0 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    2
  3697 ;; This function calls:
  3698 ;;		_INT_CallBack
  3699 ;; This function is called by:
  3700 ;;		_INTERRUPT_InterruptManager
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           
  3705                           ;psect for function _INT_ISR
  3706  045D                     _INT_ISR:	
  3707                           
  3708                           ;ext_int.c: 49: (INTCONbits.INTF = 0);
  3709                           
  3710                           ;incstack = 0
  3711                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
  3712  045D  108B               	bcf	11,1	;volatile
  3713                           
  3714                           ;ext_int.c: 52: INT_CallBack();
  3715  045E  3184  2412         	fcall	_INT_CallBack
  3716  0460  0008               	return
  3717  0461                     __end_of_INT_ISR:	
  3718                           
  3719                           	psect	text21
  3720  0412                     __ptext21:	
  3721 ;; *************** function _INT_CallBack *****************
  3722 ;; Defined at:
  3723 ;;		line 58 in file "mcc_generated_files/ext_int.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, pclath, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3741 ;;Total ram usage:        0 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    1
  3744 ;; This function calls:
  3745 ;;		Absolute function
  3746 ;;		_INT_DefaultInterruptHandler
  3747 ;; This function is called by:
  3748 ;;		_INT_ISR
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           
  3753                           ;psect for function _INT_CallBack
  3754  0412                     _INT_CallBack:	
  3755                           
  3756                           ;ext_int.c: 61: if(INT_InterruptHandler)
  3757                           
  3758                           ;incstack = 0
  3759                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
  3760  0412  0020               	movlb	0	; select bank0
  3761  0413  0856               	movf	_INT_InterruptHandler,w
  3762  0414  0457               	iorwf	_INT_InterruptHandler+1,w
  3763  0415  1903               	btfsc	3,2
  3764  0416  0008               	return
  3765                           
  3766                           ;ext_int.c: 62: {
  3767                           ;ext_int.c: 63: INT_InterruptHandler();
  3768  0417  0857               	movf	_INT_InterruptHandler+1,w
  3769  0418  008A               	movwf	10
  3770  0419  0856               	movf	_INT_InterruptHandler,w
  3771  041A  000A               	callw
  3772  041B  3184               	pagesel	$
  3773  041C  0008               	return
  3774  041D                     __end_of_INT_CallBack:	
  3775                           
  3776                           	psect	text22
  3777  0462                     __ptext22:	
  3778 ;; *************** function _INT_DefaultInterruptHandler *****************
  3779 ;; Defined at:
  3780 ;;		line 77 in file "mcc_generated_files/ext_int.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		None
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3798 ;;Total ram usage:        0 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; This function calls:
  3801 ;;		Nothing
  3802 ;; This function is called by:
  3803 ;;		_EXT_INT_Initialize
  3804 ;;		_INT_CallBack
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           
  3809                           ;psect for function _INT_DefaultInterruptHandler
  3810  0462                     _INT_DefaultInterruptHandler:	
  3811                           
  3812                           ;incstack = 0
  3813                           ; Regs used in _INT_DefaultInterruptHandler: []
  3814  0462  0008               	return
  3815  0463                     __end_of_INT_DefaultInterruptHandler:	
  3816  007E                     btemp	set	126	;btemp
  3817  007E                     int$flags	set	126
  3818  007E                     wtemp0	set	126


Data Sizes:
    Strings     13
    Constant    10
    Data        4
    BSS         20
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     30      56
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(1) Largest target is 10
		 -> str8(BANK0[10]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), str8(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), str8(BANK0[10]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[6]), STR_1(CODE[7]), 

    S352__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    S352__prbuf$ptr	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), str8(BANK0[10]), 

    _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> NULL(NULL[0]), str8(BANK0[10]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 4
		 -> sprintf@pb(BANK0[3]), printf@pb(BANK0[3]), 

    main@c	PTR unsigned char  size(1) Largest target is 10
		 -> str8(BANK0[10]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMMON

    _sendChar->_dash
    _sendChar->_dot
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _EXT_INT_Initialize->_INT_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___lwmod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4449
                                             27 BANK0      3     3      0
                  _ADC_GetConversion
                     _ADC_Initialize
                     _DAC_Initialize
                  _SYSTEM_Initialize
                             _printf
                           _sendChar
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             12     6      6    1973
                                             15 BANK0     12     6      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _sendChar                                             4     4      0     434
                                              4 COMMON     4     4      0
                               _dash
                                _dot
 ---------------------------------------------------------------------------------
 (2) _dot                                                  3     3      0      48
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _dash                                                 3     3      0      96
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _printf                                               7     5      2    1887
                                             15 BANK0      7     5      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             21    18      3    1714
                                              2 BANK0     13    10      3
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     0      1     129
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      86
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      86
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      86
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0       0
                                              0 COMMON     1     1      0
                            _INT_ISR
 ---------------------------------------------------------------------------------
 (5) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (6) _INT_CallBack                                         0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _INT_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _ADC_Initialize
   _DAC_Initialize
   _SYSTEM_Initialize
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _printf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
   _sendChar
     _dash
     _dot
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1E      38       5       70.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      45      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      45      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Apr 05 21:22:58 2018

                                      _v 0046                              __CFG_CP$OFF 0000  
                                     l32 03F4                              __CFG_LVP$ON 0000  
                                    l200 0341                                      l202 0354  
                                    l203 0358                                      l212 02CA  
                                    l215 02DF                                      l217 02F2  
                                    l209 02B5                                      l218 02F6  
                                    l245 020F                                      l191 0294  
                                    l248 0224                                      l186 0242  
                                    u615 0375                                      u545 0314  
                                    u705 02D5                                      u635 0384  
                                    u715 02EA                                      u565 031E  
                                    u645 038B                                      u725 0301  
                                    u575 0328                                      u585 0330  
                                    u675 034C                                      u685 0363  
                                    u775 00BA                                      u695 02C0  
                                    u965 021A                                      u975 022F  
                                    _dot 033D                             __CFG_BORV$LO 0000  
                                    wreg 0009                             __CFG_IESO$ON 0000  
                                   l1200 00DC                                     l1212 0136  
                                   l1204 00EE                                     l1220 0149  
                                   l1300 01B1                                     l1064 032F  
                                   l1056 0311                                     l1080 0372  
                                   l1216 00F3                                     l1144 02C8  
                                   l1320 0206                                     l1312 01E4  
                                   l1304 01C2                                     l1058 031D  
                                   l1082 037E                                     l1090 0393  
                                   l1218 0032                                     l1322 020A  
                                   l1068 0338                                     l1164 005D  
                                   l1148 02DD                                     l1316 01F5  
                                   l1308 01D3                                     l1324 020D  
                                   l1086 038A                                     l1182 009F  
                                   l1174 0088                                     l1350 0251  
                                   l1168 0070                                     l1328 0222  
                                   l1194 00C4                                     l1346 0243  
                                   l1188 00A5                                     l1292 0189  
                                   l1284 0161                                     l1372 0281  
                                   l1296 019D                                     l1288 0175  
                                   ?_dot 0070                                     STR_1 0430  
                                   STR_2 0437                                     u1035 02A8  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 0461                                     _LATC 010E  
                                   i1l46 000E                                     _WPUA 020C  
                                   _WPUB 020D                             __CFG_WRT$OFF 0000  
                          __CFG_FCMEN$ON 0000                                     _dash 02B1  
                                   _main 0237                                     dot@i 0072  
                                   _str8 0048                                     fsr0h 0005  
                                   fsr1h 0007                                     indf0 0000  
                                   fsr0l 0004                                     indf1 0001  
                                   fsr1l 0006                                     btemp 007E  
    __end_of_INT_DefaultInterruptHandler 0463              _INT_DefaultInterruptHandler 0462  
                                   start 0013          __end_of_INT_SetInterruptHandler 044F  
                    __CFG_PLLEN$DISABLED 0000                            __CFG_MCLRE$ON 0000  
                                  ??_dot 0071           __size_of_OSCILLATOR_Initialize 0006  
          __end_of_OSCILLATOR_Initialize 0449                                    ?_dash 0070  
                                  ?_main 0070                                    _DACEN 08C7  
                          __CFG_WDTE$OFF 0000                                    _LATB4 086C  
                                  _LATC3 0873                          __end_of___lwdiv 033D  
                        __end_of___lwmod 0398                          __end_of__doprnt 014C  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _delay 0054  
                        __end_of_dpowers 0427                           _WDT_Initialize 0459  
                                  dash@i 0072                                    _sleep 0042  
                                  _putch 0461                                    main@c 003D  
                         __CFG_BOREN$OFF 0000                                    pclath 000A  
                                  status 0003                                    wtemp0 007E  
                        __end_of_sprintf 03B5                         ??_DAC_Initialize 0071  
                        __initialization 0015                             __end_of_dash 0309  
                           __end_of_main 02B1                           __CFG_LPBOR$OFF 0000  
            ?_INTERRUPT_InterruptManager 0070                                   ??_dash 0071  
                                 ??_main 003B                      __CFG_USBLSCLK$24MHz 0000  
                 __end_of_WDT_Initialize 045D                                ??_INT_ISR 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                                 _ADCON2 009F                                   _ACTCON 039B  
                                 _ADRESH 009C                                   _ADRESL 009B  
                                 _APFCON 011D                                   _ANSELA 018C  
                                 ?_putch 0071                                   _ANSELB 018D  
                                 _ANSELC 018E                                   _OSCCON 0099  
                                 _WDTCON 0097                           __CFG_PWRTE$OFF 0000  
                         __CFG_STVREN$ON 0000                                ??___lwdiv 0075  
                              ??___lwmod 0020                                ??__doprnt 0025  
                           __doprnt@flag 0029                                   _printf 03D0  
                       __end_of_sendChar 0237                             __doprnt@prec 002A  
                          ?_INT_CallBack 0070                          ?_WDT_Initialize 0070  
               ADC_GetConversion@channel 0074                                   putch@c 0071  
       __size_of_INT_SetInterruptHandler 0006  INT_SetInterruptHandler@InterruptHandler 0071  
                              ??_sprintf 0035                        _SYSTEM_Initialize 03FB  
                __end_of__initialization 002C                       ?_SYSTEM_Initialize 0070  
                         __pcstackCOMMON 0070                             __pidataBANK0 0455  
                    ??_SYSTEM_Initialize 0073                            __end_of_putch 0462  
                         ??_INT_CallBack 0070              __size_of_EXT_INT_Initialize 000B  
                         _OPTION_REGbits 0095                               __doprnt@ap 0024  
                             __doprnt@pb 002E                __end_of_SYSTEM_Initialize 0407  
                                ??_putch 0072                               __pbssBANK0 003E  
                             __pmaintext 0237                          __CFG_PLLMULT$4x 0000  
                             __pintentry 0004                                  _DACCON0 0118  
                                _DACCON1 0119                                  ?_printf 002F  
                __size_of_ADC_Initialize 0009                                  _NODE_ID 0052  
                                _INT_ISR 045D                                  _OSCTUNE 0098  
                              ?_sendChar 0070                                  ___lwdiv 0309  
                                ___lwmod 036B                                  __doprnt 0030  
                                __ptext1 0398                                  __ptext2 014C  
                                __ptext3 033D                                  __ptext4 02B1  
                                __ptext5 03D0                                  __ptext6 0030  
                                __ptext7 0461                                  __ptext8 036B  
                                __ptext9 0309                          __size_of_printf 0016  
                                _dpowers 041D                    _OSCILLATOR_Initialize 0443  
                           __size_of_dot 002E                 ??_PIN_MANAGER_Initialize 0071  
                _INT_SetInterruptHandler 0449                                  _sensor0 0040  
                                _sensor1 003E               __size_of_SYSTEM_Initialize 000C  
                                _sprintf 0398                                  clrloop0 043E  
                   end_of_initialization 002C                     __end_of_INT_CallBack 041D  
                             ??_sendChar 0074                         __CFG_CLKOUTEN$ON 0000  
                                printf@f 002F                         ??_WDT_Initialize 0071  
                       __CFG_FOSC$INTOSC 0000                           _ADC_Initialize 0427  
                 ?_OSCILLATOR_Initialize 0070                ??_INT_SetInterruptHandler 0073  
                __size_of_DAC_Initialize 0006                           __end_of_printf 03E6  
                    start_initialization 0015          __size_of_PIN_MANAGER_Initialize 001B  
                            __end_of_dot 036B             ?_INT_DefaultInterruptHandler 0070  
                 __end_of_ADC_Initialize 0430                              __doprnt@val 002B  
                            __pdataBANK0 0052               __end_of_EXT_INT_Initialize 0412  
                               ??_printf 0031                                ___latbits 0002  
                               ?_INT_ISR 0070                            __pcstackBANK0 0020  
                  __size_of_INT_CallBack 000B                                __doprnt@c 002D  
                              __doprnt@f 0022                                __pnvBANK0 0056  
                       ___lwdiv@dividend 0073                   _PIN_MANAGER_Initialize 03B5  
          ??_INT_DefaultInterruptHandler 0070                        __size_of_sendChar 00EB  
                               ?___lwdiv 0071                                 ?___lwmod 0079  
                        ?_ADC_Initialize 0070                                 ?__doprnt 0022  
           ??_INTERRUPT_InterruptManager 0070                             _INT_CallBack 0412  
                       ___lwdiv@quotient 0076                                 ?_sprintf 002F  
                         __size_of_putch 0001                                clear_ram0 043D  
    __size_of_INTERRUPT_InterruptManager 000F                                 _SENSORID 0044  
                             _ADCON0bits 009D                           _DAC_Initialize 044F  
                              main@count 003C     __size_of_INT_DefaultInterruptHandler 0001  
                       __size_of_INT_ISR 0004                        _ADC_GetConversion 03E6  
                ??_OSCILLATOR_Initialize 0071                       ?_ADC_GetConversion 0071  
                 __end_of_DAC_Initialize 0455                         __size_of___lwdiv 0034  
                       __size_of___lwmod 002D                         __size_of__doprnt 011C  
                    ??_ADC_GetConversion 0073                                sendChar@a 0077  
                              sendChar@i 0075                          ___lwdiv@divisor 0071  
                        ___lwdiv@counter 0078                                 __ptext10 03FB  
                               __ptext11 0459                                 __ptext20 045D  
                               __ptext12 03B5                                 __ptext21 0412  
                               __ptext13 0443                                 __ptext22 0462  
                               __ptext14 0407                                 __ptext15 0449  
                               __ptext16 044F                                 __ptext17 0427  
                               __ptext18 03E6                         __size_of_sprintf 001D  
                          __size_of_dash 0058                            __size_of_main 007A  
                               _sendChar 014C                __end_of_ADC_GetConversion 03FB  
                               int$flags 007E       __end_of_INTERRUPT_InterruptManager 0013  
             _INTERRUPT_InterruptManager 0004                          ?_DAC_Initialize 0070  
                             _INTCONbits 000B                     _INT_InterruptHandler 0056  
                     _EXT_INT_Initialize 0407                  __size_of_WDT_Initialize 0004  
                               intlevel1 0000                                sprintf@ap 0037  
                              sprintf@pb 0038                                sprintf@wh 0036  
                       ___lwmod@dividend 007B                  ?_PIN_MANAGER_Initialize 0070  
                    ?_EXT_INT_Initialize 0070                         ??_ADC_Initialize 0071  
                               printf@ap 0032                                 printf@pb 0033  
                   __CFG_CPUDIV$NOCLKDIV 0000                 ?_INT_SetInterruptHandler 0071  
                          __pstringtext1 041D                            __pstringtext2 0430  
                          __pstringtext3 0437                            __pstringtext4 0000  
                   ??_EXT_INT_Initialize 0073                                 sprintf@f 002F  
                        ___lwmod@divisor 0079                          ___lwmod@counter 0021  
         __end_of_PIN_MANAGER_Initialize 03D0               __size_of_ADC_GetConversion 0015  
