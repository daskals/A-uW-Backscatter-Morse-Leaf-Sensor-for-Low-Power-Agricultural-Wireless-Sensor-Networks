

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Feb 13 11:57:15 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	stringtext10,global,class=STRCODE,delta=2
    16                           	psect	stringtext11,global,class=STRCODE,delta=2
    17                           	psect	stringtext12,global,class=STRCODE,delta=2
    18                           	psect	stringtext13,global,class=STRCODE,delta=2
    19                           	psect	cinit,global,class=CODE,merge=1,delta=2
    20                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	dabs	1,0x7E,2
    78  0000                     
    79                           ; Version 1.44
    80                           ; Generated 14/09/2017 GMT
    81                           ; 
    82                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16LF1459 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  008C                     	;# 
   140  008D                     	;# 
   141  008E                     	;# 
   142  0091                     	;# 
   143  0092                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009B                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  0111                     	;# 
   160  0112                     	;# 
   161  0113                     	;# 
   162  0114                     	;# 
   163  0115                     	;# 
   164  0116                     	;# 
   165  0117                     	;# 
   166  0118                     	;# 
   167  0119                     	;# 
   168  011D                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  018E                     	;# 
   172  0191                     	;# 
   173  0191                     	;# 
   174  0192                     	;# 
   175  0193                     	;# 
   176  0193                     	;# 
   177  0194                     	;# 
   178  0195                     	;# 
   179  0196                     	;# 
   180  0199                     	;# 
   181  019A                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019C                     	;# 
   185  019D                     	;# 
   186  019E                     	;# 
   187  019F                     	;# 
   188  020C                     	;# 
   189  020D                     	;# 
   190  0211                     	;# 
   191  0211                     	;# 
   192  0212                     	;# 
   193  0212                     	;# 
   194  0213                     	;# 
   195  0213                     	;# 
   196  0214                     	;# 
   197  0214                     	;# 
   198  0215                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0216                     	;# 
   202  0216                     	;# 
   203  0217                     	;# 
   204  0217                     	;# 
   205  0391                     	;# 
   206  0392                     	;# 
   207  0393                     	;# 
   208  0394                     	;# 
   209  0395                     	;# 
   210  0396                     	;# 
   211  039A                     	;# 
   212  039B                     	;# 
   213  0611                     	;# 
   214  0612                     	;# 
   215  0613                     	;# 
   216  0613                     	;# 
   217  0614                     	;# 
   218  0615                     	;# 
   219  0616                     	;# 
   220  0616                     	;# 
   221  0691                     	;# 
   222  0692                     	;# 
   223  0693                     	;# 
   224  0694                     	;# 
   225  0695                     	;# 
   226  0E8E                     	;# 
   227  0E8F                     	;# 
   228  0E90                     	;# 
   229  0E91                     	;# 
   230  0E92                     	;# 
   231  0E93                     	;# 
   232  0E94                     	;# 
   233  0E94                     	;# 
   234  0E95                     	;# 
   235  0E96                     	;# 
   236  0E97                     	;# 
   237  0E98                     	;# 
   238  0E99                     	;# 
   239  0E9A                     	;# 
   240  0E9B                     	;# 
   241  0E9C                     	;# 
   242  0E9D                     	;# 
   243  0E9E                     	;# 
   244  0E9F                     	;# 
   245  0FE4                     	;# 
   246  0FE5                     	;# 
   247  0FE6                     	;# 
   248  0FE7                     	;# 
   249  0FE8                     	;# 
   250  0FE9                     	;# 
   251  0FEA                     	;# 
   252  0FEB                     	;# 
   253  0FED                     	;# 
   254  0FEE                     	;# 
   255  0FEF                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0006                     	;# 
   263  0007                     	;# 
   264  0008                     	;# 
   265  0009                     	;# 
   266  000A                     	;# 
   267  000B                     	;# 
   268  000C                     	;# 
   269  000D                     	;# 
   270  000E                     	;# 
   271  0011                     	;# 
   272  0012                     	;# 
   273  0015                     	;# 
   274  0016                     	;# 
   275  0016                     	;# 
   276  0017                     	;# 
   277  0018                     	;# 
   278  0019                     	;# 
   279  001A                     	;# 
   280  001B                     	;# 
   281  001C                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  008E                     	;# 
   285  0091                     	;# 
   286  0092                     	;# 
   287  0095                     	;# 
   288  0096                     	;# 
   289  0097                     	;# 
   290  0098                     	;# 
   291  0099                     	;# 
   292  009A                     	;# 
   293  009B                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  009F                     	;# 
   299  010C                     	;# 
   300  010D                     	;# 
   301  010E                     	;# 
   302  0111                     	;# 
   303  0112                     	;# 
   304  0113                     	;# 
   305  0114                     	;# 
   306  0115                     	;# 
   307  0116                     	;# 
   308  0117                     	;# 
   309  0118                     	;# 
   310  0119                     	;# 
   311  011D                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  018E                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0194                     	;# 
   321  0195                     	;# 
   322  0196                     	;# 
   323  0199                     	;# 
   324  019A                     	;# 
   325  019B                     	;# 
   326  019B                     	;# 
   327  019C                     	;# 
   328  019D                     	;# 
   329  019E                     	;# 
   330  019F                     	;# 
   331  020C                     	;# 
   332  020D                     	;# 
   333  0211                     	;# 
   334  0211                     	;# 
   335  0212                     	;# 
   336  0212                     	;# 
   337  0213                     	;# 
   338  0213                     	;# 
   339  0214                     	;# 
   340  0214                     	;# 
   341  0215                     	;# 
   342  0215                     	;# 
   343  0215                     	;# 
   344  0216                     	;# 
   345  0216                     	;# 
   346  0217                     	;# 
   347  0217                     	;# 
   348  0391                     	;# 
   349  0392                     	;# 
   350  0393                     	;# 
   351  0394                     	;# 
   352  0395                     	;# 
   353  0396                     	;# 
   354  039A                     	;# 
   355  039B                     	;# 
   356  0611                     	;# 
   357  0612                     	;# 
   358  0613                     	;# 
   359  0613                     	;# 
   360  0614                     	;# 
   361  0615                     	;# 
   362  0616                     	;# 
   363  0616                     	;# 
   364  0691                     	;# 
   365  0692                     	;# 
   366  0693                     	;# 
   367  0694                     	;# 
   368  0695                     	;# 
   369  0E8E                     	;# 
   370  0E8F                     	;# 
   371  0E90                     	;# 
   372  0E91                     	;# 
   373  0E92                     	;# 
   374  0E93                     	;# 
   375  0E94                     	;# 
   376  0E94                     	;# 
   377  0E95                     	;# 
   378  0E96                     	;# 
   379  0E97                     	;# 
   380  0E98                     	;# 
   381  0E99                     	;# 
   382  0E9A                     	;# 
   383  0E9B                     	;# 
   384  0E9C                     	;# 
   385  0E9D                     	;# 
   386  0E9E                     	;# 
   387  0E9F                     	;# 
   388  0FE4                     	;# 
   389  0FE5                     	;# 
   390  0FE6                     	;# 
   391  0FE7                     	;# 
   392  0FE8                     	;# 
   393  0FE9                     	;# 
   394  0FEA                     	;# 
   395  0FEB                     	;# 
   396  0FED                     	;# 
   397  0FEE                     	;# 
   398  0FEF                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  0011                     	;# 
   415  0012                     	;# 
   416  0015                     	;# 
   417  0016                     	;# 
   418  0016                     	;# 
   419  0017                     	;# 
   420  0018                     	;# 
   421  0019                     	;# 
   422  001A                     	;# 
   423  001B                     	;# 
   424  001C                     	;# 
   425  008C                     	;# 
   426  008D                     	;# 
   427  008E                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0095                     	;# 
   431  0096                     	;# 
   432  0097                     	;# 
   433  0098                     	;# 
   434  0099                     	;# 
   435  009A                     	;# 
   436  009B                     	;# 
   437  009B                     	;# 
   438  009C                     	;# 
   439  009D                     	;# 
   440  009E                     	;# 
   441  009F                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  0111                     	;# 
   446  0112                     	;# 
   447  0113                     	;# 
   448  0114                     	;# 
   449  0115                     	;# 
   450  0116                     	;# 
   451  0117                     	;# 
   452  0118                     	;# 
   453  0119                     	;# 
   454  011D                     	;# 
   455  018C                     	;# 
   456  018D                     	;# 
   457  018E                     	;# 
   458  0191                     	;# 
   459  0191                     	;# 
   460  0192                     	;# 
   461  0193                     	;# 
   462  0193                     	;# 
   463  0194                     	;# 
   464  0195                     	;# 
   465  0196                     	;# 
   466  0199                     	;# 
   467  019A                     	;# 
   468  019B                     	;# 
   469  019B                     	;# 
   470  019C                     	;# 
   471  019D                     	;# 
   472  019E                     	;# 
   473  019F                     	;# 
   474  020C                     	;# 
   475  020D                     	;# 
   476  0211                     	;# 
   477  0211                     	;# 
   478  0212                     	;# 
   479  0212                     	;# 
   480  0213                     	;# 
   481  0213                     	;# 
   482  0214                     	;# 
   483  0214                     	;# 
   484  0215                     	;# 
   485  0215                     	;# 
   486  0215                     	;# 
   487  0216                     	;# 
   488  0216                     	;# 
   489  0217                     	;# 
   490  0217                     	;# 
   491  0391                     	;# 
   492  0392                     	;# 
   493  0393                     	;# 
   494  0394                     	;# 
   495  0395                     	;# 
   496  0396                     	;# 
   497  039A                     	;# 
   498  039B                     	;# 
   499  0611                     	;# 
   500  0612                     	;# 
   501  0613                     	;# 
   502  0613                     	;# 
   503  0614                     	;# 
   504  0615                     	;# 
   505  0616                     	;# 
   506  0616                     	;# 
   507  0691                     	;# 
   508  0692                     	;# 
   509  0693                     	;# 
   510  0694                     	;# 
   511  0695                     	;# 
   512  0E8E                     	;# 
   513  0E8F                     	;# 
   514  0E90                     	;# 
   515  0E91                     	;# 
   516  0E92                     	;# 
   517  0E93                     	;# 
   518  0E94                     	;# 
   519  0E94                     	;# 
   520  0E95                     	;# 
   521  0E96                     	;# 
   522  0E97                     	;# 
   523  0E98                     	;# 
   524  0E99                     	;# 
   525  0E9A                     	;# 
   526  0E9B                     	;# 
   527  0E9C                     	;# 
   528  0E9D                     	;# 
   529  0E9E                     	;# 
   530  0E9F                     	;# 
   531  0FE4                     	;# 
   532  0FE5                     	;# 
   533  0FE6                     	;# 
   534  0FE7                     	;# 
   535  0FE8                     	;# 
   536  0FE9                     	;# 
   537  0FEA                     	;# 
   538  0FEB                     	;# 
   539  0FED                     	;# 
   540  0FEE                     	;# 
   541  0FEF                     	;# 
   542  0000                     	;# 
   543  0001                     	;# 
   544  0002                     	;# 
   545  0003                     	;# 
   546  0004                     	;# 
   547  0005                     	;# 
   548  0006                     	;# 
   549  0007                     	;# 
   550  0008                     	;# 
   551  0009                     	;# 
   552  000A                     	;# 
   553  000B                     	;# 
   554  000C                     	;# 
   555  000D                     	;# 
   556  000E                     	;# 
   557  0011                     	;# 
   558  0012                     	;# 
   559  0015                     	;# 
   560  0016                     	;# 
   561  0016                     	;# 
   562  0017                     	;# 
   563  0018                     	;# 
   564  0019                     	;# 
   565  001A                     	;# 
   566  001B                     	;# 
   567  001C                     	;# 
   568  008C                     	;# 
   569  008D                     	;# 
   570  008E                     	;# 
   571  0091                     	;# 
   572  0092                     	;# 
   573  0095                     	;# 
   574  0096                     	;# 
   575  0097                     	;# 
   576  0098                     	;# 
   577  0099                     	;# 
   578  009A                     	;# 
   579  009B                     	;# 
   580  009B                     	;# 
   581  009C                     	;# 
   582  009D                     	;# 
   583  009E                     	;# 
   584  009F                     	;# 
   585  010C                     	;# 
   586  010D                     	;# 
   587  010E                     	;# 
   588  0111                     	;# 
   589  0112                     	;# 
   590  0113                     	;# 
   591  0114                     	;# 
   592  0115                     	;# 
   593  0116                     	;# 
   594  0117                     	;# 
   595  0118                     	;# 
   596  0119                     	;# 
   597  011D                     	;# 
   598  018C                     	;# 
   599  018D                     	;# 
   600  018E                     	;# 
   601  0191                     	;# 
   602  0191                     	;# 
   603  0192                     	;# 
   604  0193                     	;# 
   605  0193                     	;# 
   606  0194                     	;# 
   607  0195                     	;# 
   608  0196                     	;# 
   609  0199                     	;# 
   610  019A                     	;# 
   611  019B                     	;# 
   612  019B                     	;# 
   613  019C                     	;# 
   614  019D                     	;# 
   615  019E                     	;# 
   616  019F                     	;# 
   617  020C                     	;# 
   618  020D                     	;# 
   619  0211                     	;# 
   620  0211                     	;# 
   621  0212                     	;# 
   622  0212                     	;# 
   623  0213                     	;# 
   624  0213                     	;# 
   625  0214                     	;# 
   626  0214                     	;# 
   627  0215                     	;# 
   628  0215                     	;# 
   629  0215                     	;# 
   630  0216                     	;# 
   631  0216                     	;# 
   632  0217                     	;# 
   633  0217                     	;# 
   634  0391                     	;# 
   635  0392                     	;# 
   636  0393                     	;# 
   637  0394                     	;# 
   638  0395                     	;# 
   639  0396                     	;# 
   640  039A                     	;# 
   641  039B                     	;# 
   642  0611                     	;# 
   643  0612                     	;# 
   644  0613                     	;# 
   645  0613                     	;# 
   646  0614                     	;# 
   647  0615                     	;# 
   648  0616                     	;# 
   649  0616                     	;# 
   650  0691                     	;# 
   651  0692                     	;# 
   652  0693                     	;# 
   653  0694                     	;# 
   654  0695                     	;# 
   655  0E8E                     	;# 
   656  0E8F                     	;# 
   657  0E90                     	;# 
   658  0E91                     	;# 
   659  0E92                     	;# 
   660  0E93                     	;# 
   661  0E94                     	;# 
   662  0E94                     	;# 
   663  0E95                     	;# 
   664  0E96                     	;# 
   665  0E97                     	;# 
   666  0E98                     	;# 
   667  0E99                     	;# 
   668  0E9A                     	;# 
   669  0E9B                     	;# 
   670  0E9C                     	;# 
   671  0E9D                     	;# 
   672  0E9E                     	;# 
   673  0E9F                     	;# 
   674  0FE4                     	;# 
   675  0FE5                     	;# 
   676  0FE6                     	;# 
   677  0FE7                     	;# 
   678  0FE8                     	;# 
   679  0FE9                     	;# 
   680  0FEA                     	;# 
   681  0FEB                     	;# 
   682  0FED                     	;# 
   683  0FEE                     	;# 
   684  0FEF                     	;# 
   685  0000                     	;# 
   686  0001                     	;# 
   687  0002                     	;# 
   688  0003                     	;# 
   689  0004                     	;# 
   690  0005                     	;# 
   691  0006                     	;# 
   692  0007                     	;# 
   693  0008                     	;# 
   694  0009                     	;# 
   695  000A                     	;# 
   696  000B                     	;# 
   697  000C                     	;# 
   698  000D                     	;# 
   699  000E                     	;# 
   700  0011                     	;# 
   701  0012                     	;# 
   702  0015                     	;# 
   703  0016                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001C                     	;# 
   711  008C                     	;# 
   712  008D                     	;# 
   713  008E                     	;# 
   714  0091                     	;# 
   715  0092                     	;# 
   716  0095                     	;# 
   717  0096                     	;# 
   718  0097                     	;# 
   719  0098                     	;# 
   720  0099                     	;# 
   721  009A                     	;# 
   722  009B                     	;# 
   723  009B                     	;# 
   724  009C                     	;# 
   725  009D                     	;# 
   726  009E                     	;# 
   727  009F                     	;# 
   728  010C                     	;# 
   729  010D                     	;# 
   730  010E                     	;# 
   731  0111                     	;# 
   732  0112                     	;# 
   733  0113                     	;# 
   734  0114                     	;# 
   735  0115                     	;# 
   736  0116                     	;# 
   737  0117                     	;# 
   738  0118                     	;# 
   739  0119                     	;# 
   740  011D                     	;# 
   741  018C                     	;# 
   742  018D                     	;# 
   743  018E                     	;# 
   744  0191                     	;# 
   745  0191                     	;# 
   746  0192                     	;# 
   747  0193                     	;# 
   748  0193                     	;# 
   749  0194                     	;# 
   750  0195                     	;# 
   751  0196                     	;# 
   752  0199                     	;# 
   753  019A                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019C                     	;# 
   757  019D                     	;# 
   758  019E                     	;# 
   759  019F                     	;# 
   760  020C                     	;# 
   761  020D                     	;# 
   762  0211                     	;# 
   763  0211                     	;# 
   764  0212                     	;# 
   765  0212                     	;# 
   766  0213                     	;# 
   767  0213                     	;# 
   768  0214                     	;# 
   769  0214                     	;# 
   770  0215                     	;# 
   771  0215                     	;# 
   772  0215                     	;# 
   773  0216                     	;# 
   774  0216                     	;# 
   775  0217                     	;# 
   776  0217                     	;# 
   777  0391                     	;# 
   778  0392                     	;# 
   779  0393                     	;# 
   780  0394                     	;# 
   781  0395                     	;# 
   782  0396                     	;# 
   783  039A                     	;# 
   784  039B                     	;# 
   785  0611                     	;# 
   786  0612                     	;# 
   787  0613                     	;# 
   788  0613                     	;# 
   789  0614                     	;# 
   790  0615                     	;# 
   791  0616                     	;# 
   792  0616                     	;# 
   793  0691                     	;# 
   794  0692                     	;# 
   795  0693                     	;# 
   796  0694                     	;# 
   797  0695                     	;# 
   798  0E8E                     	;# 
   799  0E8F                     	;# 
   800  0E90                     	;# 
   801  0E91                     	;# 
   802  0E92                     	;# 
   803  0E93                     	;# 
   804  0E94                     	;# 
   805  0E94                     	;# 
   806  0E95                     	;# 
   807  0E96                     	;# 
   808  0E97                     	;# 
   809  0E98                     	;# 
   810  0E99                     	;# 
   811  0E9A                     	;# 
   812  0E9B                     	;# 
   813  0E9C                     	;# 
   814  0E9D                     	;# 
   815  0E9E                     	;# 
   816  0E9F                     	;# 
   817  0FE4                     	;# 
   818  0FE5                     	;# 
   819  0FE6                     	;# 
   820  0FE7                     	;# 
   821  0FE8                     	;# 
   822  0FE9                     	;# 
   823  0FEA                     	;# 
   824  0FEB                     	;# 
   825  0FED                     	;# 
   826  0FEE                     	;# 
   827  0FEF                     	;# 
   828  0000                     	;# 
   829  0001                     	;# 
   830  0002                     	;# 
   831  0003                     	;# 
   832  0004                     	;# 
   833  0005                     	;# 
   834  0006                     	;# 
   835  0007                     	;# 
   836  0008                     	;# 
   837  0009                     	;# 
   838  000A                     	;# 
   839  000B                     	;# 
   840  000C                     	;# 
   841  000D                     	;# 
   842  000E                     	;# 
   843  0011                     	;# 
   844  0012                     	;# 
   845  0015                     	;# 
   846  0016                     	;# 
   847  0016                     	;# 
   848  0017                     	;# 
   849  0018                     	;# 
   850  0019                     	;# 
   851  001A                     	;# 
   852  001B                     	;# 
   853  001C                     	;# 
   854  008C                     	;# 
   855  008D                     	;# 
   856  008E                     	;# 
   857  0091                     	;# 
   858  0092                     	;# 
   859  0095                     	;# 
   860  0096                     	;# 
   861  0097                     	;# 
   862  0098                     	;# 
   863  0099                     	;# 
   864  009A                     	;# 
   865  009B                     	;# 
   866  009B                     	;# 
   867  009C                     	;# 
   868  009D                     	;# 
   869  009E                     	;# 
   870  009F                     	;# 
   871  010C                     	;# 
   872  010D                     	;# 
   873  010E                     	;# 
   874  0111                     	;# 
   875  0112                     	;# 
   876  0113                     	;# 
   877  0114                     	;# 
   878  0115                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  0118                     	;# 
   882  0119                     	;# 
   883  011D                     	;# 
   884  018C                     	;# 
   885  018D                     	;# 
   886  018E                     	;# 
   887  0191                     	;# 
   888  0191                     	;# 
   889  0192                     	;# 
   890  0193                     	;# 
   891  0193                     	;# 
   892  0194                     	;# 
   893  0195                     	;# 
   894  0196                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019D                     	;# 
   901  019E                     	;# 
   902  019F                     	;# 
   903  020C                     	;# 
   904  020D                     	;# 
   905  0211                     	;# 
   906  0211                     	;# 
   907  0212                     	;# 
   908  0212                     	;# 
   909  0213                     	;# 
   910  0213                     	;# 
   911  0214                     	;# 
   912  0214                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0216                     	;# 
   917  0216                     	;# 
   918  0217                     	;# 
   919  0217                     	;# 
   920  0391                     	;# 
   921  0392                     	;# 
   922  0393                     	;# 
   923  0394                     	;# 
   924  0395                     	;# 
   925  0396                     	;# 
   926  039A                     	;# 
   927  039B                     	;# 
   928  0611                     	;# 
   929  0612                     	;# 
   930  0613                     	;# 
   931  0613                     	;# 
   932  0614                     	;# 
   933  0615                     	;# 
   934  0616                     	;# 
   935  0616                     	;# 
   936  0691                     	;# 
   937  0692                     	;# 
   938  0693                     	;# 
   939  0694                     	;# 
   940  0695                     	;# 
   941  0E8E                     	;# 
   942  0E8F                     	;# 
   943  0E90                     	;# 
   944  0E91                     	;# 
   945  0E92                     	;# 
   946  0E93                     	;# 
   947  0E94                     	;# 
   948  0E94                     	;# 
   949  0E95                     	;# 
   950  0E96                     	;# 
   951  0E97                     	;# 
   952  0E98                     	;# 
   953  0E99                     	;# 
   954  0E9A                     	;# 
   955  0E9B                     	;# 
   956  0E9C                     	;# 
   957  0E9D                     	;# 
   958  0E9E                     	;# 
   959  0E9F                     	;# 
   960  0FE4                     	;# 
   961  0FE5                     	;# 
   962  0FE6                     	;# 
   963  0FE7                     	;# 
   964  0FE8                     	;# 
   965  0FE9                     	;# 
   966  0FEA                     	;# 
   967  0FEB                     	;# 
   968  0FED                     	;# 
   969  0FEE                     	;# 
   970  0FEF                     	;# 
   971  0000                     	;# 
   972  0001                     	;# 
   973  0002                     	;# 
   974  0003                     	;# 
   975  0004                     	;# 
   976  0005                     	;# 
   977  0006                     	;# 
   978  0007                     	;# 
   979  0008                     	;# 
   980  0009                     	;# 
   981  000A                     	;# 
   982  000B                     	;# 
   983  000C                     	;# 
   984  000D                     	;# 
   985  000E                     	;# 
   986  0011                     	;# 
   987  0012                     	;# 
   988  0015                     	;# 
   989  0016                     	;# 
   990  0016                     	;# 
   991  0017                     	;# 
   992  0018                     	;# 
   993  0019                     	;# 
   994  001A                     	;# 
   995  001B                     	;# 
   996  001C                     	;# 
   997  008C                     	;# 
   998  008D                     	;# 
   999  008E                     	;# 
  1000  0091                     	;# 
  1001  0092                     	;# 
  1002  0095                     	;# 
  1003  0096                     	;# 
  1004  0097                     	;# 
  1005  0098                     	;# 
  1006  0099                     	;# 
  1007  009A                     	;# 
  1008  009B                     	;# 
  1009  009B                     	;# 
  1010  009C                     	;# 
  1011  009D                     	;# 
  1012  009E                     	;# 
  1013  009F                     	;# 
  1014  010C                     	;# 
  1015  010D                     	;# 
  1016  010E                     	;# 
  1017  0111                     	;# 
  1018  0112                     	;# 
  1019  0113                     	;# 
  1020  0114                     	;# 
  1021  0115                     	;# 
  1022  0116                     	;# 
  1023  0117                     	;# 
  1024  0118                     	;# 
  1025  0119                     	;# 
  1026  011D                     	;# 
  1027  018C                     	;# 
  1028  018D                     	;# 
  1029  018E                     	;# 
  1030  0191                     	;# 
  1031  0191                     	;# 
  1032  0192                     	;# 
  1033  0193                     	;# 
  1034  0193                     	;# 
  1035  0194                     	;# 
  1036  0195                     	;# 
  1037  0196                     	;# 
  1038  0199                     	;# 
  1039  019A                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019C                     	;# 
  1043  019D                     	;# 
  1044  019E                     	;# 
  1045  019F                     	;# 
  1046  020C                     	;# 
  1047  020D                     	;# 
  1048  0211                     	;# 
  1049  0211                     	;# 
  1050  0212                     	;# 
  1051  0212                     	;# 
  1052  0213                     	;# 
  1053  0213                     	;# 
  1054  0214                     	;# 
  1055  0214                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0215                     	;# 
  1059  0216                     	;# 
  1060  0216                     	;# 
  1061  0217                     	;# 
  1062  0217                     	;# 
  1063  0391                     	;# 
  1064  0392                     	;# 
  1065  0393                     	;# 
  1066  0394                     	;# 
  1067  0395                     	;# 
  1068  0396                     	;# 
  1069  039A                     	;# 
  1070  039B                     	;# 
  1071  0611                     	;# 
  1072  0612                     	;# 
  1073  0613                     	;# 
  1074  0613                     	;# 
  1075  0614                     	;# 
  1076  0615                     	;# 
  1077  0616                     	;# 
  1078  0616                     	;# 
  1079  0691                     	;# 
  1080  0692                     	;# 
  1081  0693                     	;# 
  1082  0694                     	;# 
  1083  0695                     	;# 
  1084  0E8E                     	;# 
  1085  0E8F                     	;# 
  1086  0E90                     	;# 
  1087  0E91                     	;# 
  1088  0E92                     	;# 
  1089  0E93                     	;# 
  1090  0E94                     	;# 
  1091  0E94                     	;# 
  1092  0E95                     	;# 
  1093  0E96                     	;# 
  1094  0E97                     	;# 
  1095  0E98                     	;# 
  1096  0E99                     	;# 
  1097  0E9A                     	;# 
  1098  0E9B                     	;# 
  1099  0E9C                     	;# 
  1100  0E9D                     	;# 
  1101  0E9E                     	;# 
  1102  0E9F                     	;# 
  1103  0FE4                     	;# 
  1104  0FE5                     	;# 
  1105  0FE6                     	;# 
  1106  0FE7                     	;# 
  1107  0FE8                     	;# 
  1108  0FE9                     	;# 
  1109  0FEA                     	;# 
  1110  0FEB                     	;# 
  1111  0FED                     	;# 
  1112  0FEE                     	;# 
  1113  0FEF                     	;# 
  1114                           
  1115                           	psect	idataCOMMON
  1116  0002                     __pidataCOMMON:	
  1117                           
  1118                           ;initializer for _delay
  1119  0002  34D0               	retlw	208
  1120  0003  3407               	retlw	7
  1121                           
  1122                           	psect	idataBANK2
  1123  0801                     __pidataBANK2:	
  1124                           
  1125                           ;initializer for _voltref
  1126  0801  3440               	retlw	64
  1127  0802  34FF               	retlw	255
  1128  0803  3444               	retlw	68
  1129                           
  1130                           ;initializer for _FactorD
  1131                           ;main.c: 20: char packet1[((10+2+1)+10+1)]=0;
  1132                           ;main.c: 21: char packet2[((10+2+1)+10+6+1)]=0;
  1133                           ;main.c: 22: char nocodedbit[2+1+10]=0;
  1134                           ;main.c: 24: char *preamble="1010101111";
  1135                           ;main.c: 25: char *Fixeddata="0111100011";
  1136                           ;main.c: 26: char *packet="1010101111010100111100011" ;
  1137                           ;main.c: 27: char *message = "2.";
  1138                           ;main.c: 29: char str8[6]=0;
  1139                           ;main.c: 31: double temp=0;
  1140                           ;main.c: 32: int hundreds=0;
  1141                           ;main.c: 33: int tens=0;
  1142                           ;main.c: 34: int units=0;
  1143                           ;main.c: 35: int tenths=0;
  1144                           ;main.c: 36: int hundredths=0;
  1145                           ;main.c: 37: int thousandths=0;
  1146  0804  34DB               	retlw	219
  1147  0805  344C               	retlw	76
  1148  0806  3443               	retlw	67
  1149                           
  1150                           ;initializer for _FactorC
  1151  0807  3449               	retlw	73
  1152  0808  3437               	retlw	55
  1153  0809  34BE               	retlw	190
  1154                           
  1155                           ;initializer for _FactorB
  1156  080A  3444               	retlw	68
  1157  080B  34C1               	retlw	193
  1158  080C  34B6               	retlw	182
  1159                           
  1160                           ;initializer for _FactorA
  1161  080D  3443               	retlw	67
  1162  080E  3492               	retlw	146
  1163  080F  34B0               	retlw	176
  1164                           
  1165                           ;initializer for _IN_STRAY_CAP_TO_GND
  1166                           ;main.c: 20: char packet1[((10+2+1)+10+1)]=0;
  1167                           ;main.c: 21: char packet2[((10+2+1)+10+6+1)]=0;
  1168                           ;main.c: 22: char nocodedbit[2+1+10]=0;
  1169                           ;main.c: 24: char *preamble="1010101111";
  1170                           ;main.c: 25: char *Fixeddata="0111100011";
  1171                           ;main.c: 26: char *packet="1010101111010100111100011" ;
  1172                           ;main.c: 27: char *message = "2.";
  1173                           ;main.c: 29: char str8[6]=0;
  1174                           ;main.c: 31: double temp=0;
  1175                           ;main.c: 32: int hundreds=0;
  1176                           ;main.c: 33: int tens=0;
  1177                           ;main.c: 34: int units=0;
  1178                           ;main.c: 35: int tenths=0;
  1179                           ;main.c: 36: int hundredths=0;
  1180                           ;main.c: 37: int thousandths=0;
  1181  0810  349A               	retlw	154
  1182  0811  34D5               	retlw	213
  1183  0812  3441               	retlw	65
  1184                           
  1185                           ;initializer for _NODE_ID
  1186  0813  3401               	retlw	1
  1187  0814  3400               	retlw	0
  1188                           
  1189                           ;initializer for _ADCres
  1190  0815  34FF               	retlw	255
  1191  0816  3403               	retlw	3
  1192                           
  1193                           ;initializer for _message
  1194  0817  34B9               	retlw	low (STR_4| (0+32768))
  1195  0818  3498               	retlw	high (STR_4| (0+32768))
  1196                           
  1197                           ;initializer for _packet
  1198  0819  341B               	retlw	low (STR_3| (0+32768))
  1199  081A  3498               	retlw	high (STR_3| (0+32768))
  1200                           
  1201                           ;initializer for _Fixeddata
  1202  081B  342A               	retlw	low ((STR_3+15)| (0+32768))
  1203  081C  3498               	retlw	high ((STR_3+15)| (0+32768))
  1204                           
  1205                           ;initializer for _preamble
  1206  081D  347E               	retlw	low (STR_1| (0+32768))
  1207  081E  3498               	retlw	high (STR_1| (0+32768))
  1208                           
  1209                           	psect	stringtext1
  1210  1835                     __pstringtext1:	
  1211  1835                     _m:	
  1212  1835  34FD               	retlw	253
  1213  1836  347D               	retlw	125
  1214  1837  343D               	retlw	61
  1215  1838  341D               	retlw	29
  1216  1839  340D               	retlw	13
  1217  183A  3405               	retlw	5
  1218  183B  3485               	retlw	133
  1219  183C  34C5               	retlw	197
  1220  183D  34E5               	retlw	229
  1221  183E  34F5               	retlw	245
  1222  183F  3400               	retlw	0
  1223  1840  3400               	retlw	0
  1224  1841  3400               	retlw	0
  1225  1842  3400               	retlw	0
  1226  1843  3400               	retlw	0
  1227  1844  3400               	retlw	0
  1228  1845  3400               	retlw	0
  1229  1846  340A               	retlw	10
  1230  1847  3444               	retlw	68
  1231  1848  3454               	retlw	84
  1232  1849  3423               	retlw	35
  1233  184A  3401               	retlw	1
  1234  184B  3414               	retlw	20
  1235  184C  3433               	retlw	51
  1236  184D  3404               	retlw	4
  1237  184E  3402               	retlw	2
  1238  184F  343C               	retlw	60
  1239  1850  342B               	retlw	43
  1240  1851  3424               	retlw	36
  1241  1852  341A               	retlw	26
  1242  1853  3412               	retlw	18
  1243  1854  343B               	retlw	59
  1244  1855  3434               	retlw	52
  1245  1856  346C               	retlw	108
  1246  1857  3413               	retlw	19
  1247  1858  3403               	retlw	3
  1248  1859  3409               	retlw	9
  1249  185A  340B               	retlw	11
  1250  185B  340C               	retlw	12
  1251  185C  341B               	retlw	27
  1252  185D  344C               	retlw	76
  1253  185E  345C               	retlw	92
  1254  185F  3464               	retlw	100
  1255  1860                     __end_of_m:	
  1256                           
  1257                           	psect	stringtext2
  1258  1889                     __pstringtext2:	
  1259  1889                     _dpowers:	
  1260  1889  3401               	retlw	1
  1261  188A  3400               	retlw	0
  1262  188B  340A               	retlw	10
  1263  188C  3400               	retlw	0
  1264  188D  3464               	retlw	100
  1265  188E  3400               	retlw	0
  1266  188F  34E8               	retlw	232
  1267  1890  3403               	retlw	3
  1268  1891  3410               	retlw	16
  1269  1892  3427               	retlw	39
  1270  1893                     __end_of_dpowers:	
  1271                           
  1272                           	psect	stringtext3
  1273  1893                     __pstringtext3:	
  1274  1893                     _m2:	
  1275  1893  3467               	retlw	103
  1276  1894  3449               	retlw	73
  1277  1895  3449               	retlw	73
  1278  1896  3409               	retlw	9
  1279  1897  3401               	retlw	1
  1280  1898  3400               	retlw	0
  1281  1899  3410               	retlw	16
  1282  189A  34F8               	retlw	248
  1283  189B  345C               	retlw	92
  1284  189C  3466               	retlw	102
  1285  189D                     __end_of_m2:	
  1286                           
  1287                           	psect	stringtext4
  1288  1860                     __pstringtext4:	
  1289  1860                     exp@coeff:	
  1290  1860  3400               	retlw	0
  1291  1861  3480               	retlw	128
  1292  1862  343F               	retlw	63
  1293  1863  3472               	retlw	114
  1294  1864  3431               	retlw	49
  1295  1865  343F               	retlw	63
  1296  1866  34FE               	retlw	254
  1297  1867  3475               	retlw	117
  1298  1868  343E               	retlw	62
  1299  1869  3458               	retlw	88
  1300  186A  3463               	retlw	99
  1301  186B  343D               	retlw	61
  1302  186C  3495               	retlw	149
  1303  186D  341D               	retlw	29
  1304  186E  343C               	retlw	60
  1305  186F  34C5               	retlw	197
  1306  1870  34AE               	retlw	174
  1307  1871  343A               	retlw	58
  1308  1872  3479               	retlw	121
  1309  1873  3421               	retlw	33
  1310  1874  3439               	retlw	57
  1311  1875  3494               	retlw	148
  1312  1876  3480               	retlw	128
  1313  1877  3437               	retlw	55
  1314  1878  3493               	retlw	147
  1315  1879  34A7               	retlw	167
  1316  187A  3435               	retlw	53
  1317  187B  3456               	retlw	86
  1318  187C  3415               	retlw	21
  1319  187D  3434               	retlw	52
  1320  187E                     __end_ofexp@coeff:	
  1321                           
  1322                           	psect	stringtext5
  1323  1800                     __pstringtext5:	
  1324  1800                     log@coeff:	
  1325  1800  3400               	retlw	0
  1326  1801  3400               	retlw	0
  1327  1802  3400               	retlw	0
  1328  1803  3400               	retlw	0
  1329  1804  3480               	retlw	128
  1330  1805  343F               	retlw	63
  1331  1806  34F0               	retlw	240
  1332  1807  34FF               	retlw	255
  1333  1808  34BE               	retlw	190
  1334  1809  34E2               	retlw	226
  1335  180A  34A9               	retlw	169
  1336  180B  343E               	retlw	62
  1337  180C  3483               	retlw	131
  1338  180D  3476               	retlw	118
  1339  180E  34BE               	retlw	190
  1340  180F  34AE               	retlw	174
  1341  1810  342B               	retlw	43
  1342  1811  343E               	retlw	62
  1343  1812  343C               	retlw	60
  1344  1813  34C3               	retlw	195
  1345  1814  34BD               	retlw	189
  1346  1815  34D2               	retlw	210
  1347  1816  3413               	retlw	19
  1348  1817  343D               	retlw	61
  1349  1818  3478               	retlw	120
  1350  1819  34D3               	retlw	211
  1351  181A  34BB               	retlw	187
  1352  181B                     __end_oflog@coeff:	
  1353  0011                     _PIR1bits	set	17
  1354  000B                     _INTCONbits	set	11
  1355  0095                     _OPTION_REGbits	set	149
  1356  008E                     _TRISC	set	142
  1357  008D                     _TRISB	set	141
  1358  008C                     _TRISA	set	140
  1359  0097                     _WDTCON	set	151
  1360  0098                     _OSCTUNE	set	152
  1361  0099                     _OSCCON	set	153
  1362  0091                     _PIE1bits	set	145
  1363  009D                     _ADCON0bits	set	157
  1364  009C                     _ADRESH	set	156
  1365  009B                     _ADRESL	set	155
  1366  009F                     _ADCON2	set	159
  1367  009E                     _ADCON1	set	158
  1368  009D                     _ADCON0	set	157
  1369  04D6                     _PLLRDY	set	1238
  1370  011D                     _APFCON	set	285
  1371  010E                     _LATC	set	270
  1372  010D                     _LATB	set	269
  1373  010C                     _LATA	set	268
  1374  0874                     _LATC4	set	2164
  1375  0873                     _LATC3	set	2163
  1376  0199                     _RCREG	set	409
  1377  019D                     _RCSTAbits	set	413
  1378  019A                     _TXREG	set	410
  1379  019C                     _SPBRGH	set	412
  1380  019B                     _SPBRGL	set	411
  1381  019E                     _TXSTA	set	414
  1382  019D                     _RCSTA	set	413
  1383  019F                     _BAUDCON	set	415
  1384  018C                     _ANSELA	set	396
  1385  018D                     _ANSELB	set	397
  1386  018E                     _ANSELC	set	398
  1387  020C                     _WPUA	set	524
  1388  020D                     _WPUB	set	525
  1389  039B                     _ACTCON	set	923
  1390  181B                     STR_3:	
  1391  181B  3431               	retlw	49	;'1'
  1392  181C  3430               	retlw	48	;'0'
  1393  181D  3431               	retlw	49	;'1'
  1394  181E  3430               	retlw	48	;'0'
  1395  181F  3431               	retlw	49	;'1'
  1396  1820  3430               	retlw	48	;'0'
  1397  1821  3431               	retlw	49	;'1'
  1398  1822  3431               	retlw	49	;'1'
  1399  1823  3431               	retlw	49	;'1'
  1400  1824  3431               	retlw	49	;'1'
  1401  1825  3430               	retlw	48	;'0'
  1402  1826  3431               	retlw	49	;'1'
  1403  1827  3430               	retlw	48	;'0'
  1404  1828  3431               	retlw	49	;'1'
  1405  1829  3430               	retlw	48	;'0'
  1406  182A  3430               	retlw	48	;'0'
  1407  182B  3431               	retlw	49	;'1'
  1408  182C  3431               	retlw	49	;'1'
  1409  182D  3431               	retlw	49	;'1'
  1410  182E  3431               	retlw	49	;'1'
  1411  182F  3430               	retlw	48	;'0'
  1412  1830  3430               	retlw	48	;'0'
  1413  1831  3430               	retlw	48	;'0'
  1414  1832  3431               	retlw	49	;'1'
  1415  1833  3431               	retlw	49	;'1'
  1416  1834  3400               	retlw	0
  1417                           
  1418                           	psect	stringtext6
  1419  187E                     __pstringtext6:	
  1420  187E                     STR_1:	
  1421  187E  3431               	retlw	49	;'1'
  1422  187F  3430               	retlw	48	;'0'
  1423  1880  3431               	retlw	49	;'1'
  1424  1881  3430               	retlw	48	;'0'
  1425  1882  3431               	retlw	49	;'1'
  1426  1883  3430               	retlw	48	;'0'
  1427  1884  3431               	retlw	49	;'1'
  1428  1885  3431               	retlw	49	;'1'
  1429  1886  3431               	retlw	49	;'1'
  1430  1887  3431               	retlw	49	;'1'
  1431  1888  3400               	retlw	0
  1432                           
  1433                           	psect	stringtext7
  1434  189D                     __pstringtext7:	
  1435  189D                     STR_9:	
  1436  189D  3428               	retlw	40	;'('
  1437  189E  346E               	retlw	110	;'n'
  1438  189F  3475               	retlw	117	;'u'
  1439  18A0  346C               	retlw	108	;'l'
  1440  18A1  346C               	retlw	108	;'l'
  1441  18A2  3429               	retlw	41	;')'
  1442  18A3  3400               	retlw	0
  1443                           
  1444                           	psect	stringtext8
  1445  18A4                     __pstringtext8:	
  1446  18A4                     STR_5:	
  1447  18A4  3453               	retlw	83	;'S'
  1448  18A5  3474               	retlw	116	;'t'
  1449  18A6  3461               	retlw	97	;'a'
  1450  18A7  3472               	retlw	114	;'r'
  1451  18A8  3474               	retlw	116	;'t'
  1452  18A9  340A               	retlw	10
  1453  18AA  3400               	retlw	0
  1454                           
  1455                           	psect	stringtext9
  1456  18AB                     __pstringtext9:	
  1457  18AB                     STR_8:	
  1458  18AB  3425               	retlw	37	;'%'
  1459  18AC  3463               	retlw	99	;'c'
  1460  18AD  3420               	retlw	32	;' '
  1461  18AE  340A               	retlw	10
  1462  18AF  3400               	retlw	0
  1463                           
  1464                           	psect	stringtext10
  1465  18B0                     __pstringtext10:	
  1466  18B0                     STR_6:	
  1467  18B0  3425               	retlw	37	;'%'
  1468  18B1  3464               	retlw	100	;'d'
  1469  18B2  3425               	retlw	37	;'%'
  1470  18B3  3464               	retlw	100	;'d'
  1471  18B4  3400               	retlw	0
  1472                           
  1473                           	psect	stringtext11
  1474  18B5                     __pstringtext11:	
  1475  18B5                     STR_7:	
  1476  18B5  3425               	retlw	37	;'%'
  1477  18B6  3473               	retlw	115	;'s'
  1478  18B7  340A               	retlw	10
  1479  18B8  3400               	retlw	0
  1480                           
  1481                           	psect	stringtext12
  1482  18B9                     __pstringtext12:	
  1483  18B9                     STR_4:	
  1484  18B9  3432               	retlw	50	;'2'
  1485  18BA  342E               	retlw	46	;'.'
  1486  18BB  3400               	retlw	0
  1487                           
  1488                           	psect	stringtext13
  1489  0000                     __pstringtext13:	
  1490  182A                     
  1491                           ; #config settings
  1492  0000                     
  1493                           	psect	cinit
  1494  002D                     start_initialization:	
  1495  002D                     __initialization:	
  1496                           
  1497                           ; Initialize objects allocated to COMMON
  1498  002D  3180  2002  3180   	fcall	__pidataCOMMON	;fetch initializer
  1499  0030  00FA               	movwf	__pdataCOMMON& (0+127)
  1500  0031  3180  2003  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  1501  0034  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
  1502                           
  1503                           ; Initialize objects allocated to BANK2
  1504  0035  3001               	movlw	low __pidataBANK2
  1505  0036  0084               	movwf	4
  1506  0037  3088               	movlw	(high __pidataBANK2)| (0+128)
  1507  0038  0085               	movwf	5
  1508  0039  3052               	movlw	low __pdataBANK2
  1509  003A  0086               	movwf	6
  1510  003B  3001               	movlw	high __pdataBANK2
  1511  003C  0087               	movwf	7
  1512  003D  301E               	movlw	30
  1513  003E  3194  24EA  3180   	fcall	init_ram
  1514                           
  1515                           ; Clear objects allocated to BANK1
  1516  0041  30E1               	movlw	low __pbssBANK1
  1517  0042  0084               	movwf	4
  1518  0043  3000               	movlw	high __pbssBANK1
  1519  0044  0085               	movwf	5
  1520  0045  300E               	movlw	14
  1521  0046  3194  24E4  3180   	fcall	clear_ram0
  1522                           
  1523                           ; Clear objects allocated to BANK2
  1524  0049  3020               	movlw	low __pbssBANK2
  1525  004A  0084               	movwf	4
  1526  004B  3001               	movlw	high __pbssBANK2
  1527  004C  0085               	movwf	5
  1528  004D  3032               	movlw	50
  1529  004E  3194  24E4  3180   	fcall	clear_ram0
  1530                           
  1531                           ; Clear objects allocated to BANK3
  1532  0051  30A0               	movlw	low __pbssBANK3
  1533  0052  0084               	movwf	4
  1534  0053  3001               	movlw	high __pbssBANK3
  1535  0054  0085               	movwf	5
  1536  0055  3041               	movlw	65
  1537  0056  3194  24E4  3180   	fcall	clear_ram0
  1538                           
  1539                           ; Clear objects allocated to BANK4
  1540  0059  3020               	movlw	low __pbssBANK4
  1541  005A  0084               	movwf	4
  1542  005B  3002               	movlw	high __pbssBANK4
  1543  005C  0085               	movwf	5
  1544  005D  301E               	movlw	30
  1545  005E  3194  24E4         	fcall	clear_ram0
  1546  0060                     end_of_initialization:	
  1547                           ;End of C runtime variable initialization code
  1548                           
  1549  0060                     __end_of__initialization:	
  1550  0060  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1551  0061  0020               	movlb	0
  1552  0062  3180  2864         	ljmp	_main	;jump to C main() function
  1553                           
  1554                           	psect	dataCOMMON
  1555  007A                     __pdataCOMMON:	
  1556  007A                     _delay:	
  1557  007A                     	ds	2
  1558                           
  1559                           	psect	bssBANK1
  1560  00E1                     __pbssBANK1:	
  1561  00E1                     _ADC0mVolt2:	
  1562  00E1                     	ds	3
  1563  00E4                     _ADC0mVolt1:	
  1564  00E4                     	ds	3
  1565  00E7                     _INT_InterruptHandler:	
  1566  00E7                     	ds	2
  1567  00E9                     _eusartRxCount:	
  1568  00E9                     	ds	1
  1569  00EA                     _eusartRxTail:	
  1570  00EA                     	ds	1
  1571  00EB                     _eusartRxHead:	
  1572  00EB                     	ds	1
  1573  00EC                     _eusartTxBufferRemaining:	
  1574  00EC                     	ds	1
  1575  00ED                     _eusartTxTail:	
  1576  00ED                     	ds	1
  1577  00EE                     _eusartTxHead:	
  1578  00EE                     	ds	1
  1579                           
  1580                           	psect	bssBANK2
  1581  0120                     __pbssBANK2:	
  1582  0120                     _sensor1:	
  1583  0120                     	ds	3
  1584  0123                     _sensor0:	
  1585  0123                     	ds	3
  1586  0126                     _TempDIFF:	
  1587  0126                     	ds	3
  1588  0129                     _TemporC2:	
  1589  0129                     	ds	3
  1590  012C                     _TemporC1:	
  1591  012C                     	ds	3
  1592  012F                     _capacitance:	
  1593  012F                     	ds	3
  1594  0132                     _IN_CAP_TO_GND:	
  1595  0132                     	ds	3
  1596  0135                     _IN_EXTRA_CAP_TO_GND:	
  1597  0135                     	ds	3
  1598  0138                     _remainder:	
  1599  0138                     	ds	3
  1600  013B                     _temp:	
  1601  013B                     	ds	3
  1602  013E                     _errno:	
  1603  013E                     	ds	2
  1604  0140                     _sleep:	
  1605  0140                     	ds	2
  1606  0142                     _SENSORID:	
  1607  0142                     	ds	2
  1608  0144                     _tenthousandths:	
  1609  0144                     	ds	2
  1610  0146                     _thousandths:	
  1611  0146                     	ds	2
  1612  0148                     _hundredths:	
  1613  0148                     	ds	2
  1614  014A                     _tenths:	
  1615  014A                     	ds	2
  1616  014C                     _units:	
  1617  014C                     	ds	2
  1618  014E                     _tens:	
  1619  014E                     	ds	2
  1620  0150                     _hundreds:	
  1621  0150                     	ds	2
  1622                           
  1623                           	psect	dataBANK2
  1624  0152                     __pdataBANK2:	
  1625  0152                     _voltref:	
  1626  0152                     	ds	3
  1627  0155                     _FactorD:	
  1628  0155                     	ds	3
  1629  0158                     _FactorC:	
  1630  0158                     	ds	3
  1631  015B                     _FactorB:	
  1632  015B                     	ds	3
  1633  015E                     _FactorA:	
  1634  015E                     	ds	3
  1635  0161                     _IN_STRAY_CAP_TO_GND:	
  1636  0161                     	ds	3
  1637  0164                     _NODE_ID:	
  1638  0164                     	ds	2
  1639  0166                     _ADCres:	
  1640  0166                     	ds	2
  1641  0168                     _message:	
  1642  0168                     	ds	2
  1643  016A                     _packet:	
  1644  016A                     	ds	2
  1645  016C                     _Fixeddata:	
  1646  016C                     	ds	2
  1647  016E                     _preamble:	
  1648  016E                     	ds	2
  1649                           
  1650                           	psect	bssBANK3
  1651  01A0                     __pbssBANK3:	
  1652  01A0                     _packet1:	
  1653  01A0                     	ds	24
  1654  01B8                     _nocodedbit:	
  1655  01B8                     	ds	13
  1656  01C5                     _eusartRxBuffer:	
  1657  01C5                     	ds	8
  1658  01CD                     _eusartTxBuffer:	
  1659  01CD                     	ds	8
  1660  01D5                     _ADC1mVolt:	
  1661  01D5                     	ds	3
  1662  01D8                     _ADC0mVolt:	
  1663  01D8                     	ds	3
  1664  01DB                     _str8:	
  1665  01DB                     	ds	6
  1666                           
  1667                           	psect	bssBANK4
  1668  0220                     __pbssBANK4:	
  1669  0220                     _packet2:	
  1670  0220                     	ds	30
  1671                           
  1672                           	psect	inittext
  1673  14EA                     init_ram:	
  1674  14EA  00FE               	movwf	126
  1675  14EB                     initloop:	
  1676  14EB  0012               	moviw fsr0++
  1677  14EC  001E               	movwi fsr1++
  1678  14ED  0BFE               	decfsz	126,f
  1679  14EE  2CEB               	goto	initloop
  1680  14EF  3400               	retlw	0
  1681                           
  1682                           	psect	clrtext
  1683  14E4                     clear_ram0:	
  1684                           ;	Called with FSR0 containing the base address, and
  1685                           ;	WREG with the size to clear
  1686                           
  1687  14E4  0064               	clrwdt	;clear the watchdog before getting into this loop
  1688  14E5                     clrloop0:	
  1689  14E5  0180               	clrf	0	;clear RAM location pointed to by FSR
  1690  14E6  3101               	addfsr 0,1
  1691  14E7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1692  14E8  2CE5               	goto	clrloop0	;have we reached the end yet?
  1693  14E9  3400               	retlw	0	;all done for this memory range, return
  1694                           
  1695                           	psect	cstackBANK1
  1696  00A0                     __pcstackBANK1:	
  1697  00A0                     ?_eval_poly:	
  1698  00A0                     ?___ftsub:	
  1699                           ; 3 bytes @ 0x0
  1700                           
  1701  00A0                     ___ftsub@f2:	
  1702                           ; 3 bytes @ 0x0
  1703                           
  1704  00A0                     floor@i:	
  1705                           ; 3 bytes @ 0x0
  1706                           
  1707  00A0                     eval_poly@x:	
  1708                           ; 3 bytes @ 0x0
  1709                           
  1710                           
  1711                           ; 3 bytes @ 0x0
  1712  00A0                     	ds	3
  1713  00A3                     floor@expon:	
  1714  00A3                     eval_poly@d:	
  1715                           ; 2 bytes @ 0x3
  1716                           
  1717  00A3                     ___ftsub@f1:	
  1718                           ; 2 bytes @ 0x3
  1719                           
  1720                           
  1721                           ; 3 bytes @ 0x3
  1722  00A3                     	ds	2
  1723  00A5                     eval_poly@n:	
  1724                           
  1725                           ; 2 bytes @ 0x5
  1726  00A5                     	ds	2
  1727  00A7                     ?_log:	
  1728  00A7                     ?_ldexp:	
  1729                           ; 3 bytes @ 0x7
  1730                           
  1731  00A7                     ldexp@value:	
  1732                           ; 3 bytes @ 0x7
  1733                           
  1734  00A7                     log@x:	
  1735                           ; 3 bytes @ 0x7
  1736                           
  1737                           
  1738                           ; 3 bytes @ 0x7
  1739  00A7                     	ds	3
  1740  00AA                     ldexp@newexp:	
  1741  00AA                     log@exponent:	
  1742                           ; 2 bytes @ 0xA
  1743                           
  1744                           
  1745                           ; 2 bytes @ 0xA
  1746  00AA                     	ds	2
  1747  00AC                     ??_ldexp:	
  1748                           
  1749                           ; 1 bytes @ 0xC
  1750  00AC                     	ds	2
  1751  00AE                     ?_exp:	
  1752  00AE                     exp@x:	
  1753                           ; 3 bytes @ 0xE
  1754                           
  1755                           
  1756                           ; 3 bytes @ 0xE
  1757  00AE                     	ds	3
  1758  00B1                     ??_exp:	
  1759                           
  1760                           ; 1 bytes @ 0x11
  1761  00B1                     	ds	1
  1762  00B2                     _exp$1028:	
  1763                           
  1764                           ; 3 bytes @ 0x12
  1765  00B2                     	ds	3
  1766  00B5                     exp@exponent:	
  1767                           
  1768                           ; 2 bytes @ 0x15
  1769  00B5                     	ds	2
  1770  00B7                     exp@sign:	
  1771                           
  1772                           ; 1 bytes @ 0x17
  1773  00B7                     	ds	1
  1774  00B8                     ?_pow:	
  1775  00B8                     pow@x:	
  1776                           ; 3 bytes @ 0x18
  1777                           
  1778                           
  1779                           ; 3 bytes @ 0x18
  1780  00B8                     	ds	3
  1781  00BB                     pow@y:	
  1782                           
  1783                           ; 3 bytes @ 0x1B
  1784  00BB                     	ds	3
  1785  00BE                     ??_pow:	
  1786                           
  1787                           ; 1 bytes @ 0x1E
  1788  00BE                     	ds	1
  1789  00BF                     _pow$1026:	
  1790                           
  1791                           ; 3 bytes @ 0x1F
  1792  00BF                     	ds	3
  1793  00C2                     _pow$1027:	
  1794                           
  1795                           ; 3 bytes @ 0x22
  1796  00C2                     	ds	3
  1797  00C5                     pow@sign:	
  1798                           
  1799                           ; 1 bytes @ 0x25
  1800  00C5                     	ds	1
  1801  00C6                     pow@yi:	
  1802                           
  1803                           ; 4 bytes @ 0x26
  1804  00C6                     	ds	4
  1805  00CA                     ??_main:	
  1806                           
  1807                           ; 1 bytes @ 0x2A
  1808  00CA                     	ds	2
  1809  00CC                     main@i:	
  1810                           
  1811                           ; 2 bytes @ 0x2C
  1812  00CC                     	ds	2
  1813  00CE                     main@count:	
  1814                           
  1815                           ; 1 bytes @ 0x2E
  1816  00CE                     	ds	1
  1817  00CF                     _main$1025:	
  1818                           
  1819                           ; 3 bytes @ 0x2F
  1820  00CF                     	ds	3
  1821  00D2                     _main$1021:	
  1822                           
  1823                           ; 3 bytes @ 0x32
  1824  00D2                     	ds	3
  1825  00D5                     _main$1022:	
  1826                           
  1827                           ; 3 bytes @ 0x35
  1828  00D5                     	ds	3
  1829  00D8                     _main$1023:	
  1830                           
  1831                           ; 3 bytes @ 0x38
  1832  00D8                     	ds	3
  1833  00DB                     _main$1024:	
  1834                           
  1835                           ; 3 bytes @ 0x3B
  1836  00DB                     	ds	3
  1837  00DE                     main@waitind:	
  1838                           
  1839                           ; 2 bytes @ 0x3E
  1840  00DE                     	ds	2
  1841  00E0                     main@c:	
  1842                           
  1843                           ; 1 bytes @ 0x40
  1844  00E0                     	ds	1
  1845                           
  1846                           	psect	cstackCOMMON
  1847  0070                     __pcstackCOMMON:	
  1848  0070                     ?_EUSART_Transmit_ISR:	
  1849  0070                     ??_EUSART_Transmit_ISR:	
  1850                           ; 1 bytes @ 0x0
  1851                           
  1852  0070                     ?_EUSART_Receive_ISR:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0070                     ??_EUSART_Receive_ISR:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0070                     ?_INT_ISR:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0070                     ??_INT_ISR:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0070                     ?_PIN_MANAGER_Initialize:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0070                     ?_OSCILLATOR_Initialize:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  0070                     ?_WDT_Initialize:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     ?_EXT_INT_Initialize:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0070                     ?_EUSART_Initialize:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  0070                     ?_INT_CallBack:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  0070                     ??_INT_CallBack:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  0070                     ?_sendChar:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  0070                     ?_ADC_Initialize:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0070                     ?_INTERRUPT_InterruptManager:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  0070                     ?_SYSTEM_Initialize:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  0070                     ?_INT_DefaultInterruptHandler:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900  0070                     ??_INT_DefaultInterruptHandler:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903  0070                     ?_EUSART_Write:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906  0070                     ?_main:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909                           
  1910                           ; 1 bytes @ 0x0
  1911  0070                     	ds	1
  1912  0071                     ??_INTERRUPT_InterruptManager:	
  1913                           
  1914                           ; 1 bytes @ 0x1
  1915  0071                     	ds	1
  1916  0072                     ?___ftge:	
  1917  0072                     ??_PIN_MANAGER_Initialize:	
  1918                           ; 1 bit 
  1919                           
  1920  0072                     ??_OSCILLATOR_Initialize:	
  1921                           ; 1 bytes @ 0x2
  1922                           
  1923  0072                     ??_WDT_Initialize:	
  1924                           ; 1 bytes @ 0x2
  1925                           
  1926  0072                     ??_EUSART_Initialize:	
  1927                           ; 1 bytes @ 0x2
  1928                           
  1929  0072                     ??_ADC_Initialize:	
  1930                           ; 1 bytes @ 0x2
  1931                           
  1932  0072                     ?_INT_SetInterruptHandler:	
  1933                           ; 1 bytes @ 0x2
  1934                           
  1935  0072                     ??_EUSART_Write:	
  1936                           ; 1 bytes @ 0x2
  1937                           
  1938  0072                     ?_dit_dah:	
  1939                           ; 1 bytes @ 0x2
  1940                           
  1941  0072                     ?_ADC_GetConversion:	
  1942                           ; 1 bytes @ 0x2
  1943                           
  1944  0072                     ?___wmul:	
  1945                           ; 2 bytes @ 0x2
  1946                           
  1947  0072                     ?___lwdiv:	
  1948                           ; 2 bytes @ 0x2
  1949                           
  1950  0072                     ?___ftpack:	
  1951                           ; 2 bytes @ 0x2
  1952                           
  1953  0072                     ?_frexp:	
  1954                           ; 3 bytes @ 0x2
  1955                           
  1956  0072                     ?___lmul:	
  1957                           ; 3 bytes @ 0x2
  1958                           
  1959  0072                     INT_SetInterruptHandler@InterruptHandler:	
  1960                           ; 4 bytes @ 0x2
  1961                           
  1962  0072                     dit_dah@index:	
  1963                           ; 2 bytes @ 0x2
  1964                           
  1965  0072                     ___wmul@multiplier:	
  1966                           ; 2 bytes @ 0x2
  1967                           
  1968  0072                     ___lwdiv@divisor:	
  1969                           ; 2 bytes @ 0x2
  1970                           
  1971  0072                     ___ftpack@arg:	
  1972                           ; 2 bytes @ 0x2
  1973                           
  1974  0072                     ___ftge@ff1:	
  1975                           ; 3 bytes @ 0x2
  1976                           
  1977  0072                     frexp@value:	
  1978                           ; 3 bytes @ 0x2
  1979                           
  1980  0072                     ___lmul@multiplier:	
  1981                           ; 3 bytes @ 0x2
  1982                           
  1983                           
  1984                           ; 4 bytes @ 0x2
  1985  0072                     	ds	1
  1986  0073                     EUSART_Write@txData:	
  1987                           
  1988                           ; 1 bytes @ 0x3
  1989  0073                     	ds	1
  1990  0074                     ??_EXT_INT_Initialize:	
  1991  0074                     ??_ADC_GetConversion:	
  1992                           ; 1 bytes @ 0x4
  1993                           
  1994  0074                     ??_SYSTEM_Initialize:	
  1995                           ; 1 bytes @ 0x4
  1996                           
  1997  0074                     ??_INT_SetInterruptHandler:	
  1998                           ; 1 bytes @ 0x4
  1999                           
  2000  0074                     ?_putch:	
  2001                           ; 1 bytes @ 0x4
  2002                           
  2003  0074                     ??_dit_dah:	
  2004                           ; 1 bytes @ 0x4
  2005                           
  2006  0074                     putch@txData:	
  2007                           ; 1 bytes @ 0x4
  2008                           
  2009  0074                     ___wmul@multiplicand:	
  2010                           ; 1 bytes @ 0x4
  2011                           
  2012  0074                     ___lwdiv@dividend:	
  2013                           ; 2 bytes @ 0x4
  2014                           
  2015                           
  2016                           ; 2 bytes @ 0x4
  2017  0074                     	ds	1
  2018  0075                     ??_putch:	
  2019  0075                     ADC_GetConversion@channel:	
  2020                           ; 1 bytes @ 0x5
  2021                           
  2022  0075                     ___ftpack@exp:	
  2023                           ; 1 bytes @ 0x5
  2024                           
  2025  0075                     frexp@eptr:	
  2026                           ; 1 bytes @ 0x5
  2027                           
  2028  0075                     dit_dah@i:	
  2029                           ; 1 bytes @ 0x5
  2030                           
  2031  0075                     ___ftge@ff2:	
  2032                           ; 2 bytes @ 0x5
  2033                           
  2034                           
  2035                           ; 3 bytes @ 0x5
  2036  0075                     	ds	1
  2037  0076                     ??_frexp:	
  2038  0076                     ??___wmul:	
  2039                           ; 1 bytes @ 0x6
  2040                           
  2041  0076                     ??___lwdiv:	
  2042                           ; 1 bytes @ 0x6
  2043                           
  2044  0076                     ___ftpack@sign:	
  2045                           ; 1 bytes @ 0x6
  2046                           
  2047  0076                     ___wmul@product:	
  2048                           ; 1 bytes @ 0x6
  2049                           
  2050  0076                     ___lmul@multiplicand:	
  2051                           ; 2 bytes @ 0x6
  2052                           
  2053                           
  2054                           ; 4 bytes @ 0x6
  2055  0076                     	ds	1
  2056  0077                     ??_sendChar:	
  2057  0077                     ??___ftpack:	
  2058                           ; 1 bytes @ 0x7
  2059                           
  2060  0077                     ___lwdiv@quotient:	
  2061                           ; 1 bytes @ 0x7
  2062                           
  2063                           
  2064                           ; 2 bytes @ 0x7
  2065  0077                     	ds	2
  2066  0079                     ___lwdiv@counter:	
  2067                           
  2068                           ; 1 bytes @ 0x9
  2069  0079                     	ds	1
  2070  007A                     ??_eval_poly:	
  2071  007A                     ??___lmul:	
  2072                           ; 1 bytes @ 0xA
  2073                           
  2074  007A                     ??___ftneg:	
  2075                           ; 1 bytes @ 0xA
  2076                           
  2077  007A                     ??___ftsub:	
  2078                           ; 1 bytes @ 0xA
  2079                           
  2080                           
  2081                           	psect	cstackBANK0
  2082  0020                     __pcstackBANK0:	
  2083                           ; 1 bytes @ 0xA
  2084                           
  2085  0020                     ??___ftge:	
  2086  0020                     ?___lwmod:	
  2087                           ; 1 bytes @ 0x0
  2088                           
  2089  0020                     ?___awtoft:	
  2090                           ; 2 bytes @ 0x0
  2091                           
  2092  0020                     ?___lltoft:	
  2093                           ; 3 bytes @ 0x0
  2094                           
  2095  0020                     ?___lwtoft:	
  2096                           ; 3 bytes @ 0x0
  2097                           
  2098  0020                     sendChar@i:	
  2099                           ; 3 bytes @ 0x0
  2100                           
  2101  0020                     ___awtoft@c:	
  2102                           ; 2 bytes @ 0x0
  2103                           
  2104  0020                     ___lwmod@divisor:	
  2105                           ; 2 bytes @ 0x0
  2106                           
  2107  0020                     ___lwtoft@c:	
  2108                           ; 2 bytes @ 0x0
  2109                           
  2110  0020                     ___lmul@product:	
  2111                           ; 2 bytes @ 0x0
  2112                           
  2113  0020                     ___lltoft@c:	
  2114                           ; 4 bytes @ 0x0
  2115                           
  2116                           
  2117                           ; 4 bytes @ 0x0
  2118  0020                     	ds	2
  2119  0022                     sendChar@a:	
  2120  0022                     ___lwmod@dividend:	
  2121                           ; 1 bytes @ 0x2
  2122                           
  2123                           
  2124                           ; 2 bytes @ 0x2
  2125  0022                     	ds	1
  2126  0023                     ??___awtoft:	
  2127  0023                     ??___lwtoft:	
  2128                           ; 1 bytes @ 0x3
  2129                           
  2130                           
  2131                           ; 1 bytes @ 0x3
  2132  0023                     	ds	1
  2133  0024                     ??___lltoft:	
  2134  0024                     ??___lwmod:	
  2135                           ; 1 bytes @ 0x4
  2136                           
  2137                           
  2138                           ; 1 bytes @ 0x4
  2139  0024                     	ds	1
  2140  0025                     ___awtoft@sign:	
  2141  0025                     ___lltoft@exp:	
  2142                           ; 1 bytes @ 0x5
  2143                           
  2144  0025                     ___lwmod@counter:	
  2145                           ; 1 bytes @ 0x5
  2146                           
  2147                           
  2148                           ; 1 bytes @ 0x5
  2149  0025                     	ds	1
  2150  0026                     ?__doprnt:	
  2151  0026                     ?___ftdiv:	
  2152                           ; 2 bytes @ 0x6
  2153                           
  2154  0026                     __doprnt@f:	
  2155                           ; 3 bytes @ 0x6
  2156                           
  2157  0026                     ___ftdiv@f2:	
  2158                           ; 2 bytes @ 0x6
  2159                           
  2160                           
  2161                           ; 3 bytes @ 0x6
  2162  0026                     	ds	2
  2163  0028                     __doprnt@ap:	
  2164                           
  2165                           ; 1 bytes @ 0x8
  2166  0028                     	ds	1
  2167  0029                     ??__doprnt:	
  2168  0029                     ___ftdiv@f1:	
  2169                           ; 1 bytes @ 0x9
  2170                           
  2171                           
  2172                           ; 3 bytes @ 0x9
  2173  0029                     	ds	3
  2174  002C                     ??___ftdiv:	
  2175                           
  2176                           ; 1 bytes @ 0xC
  2177  002C                     	ds	1
  2178  002D                     __doprnt@flag:	
  2179                           
  2180                           ; 1 bytes @ 0xD
  2181  002D                     	ds	1
  2182  002E                     __doprnt@prec:	
  2183                           
  2184                           ; 1 bytes @ 0xE
  2185  002E                     	ds	1
  2186  002F                     __doprnt@val:	
  2187                           
  2188                           ; 2 bytes @ 0xF
  2189  002F                     	ds	1
  2190  0030                     ___ftdiv@cntr:	
  2191                           
  2192                           ; 1 bytes @ 0x10
  2193  0030                     	ds	1
  2194  0031                     __doprnt@cp:	
  2195  0031                     ___ftdiv@f3:	
  2196                           ; 2 bytes @ 0x11
  2197                           
  2198                           
  2199                           ; 3 bytes @ 0x11
  2200  0031                     	ds	2
  2201  0033                     __doprnt@c:	
  2202                           
  2203                           ; 1 bytes @ 0x13
  2204  0033                     	ds	1
  2205  0034                     __doprnt@pb:	
  2206  0034                     ___ftdiv@exp:	
  2207                           ; 1 bytes @ 0x14
  2208                           
  2209                           
  2210                           ; 1 bytes @ 0x14
  2211  0034                     	ds	1
  2212  0035                     ?_printf:	
  2213  0035                     ?_sprintf:	
  2214                           ; 2 bytes @ 0x15
  2215                           
  2216  0035                     ___ftdiv@sign:	
  2217                           ; 2 bytes @ 0x15
  2218                           
  2219  0035                     printf@f:	
  2220                           ; 1 bytes @ 0x15
  2221                           
  2222  0035                     sprintf@f:	
  2223                           ; 2 bytes @ 0x15
  2224                           
  2225                           
  2226                           ; 2 bytes @ 0x15
  2227  0035                     	ds	1
  2228  0036                     ?___fttol:	
  2229  0036                     ___fttol@f1:	
  2230                           ; 4 bytes @ 0x16
  2231                           
  2232                           
  2233                           ; 3 bytes @ 0x16
  2234  0036                     	ds	3
  2235  0039                     ??_printf:	
  2236                           
  2237                           ; 1 bytes @ 0x19
  2238  0039                     	ds	1
  2239  003A                     ??___fttol:	
  2240  003A                     printf@ap:	
  2241                           ; 1 bytes @ 0x1A
  2242                           
  2243                           
  2244                           ; 1 bytes @ 0x1A
  2245  003A                     	ds	1
  2246  003B                     ??_sprintf:	
  2247  003B                     printf@pb:	
  2248                           ; 1 bytes @ 0x1B
  2249                           
  2250                           
  2251                           ; 3 bytes @ 0x1B
  2252  003B                     	ds	1
  2253  003C                     sprintf@wh:	
  2254                           
  2255                           ; 1 bytes @ 0x1C
  2256  003C                     	ds	1
  2257  003D                     sprintf@ap:	
  2258                           
  2259                           ; 1 bytes @ 0x1D
  2260  003D                     	ds	1
  2261  003E                     ___fttol@sign1:	
  2262  003E                     sprintf@pb:	
  2263                           ; 1 bytes @ 0x1E
  2264                           
  2265                           
  2266                           ; 3 bytes @ 0x1E
  2267  003E                     	ds	1
  2268  003F                     ___fttol@lval:	
  2269                           
  2270                           ; 4 bytes @ 0x1F
  2271  003F                     	ds	4
  2272  0043                     ___fttol@exp1:	
  2273                           
  2274                           ; 1 bytes @ 0x23
  2275  0043                     	ds	1
  2276  0044                     ?___altoft:	
  2277  0044                     ___altoft@c:	
  2278                           ; 3 bytes @ 0x24
  2279                           
  2280                           
  2281                           ; 4 bytes @ 0x24
  2282  0044                     	ds	4
  2283  0048                     ??___altoft:	
  2284                           
  2285                           ; 1 bytes @ 0x28
  2286  0048                     	ds	2
  2287  004A                     ___altoft@exp:	
  2288                           
  2289                           ; 1 bytes @ 0x2A
  2290  004A                     	ds	1
  2291  004B                     ___altoft@sign:	
  2292                           
  2293                           ; 1 bytes @ 0x2B
  2294  004B                     	ds	1
  2295  004C                     ?___ftneg:	
  2296  004C                     ___ftneg@f1:	
  2297                           ; 3 bytes @ 0x2C
  2298                           
  2299                           
  2300                           ; 3 bytes @ 0x2C
  2301  004C                     	ds	3
  2302  004F                     ?___ftmul:	
  2303  004F                     ___ftmul@f1:	
  2304                           ; 3 bytes @ 0x2F
  2305                           
  2306                           
  2307                           ; 3 bytes @ 0x2F
  2308  004F                     	ds	3
  2309  0052                     ___ftmul@f2:	
  2310                           
  2311                           ; 3 bytes @ 0x32
  2312  0052                     	ds	3
  2313  0055                     ??___ftmul:	
  2314                           
  2315                           ; 1 bytes @ 0x35
  2316  0055                     	ds	4
  2317  0059                     ___ftmul@exp:	
  2318                           
  2319                           ; 1 bytes @ 0x39
  2320  0059                     	ds	1
  2321  005A                     ___ftmul@f3_as_product:	
  2322                           
  2323                           ; 3 bytes @ 0x3A
  2324  005A                     	ds	3
  2325  005D                     ___ftmul@cntr:	
  2326                           
  2327                           ; 1 bytes @ 0x3D
  2328  005D                     	ds	1
  2329  005E                     ___ftmul@sign:	
  2330                           
  2331                           ; 1 bytes @ 0x3E
  2332  005E                     	ds	1
  2333  005F                     ?___ftadd:	
  2334  005F                     ___ftadd@f1:	
  2335                           ; 3 bytes @ 0x3F
  2336                           
  2337                           
  2338                           ; 3 bytes @ 0x3F
  2339  005F                     	ds	3
  2340  0062                     ___ftadd@f2:	
  2341                           
  2342                           ; 3 bytes @ 0x42
  2343  0062                     	ds	3
  2344  0065                     ??___ftadd:	
  2345                           
  2346                           ; 1 bytes @ 0x45
  2347  0065                     	ds	4
  2348  0069                     ___ftadd@sign:	
  2349                           
  2350                           ; 1 bytes @ 0x49
  2351  0069                     	ds	1
  2352  006A                     ___ftadd@exp2:	
  2353                           
  2354                           ; 1 bytes @ 0x4A
  2355  006A                     	ds	1
  2356  006B                     ___ftadd@exp1:	
  2357                           
  2358                           ; 1 bytes @ 0x4B
  2359  006B                     	ds	1
  2360  006C                     ?_floor:	
  2361  006C                     floor@x:	
  2362                           ; 3 bytes @ 0x4C
  2363                           
  2364  006C                     eval_poly@res:	
  2365                           ; 3 bytes @ 0x4C
  2366                           
  2367                           
  2368                           ; 3 bytes @ 0x4C
  2369  006C                     	ds	3
  2370  006F                     ??_log:	
  2371  006F                     ??_floor:	
  2372                           ; 1 bytes @ 0x4F
  2373                           
  2374                           
  2375                           ; 1 bytes @ 0x4F
  2376  006F                     	ds	1
  2377                           
  2378                           	psect	maintext
  2379  0064                     __pmaintext:	
  2380 ;;
  2381 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2382 ;;
  2383 ;; *************** function _main *****************
  2384 ;; Defined at:
  2385 ;;		line 128 in file "main.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;		None
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  waitind         2   62[BANK1 ] int 
  2390 ;;  c               1   64[BANK1 ] PTR unsigned char 
  2391 ;;		 -> str8(6), 
  2392 ;;  i               2   44[BANK1 ] int 
  2393 ;;  count           1   46[BANK1 ] unsigned char 
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : B1F/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2404 ;;      Locals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0
  2405 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2406 ;;      Totals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0
  2407 ;;Total ram usage:       23 bytes
  2408 ;; Hardware stack levels required when called:    9
  2409 ;; This function calls:
  2410 ;;		_ADC_GetConversion
  2411 ;;		_ADC_Initialize
  2412 ;;		_SYSTEM_Initialize
  2413 ;;		___altoft
  2414 ;;		___awtoft
  2415 ;;		___ftadd
  2416 ;;		___ftdiv
  2417 ;;		___ftmul
  2418 ;;		___ftneg
  2419 ;;		___fttol
  2420 ;;		___lmul
  2421 ;;		___lwtoft
  2422 ;;		_pow
  2423 ;;		_printf
  2424 ;;		_sendChar
  2425 ;;		_sprintf
  2426 ;; This function is called by:
  2427 ;;		Startup code after reset
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           
  2432                           ;psect for function _main
  2433  0064                     _main:	
  2434                           
  2435                           ;main.c: 130: int i=0;
  2436                           
  2437                           ;incstack = 0
  2438                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2439  0064  0021               	movlb	1	; select bank1
  2440  0065  01CC               	clrf	main@i^(0+128)
  2441  0066  01CD               	clrf	(main@i+1)^(0+128)
  2442                           
  2443                           ;main.c: 133: SYSTEM_Initialize();
  2444  0067  3195  2522  3180   	fcall	_SYSTEM_Initialize
  2445                           
  2446                           ;main.c: 134: uint8_t count=0;
  2447  006A  0021               	movlb	1	; select bank1
  2448  006B  01CE               	clrf	main@count^(0+128)
  2449                           
  2450                           ;main.c: 140: if (sleep==1)
  2451  006C  0022               	movlb	2	; select bank2
  2452  006D  0340               	decf	_sleep^(0+256),w
  2453  006E  0441               	iorwf	(_sleep+1)^(0+256),w
  2454  006F  1D03               	btfss	3,2
  2455  0070  2873               	goto	l329
  2456                           
  2457                           ;main.c: 141: {
  2458                           ;main.c: 143: (INTCONbits.GIE = 1);
  2459  0071  178B               	bsf	11,7	;volatile
  2460                           
  2461                           ;main.c: 144: }
  2462  0072  2874               	goto	l330
  2463  0073                     l329:	
  2464                           
  2465                           ;main.c: 145: else
  2466                           ;main.c: 146: {
  2467                           ;main.c: 148: (INTCONbits.GIE = 0);
  2468  0073  138B               	bcf	11,7	;volatile
  2469  0074                     l330:	
  2470                           
  2471                           ;main.c: 149: }
  2472                           ;main.c: 151: (INTCONbits.GIE = 1);
  2473  0074  178B               	bsf	11,7	;volatile
  2474                           
  2475                           ;main.c: 154: (INTCONbits.PEIE = 1);
  2476  0075  170B               	bsf	11,6	;volatile
  2477                           
  2478                           ;main.c: 158: ADC_Initialize();
  2479  0076  3194  24F0  3180   	fcall	_ADC_Initialize
  2480                           
  2481                           ;main.c: 160: printf("Start\n");
  2482  0079  30A4               	movlw	low (STR_5| (0+32768))
  2483  007A  0020               	movlb	0	; select bank0
  2484  007B  00B5               	movwf	printf@f
  2485  007C  3098               	movlw	high (STR_5| (0+32768))
  2486  007D  00B6               	movwf	printf@f+1
  2487  007E  3195  2546  3180   	fcall	_printf
  2488  0081                     l3776:	
  2489                           ;main.c: 161: while (1)
  2490                           
  2491                           
  2492                           ;main.c: 162: {
  2493                           ;main.c: 165: *packet1=0;
  2494  0081  0023               	movlb	3	; select bank3
  2495  0082  01A0               	clrf	_packet1^(0+384)
  2496                           
  2497                           ;main.c: 167: LATC3=1;
  2498  0083  0022               	movlb	2	; select bank2
  2499  0084  158E               	bsf	14,3	;volatile
  2500                           
  2501                           ;main.c: 169: sensor0= ADC_GetConversion(channel_AN8);
  2502  0085  3008               	movlw	8
  2503  0086  3195  255C  3180   	fcall	_ADC_GetConversion
  2504  0089  0873               	movf	?_ADC_GetConversion+1,w
  2505  008A  0020               	movlb	0	; select bank0
  2506  008B  00A1               	movwf	___lwtoft@c+1
  2507  008C  0872               	movf	?_ADC_GetConversion,w
  2508  008D  00A0               	movwf	___lwtoft@c
  2509  008E  3195  2531  3180   	fcall	___lwtoft
  2510  0091  0020               	movlb	0	; select bank0
  2511  0092  0820               	movf	?___lwtoft,w
  2512  0093  0022               	movlb	2	; select bank2
  2513  0094  00A3               	movwf	_sensor0^(0+256)
  2514  0095  0020               	movlb	0	; select bank0
  2515  0096  0821               	movf	?___lwtoft+1,w
  2516  0097  0022               	movlb	2	; select bank2
  2517  0098  00A4               	movwf	(_sensor0+1)^(0+256)
  2518  0099  0020               	movlb	0	; select bank0
  2519  009A  0822               	movf	?___lwtoft+2,w
  2520  009B  0022               	movlb	2	; select bank2
  2521  009C  00A5               	movwf	(_sensor0+2)^(0+256)
  2522                           
  2523                           ;main.c: 170: ADC0mVolt1 =(voltref/ADCres)*sensor0;
  2524  009D  0823               	movf	_sensor0^(0+256),w
  2525  009E  0020               	movlb	0	; select bank0
  2526  009F  00CF               	movwf	___ftmul@f1
  2527  00A0  0022               	movlb	2	; select bank2
  2528  00A1  0824               	movf	(_sensor0+1)^(0+256),w
  2529  00A2  0020               	movlb	0	; select bank0
  2530  00A3  00D0               	movwf	___ftmul@f1+1
  2531  00A4  0022               	movlb	2	; select bank2
  2532  00A5  0825               	movf	(_sensor0+2)^(0+256),w
  2533  00A6  0020               	movlb	0	; select bank0
  2534  00A7  00D1               	movwf	___ftmul@f1+2
  2535  00A8  0022               	movlb	2	; select bank2
  2536  00A9  0867               	movf	(_ADCres+1)^(0+256),w
  2537  00AA  0020               	movlb	0	; select bank0
  2538  00AB  00A1               	movwf	___awtoft@c+1
  2539  00AC  0022               	movlb	2	; select bank2
  2540  00AD  0866               	movf	_ADCres^(0+256),w
  2541  00AE  0020               	movlb	0	; select bank0
  2542  00AF  00A0               	movwf	___awtoft@c
  2543  00B0  3196  261C  3180   	fcall	___awtoft
  2544  00B3  0020               	movlb	0	; select bank0
  2545  00B4  0820               	movf	?___awtoft,w
  2546  00B5  00A6               	movwf	___ftdiv@f2
  2547  00B6  0821               	movf	?___awtoft+1,w
  2548  00B7  00A7               	movwf	___ftdiv@f2+1
  2549  00B8  0822               	movf	?___awtoft+2,w
  2550  00B9  00A8               	movwf	___ftdiv@f2+2
  2551  00BA  0022               	movlb	2	; select bank2
  2552  00BB  0852               	movf	_voltref^(0+256),w
  2553  00BC  0020               	movlb	0	; select bank0
  2554  00BD  00A9               	movwf	___ftdiv@f1
  2555  00BE  0022               	movlb	2	; select bank2
  2556  00BF  0853               	movf	(_voltref+1)^(0+256),w
  2557  00C0  0020               	movlb	0	; select bank0
  2558  00C1  00AA               	movwf	___ftdiv@f1+1
  2559  00C2  0022               	movlb	2	; select bank2
  2560  00C3  0854               	movf	(_voltref+2)^(0+256),w
  2561  00C4  0020               	movlb	0	; select bank0
  2562  00C5  00AB               	movwf	___ftdiv@f1+2
  2563  00C6  318A  22A6  3180   	fcall	___ftdiv
  2564  00C9  0020               	movlb	0	; select bank0
  2565  00CA  0826               	movf	?___ftdiv,w
  2566  00CB  00D2               	movwf	___ftmul@f2
  2567  00CC  0827               	movf	?___ftdiv+1,w
  2568  00CD  00D3               	movwf	___ftmul@f2+1
  2569  00CE  0828               	movf	?___ftdiv+2,w
  2570  00CF  00D4               	movwf	___ftmul@f2+2
  2571  00D0  318B  234F  3180   	fcall	___ftmul
  2572  00D3  0020               	movlb	0	; select bank0
  2573  00D4  084F               	movf	?___ftmul,w
  2574  00D5  0021               	movlb	1	; select bank1
  2575  00D6  00E4               	movwf	_ADC0mVolt1^(0+128)
  2576  00D7  0020               	movlb	0	; select bank0
  2577  00D8  0850               	movf	?___ftmul+1,w
  2578  00D9  0021               	movlb	1	; select bank1
  2579  00DA  00E5               	movwf	(_ADC0mVolt1+1)^(0+128)
  2580  00DB  0020               	movlb	0	; select bank0
  2581  00DC  0851               	movf	?___ftmul+2,w
  2582  00DD  0021               	movlb	1	; select bank1
  2583  00DE  00E6               	movwf	(_ADC0mVolt1+2)^(0+128)
  2584                           
  2585                           ;main.c: 174: sensor1= ADC_GetConversion(channel_AN9);
  2586  00DF  3009               	movlw	9
  2587  00E0  3195  255C  3180   	fcall	_ADC_GetConversion
  2588  00E3  0873               	movf	?_ADC_GetConversion+1,w
  2589  00E4  0020               	movlb	0	; select bank0
  2590  00E5  00A1               	movwf	___lwtoft@c+1
  2591  00E6  0872               	movf	?_ADC_GetConversion,w
  2592  00E7  00A0               	movwf	___lwtoft@c
  2593  00E8  3195  2531  3180   	fcall	___lwtoft
  2594  00EB  0020               	movlb	0	; select bank0
  2595  00EC  0820               	movf	?___lwtoft,w
  2596  00ED  0022               	movlb	2	; select bank2
  2597  00EE  00A0               	movwf	_sensor1^(0+256)
  2598  00EF  0020               	movlb	0	; select bank0
  2599  00F0  0821               	movf	?___lwtoft+1,w
  2600  00F1  0022               	movlb	2	; select bank2
  2601  00F2  00A1               	movwf	(_sensor1+1)^(0+256)
  2602  00F3  0020               	movlb	0	; select bank0
  2603  00F4  0822               	movf	?___lwtoft+2,w
  2604  00F5  0022               	movlb	2	; select bank2
  2605  00F6  00A2               	movwf	(_sensor1+2)^(0+256)
  2606                           
  2607                           ;main.c: 175: ADC0mVolt2 =(voltref/ADCres)*sensor1;
  2608  00F7  0820               	movf	_sensor1^(0+256),w
  2609  00F8  0020               	movlb	0	; select bank0
  2610  00F9  00CF               	movwf	___ftmul@f1
  2611  00FA  0022               	movlb	2	; select bank2
  2612  00FB  0821               	movf	(_sensor1+1)^(0+256),w
  2613  00FC  0020               	movlb	0	; select bank0
  2614  00FD  00D0               	movwf	___ftmul@f1+1
  2615  00FE  0022               	movlb	2	; select bank2
  2616  00FF  0822               	movf	(_sensor1+2)^(0+256),w
  2617  0100  0020               	movlb	0	; select bank0
  2618  0101  00D1               	movwf	___ftmul@f1+2
  2619  0102  0022               	movlb	2	; select bank2
  2620  0103  0867               	movf	(_ADCres+1)^(0+256),w
  2621  0104  0020               	movlb	0	; select bank0
  2622  0105  00A1               	movwf	___awtoft@c+1
  2623  0106  0022               	movlb	2	; select bank2
  2624  0107  0866               	movf	_ADCres^(0+256),w
  2625  0108  0020               	movlb	0	; select bank0
  2626  0109  00A0               	movwf	___awtoft@c
  2627  010A  3196  261C  3180   	fcall	___awtoft
  2628  010D  0020               	movlb	0	; select bank0
  2629  010E  0820               	movf	?___awtoft,w
  2630  010F  00A6               	movwf	___ftdiv@f2
  2631  0110  0821               	movf	?___awtoft+1,w
  2632  0111  00A7               	movwf	___ftdiv@f2+1
  2633  0112  0822               	movf	?___awtoft+2,w
  2634  0113  00A8               	movwf	___ftdiv@f2+2
  2635  0114  0022               	movlb	2	; select bank2
  2636  0115  0852               	movf	_voltref^(0+256),w
  2637  0116  0020               	movlb	0	; select bank0
  2638  0117  00A9               	movwf	___ftdiv@f1
  2639  0118  0022               	movlb	2	; select bank2
  2640  0119  0853               	movf	(_voltref+1)^(0+256),w
  2641  011A  0020               	movlb	0	; select bank0
  2642  011B  00AA               	movwf	___ftdiv@f1+1
  2643  011C  0022               	movlb	2	; select bank2
  2644  011D  0854               	movf	(_voltref+2)^(0+256),w
  2645  011E  0020               	movlb	0	; select bank0
  2646  011F  00AB               	movwf	___ftdiv@f1+2
  2647  0120  318A  22A6  3180   	fcall	___ftdiv
  2648  0123  0020               	movlb	0	; select bank0
  2649  0124  0826               	movf	?___ftdiv,w
  2650  0125  00D2               	movwf	___ftmul@f2
  2651  0126  0827               	movf	?___ftdiv+1,w
  2652  0127  00D3               	movwf	___ftmul@f2+1
  2653  0128  0828               	movf	?___ftdiv+2,w
  2654  0129  00D4               	movwf	___ftmul@f2+2
  2655  012A  318B  234F  3180   	fcall	___ftmul
  2656  012D  0020               	movlb	0	; select bank0
  2657  012E  084F               	movf	?___ftmul,w
  2658  012F  0021               	movlb	1	; select bank1
  2659  0130  00E1               	movwf	_ADC0mVolt2^(0+128)
  2660  0131  0020               	movlb	0	; select bank0
  2661  0132  0850               	movf	?___ftmul+1,w
  2662  0133  0021               	movlb	1	; select bank1
  2663  0134  00E2               	movwf	(_ADC0mVolt2+1)^(0+128)
  2664  0135  0020               	movlb	0	; select bank0
  2665  0136  0851               	movf	?___ftmul+2,w
  2666  0137  0021               	movlb	1	; select bank1
  2667  0138  00E3               	movwf	(_ADC0mVolt2+2)^(0+128)
  2668                           
  2669                           ;main.c: 179: ADCON0 = 0x00;
  2670  0139  019D               	clrf	29	;volatile
  2671                           
  2672                           ;main.c: 180: LATC3=0;
  2673  013A  0022               	movlb	2	; select bank2
  2674  013B  118E               	bcf	14,3	;volatile
  2675                           
  2676                           ;main.c: 183: ADC0mVolt2 =995.050;
  2677  013C  30C3               	movlw	195
  2678  013D  0021               	movlb	1	; select bank1
  2679  013E  00E1               	movwf	_ADC0mVolt2^(0+128)
  2680  013F  3078               	movlw	120
  2681  0140  00E2               	movwf	(_ADC0mVolt2+1)^(0+128)
  2682  0141  3044               	movlw	68
  2683  0142  00E3               	movwf	(_ADC0mVolt2+2)^(0+128)
  2684                           
  2685                           ;main.c: 184: ADC0mVolt1 =992.227;
  2686  0143  300F               	movlw	15
  2687  0144  00E4               	movwf	_ADC0mVolt1^(0+128)
  2688  0145  3078               	movlw	120
  2689  0146  00E5               	movwf	(_ADC0mVolt1+1)^(0+128)
  2690  0147  3044               	movlw	68
  2691  0148  00E6               	movwf	(_ADC0mVolt1+2)^(0+128)
  2692                           
  2693                           ;main.c: 186: TemporC1 = (double)FactorA*pow(ADC0mVolt1,3)+ (double)FactorB*pow(ADC0mVol
      +                          t1,2)+ (double)FactorC*(ADC0mVolt1) + FactorD;
  2694  0149  3000               	movlw	0
  2695  014A  00BB               	movwf	pow@y^(0+128)
  2696  014B  3000               	movlw	0
  2697  014C  00BC               	movwf	(pow@y+1)^(0+128)
  2698  014D  3040               	movlw	64
  2699  014E  00BD               	movwf	(pow@y+2)^(0+128)
  2700  014F  0864               	movf	_ADC0mVolt1^(0+128),w
  2701  0150  00B8               	movwf	pow@x^(0+128)
  2702  0151  0865               	movf	(_ADC0mVolt1+1)^(0+128),w
  2703  0152  00B9               	movwf	(pow@x+1)^(0+128)
  2704  0153  0866               	movf	(_ADC0mVolt1+2)^(0+128),w
  2705  0154  00BA               	movwf	(pow@x+2)^(0+128)
  2706  0155  318D  25BE  3180   	fcall	_pow
  2707  0158  0021               	movlb	1	; select bank1
  2708  0159  0838               	movf	?_pow^(0+128),w
  2709  015A  00D2               	movwf	_main$1021^(0+128)
  2710  015B  0839               	movf	(?_pow+1)^(0+128),w
  2711  015C  00D3               	movwf	(_main$1021+1)^(0+128)
  2712  015D  083A               	movf	(?_pow+2)^(0+128),w
  2713  015E  00D4               	movwf	(_main$1021+2)^(0+128)
  2714                           
  2715                           ;main.c: 186: TemporC1 = (double)FactorA*pow(ADC0mVolt1,3)+ (double)FactorB*pow(ADC0mVol
      +                          t1,2)+ (double)FactorC*(ADC0mVolt1) + FactorD;
  2716  015F  3000               	movlw	0
  2717  0160  00BB               	movwf	pow@y^(0+128)
  2718  0161  3040               	movlw	64
  2719  0162  00BC               	movwf	(pow@y+1)^(0+128)
  2720  0163  3040               	movlw	64
  2721  0164  00BD               	movwf	(pow@y+2)^(0+128)
  2722  0165  0864               	movf	_ADC0mVolt1^(0+128),w
  2723  0166  00B8               	movwf	pow@x^(0+128)
  2724  0167  0865               	movf	(_ADC0mVolt1+1)^(0+128),w
  2725  0168  00B9               	movwf	(pow@x+1)^(0+128)
  2726  0169  0866               	movf	(_ADC0mVolt1+2)^(0+128),w
  2727  016A  00BA               	movwf	(pow@x+2)^(0+128)
  2728  016B  318D  25BE  3180   	fcall	_pow
  2729  016E  0021               	movlb	1	; select bank1
  2730  016F  0838               	movf	?_pow^(0+128),w
  2731  0170  00D5               	movwf	_main$1022^(0+128)
  2732  0171  0839               	movf	(?_pow+1)^(0+128),w
  2733  0172  00D6               	movwf	(_main$1022+1)^(0+128)
  2734  0173  083A               	movf	(?_pow+2)^(0+128),w
  2735  0174  00D7               	movwf	(_main$1022+2)^(0+128)
  2736                           
  2737                           ;main.c: 186: TemporC1 = (double)FactorA*pow(ADC0mVolt1,3)+ (double)FactorB*pow(ADC0mVol
      +                          t1,2)+ (double)FactorC*(ADC0mVolt1) + FactorD;
  2738  0175  0022               	movlb	2	; select bank2
  2739  0176  085B               	movf	_FactorB^(0+256),w
  2740  0177  0020               	movlb	0	; select bank0
  2741  0178  00CF               	movwf	___ftmul@f1
  2742  0179  0022               	movlb	2	; select bank2
  2743  017A  085C               	movf	(_FactorB+1)^(0+256),w
  2744  017B  0020               	movlb	0	; select bank0
  2745  017C  00D0               	movwf	___ftmul@f1+1
  2746  017D  0022               	movlb	2	; select bank2
  2747  017E  085D               	movf	(_FactorB+2)^(0+256),w
  2748  017F  0020               	movlb	0	; select bank0
  2749  0180  00D1               	movwf	___ftmul@f1+2
  2750  0181  0021               	movlb	1	; select bank1
  2751  0182  0852               	movf	_main$1021^(0+128),w
  2752  0183  0020               	movlb	0	; select bank0
  2753  0184  00D2               	movwf	___ftmul@f2
  2754  0185  0021               	movlb	1	; select bank1
  2755  0186  0853               	movf	(_main$1021+1)^(0+128),w
  2756  0187  0020               	movlb	0	; select bank0
  2757  0188  00D3               	movwf	___ftmul@f2+1
  2758  0189  0021               	movlb	1	; select bank1
  2759  018A  0854               	movf	(_main$1021+2)^(0+128),w
  2760  018B  0020               	movlb	0	; select bank0
  2761  018C  00D4               	movwf	___ftmul@f2+2
  2762  018D  318B  234F  3180   	fcall	___ftmul
  2763  0190  0020               	movlb	0	; select bank0
  2764  0191  084F               	movf	?___ftmul,w
  2765  0192  00DF               	movwf	___ftadd@f1
  2766  0193  0850               	movf	?___ftmul+1,w
  2767  0194  00E0               	movwf	___ftadd@f1+1
  2768  0195  0851               	movf	?___ftmul+2,w
  2769  0196  00E1               	movwf	___ftadd@f1+2
  2770  0197  0022               	movlb	2	; select bank2
  2771  0198  085E               	movf	_FactorA^(0+256),w
  2772  0199  0020               	movlb	0	; select bank0
  2773  019A  00CF               	movwf	___ftmul@f1
  2774  019B  0022               	movlb	2	; select bank2
  2775  019C  085F               	movf	(_FactorA+1)^(0+256),w
  2776  019D  0020               	movlb	0	; select bank0
  2777  019E  00D0               	movwf	___ftmul@f1+1
  2778  019F  0022               	movlb	2	; select bank2
  2779  01A0  0860               	movf	(_FactorA+2)^(0+256),w
  2780  01A1  0020               	movlb	0	; select bank0
  2781  01A2  00D1               	movwf	___ftmul@f1+2
  2782  01A3  0021               	movlb	1	; select bank1
  2783  01A4  0855               	movf	_main$1022^(0+128),w
  2784  01A5  0020               	movlb	0	; select bank0
  2785  01A6  00D2               	movwf	___ftmul@f2
  2786  01A7  0021               	movlb	1	; select bank1
  2787  01A8  0856               	movf	(_main$1022+1)^(0+128),w
  2788  01A9  0020               	movlb	0	; select bank0
  2789  01AA  00D3               	movwf	___ftmul@f2+1
  2790  01AB  0021               	movlb	1	; select bank1
  2791  01AC  0857               	movf	(_main$1022+2)^(0+128),w
  2792  01AD  0020               	movlb	0	; select bank0
  2793  01AE  00D4               	movwf	___ftmul@f2+2
  2794  01AF  318B  234F  3180   	fcall	___ftmul
  2795  01B2  0020               	movlb	0	; select bank0
  2796  01B3  084F               	movf	?___ftmul,w
  2797  01B4  00E2               	movwf	___ftadd@f2
  2798  01B5  0850               	movf	?___ftmul+1,w
  2799  01B6  00E3               	movwf	___ftadd@f2+1
  2800  01B7  0851               	movf	?___ftmul+2,w
  2801  01B8  00E4               	movwf	___ftadd@f2+2
  2802  01B9  318C  24C8  3180   	fcall	___ftadd
  2803  01BC  0020               	movlb	0	; select bank0
  2804  01BD  085F               	movf	?___ftadd,w
  2805  01BE  0021               	movlb	1	; select bank1
  2806  01BF  00D8               	movwf	_main$1023^(0+128)
  2807  01C0  0020               	movlb	0	; select bank0
  2808  01C1  0860               	movf	?___ftadd+1,w
  2809  01C2  0021               	movlb	1	; select bank1
  2810  01C3  00D9               	movwf	(_main$1023+1)^(0+128)
  2811  01C4  0020               	movlb	0	; select bank0
  2812  01C5  0861               	movf	?___ftadd+2,w
  2813  01C6  0021               	movlb	1	; select bank1
  2814  01C7  00DA               	movwf	(_main$1023+2)^(0+128)
  2815                           
  2816                           ;main.c: 186: TemporC1 = (double)FactorA*pow(ADC0mVolt1,3)+ (double)FactorB*pow(ADC0mVol
      +                          t1,2)+ (double)FactorC*(ADC0mVolt1) + FactorD;
  2817  01C8  0864               	movf	_ADC0mVolt1^(0+128),w
  2818  01C9  0020               	movlb	0	; select bank0
  2819  01CA  00CF               	movwf	___ftmul@f1
  2820  01CB  0021               	movlb	1	; select bank1
  2821  01CC  0865               	movf	(_ADC0mVolt1+1)^(0+128),w
  2822  01CD  0020               	movlb	0	; select bank0
  2823  01CE  00D0               	movwf	___ftmul@f1+1
  2824  01CF  0021               	movlb	1	; select bank1
  2825  01D0  0866               	movf	(_ADC0mVolt1+2)^(0+128),w
  2826  01D1  0020               	movlb	0	; select bank0
  2827  01D2  00D1               	movwf	___ftmul@f1+2
  2828  01D3  0022               	movlb	2	; select bank2
  2829  01D4  0858               	movf	_FactorC^(0+256),w
  2830  01D5  0020               	movlb	0	; select bank0
  2831  01D6  00D2               	movwf	___ftmul@f2
  2832  01D7  0022               	movlb	2	; select bank2
  2833  01D8  0859               	movf	(_FactorC+1)^(0+256),w
  2834  01D9  0020               	movlb	0	; select bank0
  2835  01DA  00D3               	movwf	___ftmul@f2+1
  2836  01DB  0022               	movlb	2	; select bank2
  2837  01DC  085A               	movf	(_FactorC+2)^(0+256),w
  2838  01DD  0020               	movlb	0	; select bank0
  2839  01DE  00D4               	movwf	___ftmul@f2+2
  2840  01DF  318B  234F  3180   	fcall	___ftmul
  2841  01E2  0020               	movlb	0	; select bank0
  2842  01E3  084F               	movf	?___ftmul,w
  2843  01E4  00DF               	movwf	___ftadd@f1
  2844  01E5  0850               	movf	?___ftmul+1,w
  2845  01E6  00E0               	movwf	___ftadd@f1+1
  2846  01E7  0851               	movf	?___ftmul+2,w
  2847  01E8  00E1               	movwf	___ftadd@f1+2
  2848  01E9  0021               	movlb	1	; select bank1
  2849  01EA  0858               	movf	_main$1023^(0+128),w
  2850  01EB  0020               	movlb	0	; select bank0
  2851  01EC  00E2               	movwf	___ftadd@f2
  2852  01ED  0021               	movlb	1	; select bank1
  2853  01EE  0859               	movf	(_main$1023+1)^(0+128),w
  2854  01EF  0020               	movlb	0	; select bank0
  2855  01F0  00E3               	movwf	___ftadd@f2+1
  2856  01F1  0021               	movlb	1	; select bank1
  2857  01F2  085A               	movf	(_main$1023+2)^(0+128),w
  2858  01F3  0020               	movlb	0	; select bank0
  2859  01F4  00E4               	movwf	___ftadd@f2+2
  2860  01F5  318C  24C8  3180   	fcall	___ftadd
  2861  01F8  0020               	movlb	0	; select bank0
  2862  01F9  085F               	movf	?___ftadd,w
  2863  01FA  0021               	movlb	1	; select bank1
  2864  01FB  00DB               	movwf	_main$1024^(0+128)
  2865  01FC  0020               	movlb	0	; select bank0
  2866  01FD  0860               	movf	?___ftadd+1,w
  2867  01FE  0021               	movlb	1	; select bank1
  2868  01FF  00DC               	movwf	(_main$1024+1)^(0+128)
  2869  0200  0020               	movlb	0	; select bank0
  2870  0201  0861               	movf	?___ftadd+2,w
  2871  0202  0021               	movlb	1	; select bank1
  2872  0203  00DD               	movwf	(_main$1024+2)^(0+128)
  2873                           
  2874                           ;main.c: 186: TemporC1 = (double)FactorA*pow(ADC0mVolt1,3)+ (double)FactorB*pow(ADC0mVol
      +                          t1,2)+ (double)FactorC*(ADC0mVolt1) + FactorD;
  2875  0204  0022               	movlb	2	; select bank2
  2876  0205  0855               	movf	_FactorD^(0+256),w
  2877  0206  0020               	movlb	0	; select bank0
  2878  0207  00DF               	movwf	___ftadd@f1
  2879  0208  0022               	movlb	2	; select bank2
  2880  0209  0856               	movf	(_FactorD+1)^(0+256),w
  2881  020A  0020               	movlb	0	; select bank0
  2882  020B  00E0               	movwf	___ftadd@f1+1
  2883  020C  0022               	movlb	2	; select bank2
  2884  020D  0857               	movf	(_FactorD+2)^(0+256),w
  2885  020E  0020               	movlb	0	; select bank0
  2886  020F  00E1               	movwf	___ftadd@f1+2
  2887  0210  0021               	movlb	1	; select bank1
  2888  0211  085B               	movf	_main$1024^(0+128),w
  2889  0212  0020               	movlb	0	; select bank0
  2890  0213  00E2               	movwf	___ftadd@f2
  2891  0214  0021               	movlb	1	; select bank1
  2892  0215  085C               	movf	(_main$1024+1)^(0+128),w
  2893  0216  0020               	movlb	0	; select bank0
  2894  0217  00E3               	movwf	___ftadd@f2+1
  2895  0218  0021               	movlb	1	; select bank1
  2896  0219  085D               	movf	(_main$1024+2)^(0+128),w
  2897  021A  0020               	movlb	0	; select bank0
  2898  021B  00E4               	movwf	___ftadd@f2+2
  2899  021C  318C  24C8  3180   	fcall	___ftadd
  2900  021F  0020               	movlb	0	; select bank0
  2901  0220  085F               	movf	?___ftadd,w
  2902  0221  0022               	movlb	2	; select bank2
  2903  0222  00AC               	movwf	_TemporC1^(0+256)
  2904  0223  0020               	movlb	0	; select bank0
  2905  0224  0860               	movf	?___ftadd+1,w
  2906  0225  0022               	movlb	2	; select bank2
  2907  0226  00AD               	movwf	(_TemporC1+1)^(0+256)
  2908  0227  0020               	movlb	0	; select bank0
  2909  0228  0861               	movf	?___ftadd+2,w
  2910  0229  0022               	movlb	2	; select bank2
  2911  022A  00AE               	movwf	(_TemporC1+2)^(0+256)
  2912                           
  2913                           ;main.c: 187: TemporC2 = (double)FactorA*pow(ADC0mVolt2,3)+ (double)FactorB*pow(ADC0mVol
      +                          t2,2)+ (double)FactorC*(ADC0mVolt2) + FactorD;
  2914  022B  3000               	movlw	0
  2915  022C  0021               	movlb	1	; select bank1
  2916  022D  00BB               	movwf	pow@y^(0+128)
  2917  022E  3000               	movlw	0
  2918  022F  00BC               	movwf	(pow@y+1)^(0+128)
  2919  0230  3040               	movlw	64
  2920  0231  00BD               	movwf	(pow@y+2)^(0+128)
  2921  0232  0861               	movf	_ADC0mVolt2^(0+128),w
  2922  0233  00B8               	movwf	pow@x^(0+128)
  2923  0234  0862               	movf	(_ADC0mVolt2+1)^(0+128),w
  2924  0235  00B9               	movwf	(pow@x+1)^(0+128)
  2925  0236  0863               	movf	(_ADC0mVolt2+2)^(0+128),w
  2926  0237  00BA               	movwf	(pow@x+2)^(0+128)
  2927  0238  318D  25BE  3180   	fcall	_pow
  2928  023B  0021               	movlb	1	; select bank1
  2929  023C  0838               	movf	?_pow^(0+128),w
  2930  023D  00D2               	movwf	_main$1021^(0+128)
  2931  023E  0839               	movf	(?_pow+1)^(0+128),w
  2932  023F  00D3               	movwf	(_main$1021+1)^(0+128)
  2933  0240  083A               	movf	(?_pow+2)^(0+128),w
  2934  0241  00D4               	movwf	(_main$1021+2)^(0+128)
  2935                           
  2936                           ;main.c: 187: TemporC2 = (double)FactorA*pow(ADC0mVolt2,3)+ (double)FactorB*pow(ADC0mVol
      +                          t2,2)+ (double)FactorC*(ADC0mVolt2) + FactorD;
  2937  0242  3000               	movlw	0
  2938  0243  00BB               	movwf	pow@y^(0+128)
  2939  0244  3040               	movlw	64
  2940  0245  00BC               	movwf	(pow@y+1)^(0+128)
  2941  0246  3040               	movlw	64
  2942  0247  00BD               	movwf	(pow@y+2)^(0+128)
  2943  0248  0861               	movf	_ADC0mVolt2^(0+128),w
  2944  0249  00B8               	movwf	pow@x^(0+128)
  2945  024A  0862               	movf	(_ADC0mVolt2+1)^(0+128),w
  2946  024B  00B9               	movwf	(pow@x+1)^(0+128)
  2947  024C  0863               	movf	(_ADC0mVolt2+2)^(0+128),w
  2948  024D  00BA               	movwf	(pow@x+2)^(0+128)
  2949  024E  318D  25BE  3180   	fcall	_pow
  2950  0251  0021               	movlb	1	; select bank1
  2951  0252  0838               	movf	?_pow^(0+128),w
  2952  0253  00D5               	movwf	_main$1022^(0+128)
  2953  0254  0839               	movf	(?_pow+1)^(0+128),w
  2954  0255  00D6               	movwf	(_main$1022+1)^(0+128)
  2955  0256  083A               	movf	(?_pow+2)^(0+128),w
  2956  0257  00D7               	movwf	(_main$1022+2)^(0+128)
  2957                           
  2958                           ;main.c: 187: TemporC2 = (double)FactorA*pow(ADC0mVolt2,3)+ (double)FactorB*pow(ADC0mVol
      +                          t2,2)+ (double)FactorC*(ADC0mVolt2) + FactorD;
  2959  0258  0022               	movlb	2	; select bank2
  2960  0259  085B               	movf	_FactorB^(0+256),w
  2961  025A  0020               	movlb	0	; select bank0
  2962  025B  00CF               	movwf	___ftmul@f1
  2963  025C  0022               	movlb	2	; select bank2
  2964  025D  085C               	movf	(_FactorB+1)^(0+256),w
  2965  025E  0020               	movlb	0	; select bank0
  2966  025F  00D0               	movwf	___ftmul@f1+1
  2967  0260  0022               	movlb	2	; select bank2
  2968  0261  085D               	movf	(_FactorB+2)^(0+256),w
  2969  0262  0020               	movlb	0	; select bank0
  2970  0263  00D1               	movwf	___ftmul@f1+2
  2971  0264  0021               	movlb	1	; select bank1
  2972  0265  0852               	movf	_main$1021^(0+128),w
  2973  0266  0020               	movlb	0	; select bank0
  2974  0267  00D2               	movwf	___ftmul@f2
  2975  0268  0021               	movlb	1	; select bank1
  2976  0269  0853               	movf	(_main$1021+1)^(0+128),w
  2977  026A  0020               	movlb	0	; select bank0
  2978  026B  00D3               	movwf	___ftmul@f2+1
  2979  026C  0021               	movlb	1	; select bank1
  2980  026D  0854               	movf	(_main$1021+2)^(0+128),w
  2981  026E  0020               	movlb	0	; select bank0
  2982  026F  00D4               	movwf	___ftmul@f2+2
  2983  0270  318B  234F  3180   	fcall	___ftmul
  2984  0273  0020               	movlb	0	; select bank0
  2985  0274  084F               	movf	?___ftmul,w
  2986  0275  00DF               	movwf	___ftadd@f1
  2987  0276  0850               	movf	?___ftmul+1,w
  2988  0277  00E0               	movwf	___ftadd@f1+1
  2989  0278  0851               	movf	?___ftmul+2,w
  2990  0279  00E1               	movwf	___ftadd@f1+2
  2991  027A  0022               	movlb	2	; select bank2
  2992  027B  085E               	movf	_FactorA^(0+256),w
  2993  027C  0020               	movlb	0	; select bank0
  2994  027D  00CF               	movwf	___ftmul@f1
  2995  027E  0022               	movlb	2	; select bank2
  2996  027F  085F               	movf	(_FactorA+1)^(0+256),w
  2997  0280  0020               	movlb	0	; select bank0
  2998  0281  00D0               	movwf	___ftmul@f1+1
  2999  0282  0022               	movlb	2	; select bank2
  3000  0283  0860               	movf	(_FactorA+2)^(0+256),w
  3001  0284  0020               	movlb	0	; select bank0
  3002  0285  00D1               	movwf	___ftmul@f1+2
  3003  0286  0021               	movlb	1	; select bank1
  3004  0287  0855               	movf	_main$1022^(0+128),w
  3005  0288  0020               	movlb	0	; select bank0
  3006  0289  00D2               	movwf	___ftmul@f2
  3007  028A  0021               	movlb	1	; select bank1
  3008  028B  0856               	movf	(_main$1022+1)^(0+128),w
  3009  028C  0020               	movlb	0	; select bank0
  3010  028D  00D3               	movwf	___ftmul@f2+1
  3011  028E  0021               	movlb	1	; select bank1
  3012  028F  0857               	movf	(_main$1022+2)^(0+128),w
  3013  0290  0020               	movlb	0	; select bank0
  3014  0291  00D4               	movwf	___ftmul@f2+2
  3015  0292  318B  234F  3180   	fcall	___ftmul
  3016  0295  0020               	movlb	0	; select bank0
  3017  0296  084F               	movf	?___ftmul,w
  3018  0297  00E2               	movwf	___ftadd@f2
  3019  0298  0850               	movf	?___ftmul+1,w
  3020  0299  00E3               	movwf	___ftadd@f2+1
  3021  029A  0851               	movf	?___ftmul+2,w
  3022  029B  00E4               	movwf	___ftadd@f2+2
  3023  029C  318C  24C8  3180   	fcall	___ftadd
  3024  029F  0020               	movlb	0	; select bank0
  3025  02A0  085F               	movf	?___ftadd,w
  3026  02A1  0021               	movlb	1	; select bank1
  3027  02A2  00D8               	movwf	_main$1023^(0+128)
  3028  02A3  0020               	movlb	0	; select bank0
  3029  02A4  0860               	movf	?___ftadd+1,w
  3030  02A5  0021               	movlb	1	; select bank1
  3031  02A6  00D9               	movwf	(_main$1023+1)^(0+128)
  3032  02A7  0020               	movlb	0	; select bank0
  3033  02A8  0861               	movf	?___ftadd+2,w
  3034  02A9  0021               	movlb	1	; select bank1
  3035  02AA  00DA               	movwf	(_main$1023+2)^(0+128)
  3036                           
  3037                           ;main.c: 187: TemporC2 = (double)FactorA*pow(ADC0mVolt2,3)+ (double)FactorB*pow(ADC0mVol
      +                          t2,2)+ (double)FactorC*(ADC0mVolt2) + FactorD;
  3038  02AB  0861               	movf	_ADC0mVolt2^(0+128),w
  3039  02AC  0020               	movlb	0	; select bank0
  3040  02AD  00CF               	movwf	___ftmul@f1
  3041  02AE  0021               	movlb	1	; select bank1
  3042  02AF  0862               	movf	(_ADC0mVolt2+1)^(0+128),w
  3043  02B0  0020               	movlb	0	; select bank0
  3044  02B1  00D0               	movwf	___ftmul@f1+1
  3045  02B2  0021               	movlb	1	; select bank1
  3046  02B3  0863               	movf	(_ADC0mVolt2+2)^(0+128),w
  3047  02B4  0020               	movlb	0	; select bank0
  3048  02B5  00D1               	movwf	___ftmul@f1+2
  3049  02B6  0022               	movlb	2	; select bank2
  3050  02B7  0858               	movf	_FactorC^(0+256),w
  3051  02B8  0020               	movlb	0	; select bank0
  3052  02B9  00D2               	movwf	___ftmul@f2
  3053  02BA  0022               	movlb	2	; select bank2
  3054  02BB  0859               	movf	(_FactorC+1)^(0+256),w
  3055  02BC  0020               	movlb	0	; select bank0
  3056  02BD  00D3               	movwf	___ftmul@f2+1
  3057  02BE  0022               	movlb	2	; select bank2
  3058  02BF  085A               	movf	(_FactorC+2)^(0+256),w
  3059  02C0  0020               	movlb	0	; select bank0
  3060  02C1  00D4               	movwf	___ftmul@f2+2
  3061  02C2  318B  234F  3180   	fcall	___ftmul
  3062  02C5  0020               	movlb	0	; select bank0
  3063  02C6  084F               	movf	?___ftmul,w
  3064  02C7  00DF               	movwf	___ftadd@f1
  3065  02C8  0850               	movf	?___ftmul+1,w
  3066  02C9  00E0               	movwf	___ftadd@f1+1
  3067  02CA  0851               	movf	?___ftmul+2,w
  3068  02CB  00E1               	movwf	___ftadd@f1+2
  3069  02CC  0021               	movlb	1	; select bank1
  3070  02CD  0858               	movf	_main$1023^(0+128),w
  3071  02CE  0020               	movlb	0	; select bank0
  3072  02CF  00E2               	movwf	___ftadd@f2
  3073  02D0  0021               	movlb	1	; select bank1
  3074  02D1  0859               	movf	(_main$1023+1)^(0+128),w
  3075  02D2  0020               	movlb	0	; select bank0
  3076  02D3  00E3               	movwf	___ftadd@f2+1
  3077  02D4  0021               	movlb	1	; select bank1
  3078  02D5  085A               	movf	(_main$1023+2)^(0+128),w
  3079  02D6  0020               	movlb	0	; select bank0
  3080  02D7  00E4               	movwf	___ftadd@f2+2
  3081  02D8  318C  24C8  3180   	fcall	___ftadd
  3082  02DB  0020               	movlb	0	; select bank0
  3083  02DC  085F               	movf	?___ftadd,w
  3084  02DD  0021               	movlb	1	; select bank1
  3085  02DE  00DB               	movwf	_main$1024^(0+128)
  3086  02DF  0020               	movlb	0	; select bank0
  3087  02E0  0860               	movf	?___ftadd+1,w
  3088  02E1  0021               	movlb	1	; select bank1
  3089  02E2  00DC               	movwf	(_main$1024+1)^(0+128)
  3090  02E3  0020               	movlb	0	; select bank0
  3091  02E4  0861               	movf	?___ftadd+2,w
  3092  02E5  0021               	movlb	1	; select bank1
  3093  02E6  00DD               	movwf	(_main$1024+2)^(0+128)
  3094                           
  3095                           ;main.c: 187: TemporC2 = (double)FactorA*pow(ADC0mVolt2,3)+ (double)FactorB*pow(ADC0mVol
      +                          t2,2)+ (double)FactorC*(ADC0mVolt2) + FactorD;
  3096  02E7  0022               	movlb	2	; select bank2
  3097  02E8  0855               	movf	_FactorD^(0+256),w
  3098  02E9  0020               	movlb	0	; select bank0
  3099  02EA  00DF               	movwf	___ftadd@f1
  3100  02EB  0022               	movlb	2	; select bank2
  3101  02EC  0856               	movf	(_FactorD+1)^(0+256),w
  3102  02ED  0020               	movlb	0	; select bank0
  3103  02EE  00E0               	movwf	___ftadd@f1+1
  3104  02EF  0022               	movlb	2	; select bank2
  3105  02F0  0857               	movf	(_FactorD+2)^(0+256),w
  3106  02F1  0020               	movlb	0	; select bank0
  3107  02F2  00E1               	movwf	___ftadd@f1+2
  3108  02F3  0021               	movlb	1	; select bank1
  3109  02F4  085B               	movf	_main$1024^(0+128),w
  3110  02F5  0020               	movlb	0	; select bank0
  3111  02F6  00E2               	movwf	___ftadd@f2
  3112  02F7  0021               	movlb	1	; select bank1
  3113  02F8  085C               	movf	(_main$1024+1)^(0+128),w
  3114  02F9  0020               	movlb	0	; select bank0
  3115  02FA  00E3               	movwf	___ftadd@f2+1
  3116  02FB  0021               	movlb	1	; select bank1
  3117  02FC  085D               	movf	(_main$1024+2)^(0+128),w
  3118  02FD  0020               	movlb	0	; select bank0
  3119  02FE  00E4               	movwf	___ftadd@f2+2
  3120  02FF  318C  24C8  3180   	fcall	___ftadd
  3121  0302  0020               	movlb	0	; select bank0
  3122  0303  085F               	movf	?___ftadd,w
  3123  0304  0022               	movlb	2	; select bank2
  3124  0305  00A9               	movwf	_TemporC2^(0+256)
  3125  0306  0020               	movlb	0	; select bank0
  3126  0307  0860               	movf	?___ftadd+1,w
  3127  0308  0022               	movlb	2	; select bank2
  3128  0309  00AA               	movwf	(_TemporC2+1)^(0+256)
  3129  030A  0020               	movlb	0	; select bank0
  3130  030B  0861               	movf	?___ftadd+2,w
  3131  030C  0022               	movlb	2	; select bank2
  3132  030D  00AB               	movwf	(_TemporC2+2)^(0+256)
  3133                           
  3134                           ;main.c: 188: TempDIFF=(TemporC2-TemporC1+6)*100;
  3135  030E  0829               	movf	_TemporC2^(0+256),w
  3136  030F  0020               	movlb	0	; select bank0
  3137  0310  00DF               	movwf	___ftadd@f1
  3138  0311  0022               	movlb	2	; select bank2
  3139  0312  082A               	movf	(_TemporC2+1)^(0+256),w
  3140  0313  0020               	movlb	0	; select bank0
  3141  0314  00E0               	movwf	___ftadd@f1+1
  3142  0315  0022               	movlb	2	; select bank2
  3143  0316  082B               	movf	(_TemporC2+2)^(0+256),w
  3144  0317  0020               	movlb	0	; select bank0
  3145  0318  00E1               	movwf	___ftadd@f1+2
  3146  0319  0022               	movlb	2	; select bank2
  3147  031A  082C               	movf	_TemporC1^(0+256),w
  3148  031B  0020               	movlb	0	; select bank0
  3149  031C  00CC               	movwf	___ftneg@f1
  3150  031D  0022               	movlb	2	; select bank2
  3151  031E  082D               	movf	(_TemporC1+1)^(0+256),w
  3152  031F  0020               	movlb	0	; select bank0
  3153  0320  00CD               	movwf	___ftneg@f1+1
  3154  0321  0022               	movlb	2	; select bank2
  3155  0322  082E               	movf	(_TemporC1+2)^(0+256),w
  3156  0323  0020               	movlb	0	; select bank0
  3157  0324  00CE               	movwf	___ftneg@f1+2
  3158  0325  3194  24F9  3180   	fcall	___ftneg
  3159  0328  0020               	movlb	0	; select bank0
  3160  0329  084C               	movf	?___ftneg,w
  3161  032A  00E2               	movwf	___ftadd@f2
  3162  032B  084D               	movf	?___ftneg+1,w
  3163  032C  00E3               	movwf	___ftadd@f2+1
  3164  032D  084E               	movf	?___ftneg+2,w
  3165  032E  00E4               	movwf	___ftadd@f2+2
  3166  032F  318C  24C8  3180   	fcall	___ftadd
  3167  0332  0020               	movlb	0	; select bank0
  3168  0333  085F               	movf	?___ftadd,w
  3169  0334  0021               	movlb	1	; select bank1
  3170  0335  00CF               	movwf	_main$1025^(0+128)
  3171  0336  0020               	movlb	0	; select bank0
  3172  0337  0860               	movf	?___ftadd+1,w
  3173  0338  0021               	movlb	1	; select bank1
  3174  0339  00D0               	movwf	(_main$1025+1)^(0+128)
  3175  033A  0020               	movlb	0	; select bank0
  3176  033B  0861               	movf	?___ftadd+2,w
  3177  033C  0021               	movlb	1	; select bank1
  3178  033D  00D1               	movwf	(_main$1025+2)^(0+128)
  3179                           
  3180                           ;main.c: 188: TempDIFF=(TemporC2-TemporC1+6)*100;
  3181  033E  3000               	movlw	0
  3182  033F  0020               	movlb	0	; select bank0
  3183  0340  00CF               	movwf	___ftmul@f1
  3184  0341  30C8               	movlw	200
  3185  0342  00D0               	movwf	___ftmul@f1+1
  3186  0343  3042               	movlw	66
  3187  0344  00D1               	movwf	___ftmul@f1+2
  3188  0345  3000               	movlw	0
  3189  0346  00DF               	movwf	___ftadd@f1
  3190  0347  30C0               	movlw	192
  3191  0348  00E0               	movwf	___ftadd@f1+1
  3192  0349  3040               	movlw	64
  3193  034A  00E1               	movwf	___ftadd@f1+2
  3194  034B  0021               	movlb	1	; select bank1
  3195  034C  084F               	movf	_main$1025^(0+128),w
  3196  034D  0020               	movlb	0	; select bank0
  3197  034E  00E2               	movwf	___ftadd@f2
  3198  034F  0021               	movlb	1	; select bank1
  3199  0350  0850               	movf	(_main$1025+1)^(0+128),w
  3200  0351  0020               	movlb	0	; select bank0
  3201  0352  00E3               	movwf	___ftadd@f2+1
  3202  0353  0021               	movlb	1	; select bank1
  3203  0354  0851               	movf	(_main$1025+2)^(0+128),w
  3204  0355  0020               	movlb	0	; select bank0
  3205  0356  00E4               	movwf	___ftadd@f2+2
  3206  0357  318C  24C8  3180   	fcall	___ftadd
  3207  035A  0020               	movlb	0	; select bank0
  3208  035B  085F               	movf	?___ftadd,w
  3209  035C  00D2               	movwf	___ftmul@f2
  3210  035D  0860               	movf	?___ftadd+1,w
  3211  035E  00D3               	movwf	___ftmul@f2+1
  3212  035F  0861               	movf	?___ftadd+2,w
  3213  0360  00D4               	movwf	___ftmul@f2+2
  3214  0361  318B  234F  3180   	fcall	___ftmul
  3215  0364  0020               	movlb	0	; select bank0
  3216  0365  084F               	movf	?___ftmul,w
  3217  0366  0022               	movlb	2	; select bank2
  3218  0367  00A6               	movwf	_TempDIFF^(0+256)
  3219  0368  0020               	movlb	0	; select bank0
  3220  0369  0850               	movf	?___ftmul+1,w
  3221  036A  0022               	movlb	2	; select bank2
  3222  036B  00A7               	movwf	(_TempDIFF+1)^(0+256)
  3223  036C  0020               	movlb	0	; select bank0
  3224  036D  0851               	movf	?___ftmul+2,w
  3225  036E  0022               	movlb	2	; select bank2
  3226  036F  00A8               	movwf	(_TempDIFF+2)^(0+256)
  3227                           
  3228                           ;main.c: 192: TempDIFF *= 10000;
  3229  0370  3040               	movlw	64
  3230  0371  0020               	movlb	0	; select bank0
  3231  0372  00CF               	movwf	___ftmul@f1
  3232  0373  301C               	movlw	28
  3233  0374  00D0               	movwf	___ftmul@f1+1
  3234  0375  3046               	movlw	70
  3235  0376  00D1               	movwf	___ftmul@f1+2
  3236  0377  0022               	movlb	2	; select bank2
  3237  0378  0826               	movf	_TempDIFF^(0+256),w
  3238  0379  0020               	movlb	0	; select bank0
  3239  037A  00D2               	movwf	___ftmul@f2
  3240  037B  0022               	movlb	2	; select bank2
  3241  037C  0827               	movf	(_TempDIFF+1)^(0+256),w
  3242  037D  0020               	movlb	0	; select bank0
  3243  037E  00D3               	movwf	___ftmul@f2+1
  3244  037F  0022               	movlb	2	; select bank2
  3245  0380  0828               	movf	(_TempDIFF+2)^(0+256),w
  3246  0381  0020               	movlb	0	; select bank0
  3247  0382  00D4               	movwf	___ftmul@f2+2
  3248  0383  318B  234F  3180   	fcall	___ftmul
  3249  0386  0020               	movlb	0	; select bank0
  3250  0387  084F               	movf	?___ftmul,w
  3251  0388  0022               	movlb	2	; select bank2
  3252  0389  00A6               	movwf	_TempDIFF^(0+256)
  3253  038A  0020               	movlb	0	; select bank0
  3254  038B  0850               	movf	?___ftmul+1,w
  3255  038C  0022               	movlb	2	; select bank2
  3256  038D  00A7               	movwf	(_TempDIFF+1)^(0+256)
  3257  038E  0020               	movlb	0	; select bank0
  3258  038F  0851               	movf	?___ftmul+2,w
  3259  0390  0022               	movlb	2	; select bank2
  3260  0391  00A8               	movwf	(_TempDIFF+2)^(0+256)
  3261                           
  3262                           ;main.c: 193: temp = (double)TempDIFF;
  3263  0392  0826               	movf	_TempDIFF^(0+256),w
  3264  0393  00BB               	movwf	_temp^(0+256)
  3265  0394  0827               	movf	(_TempDIFF+1)^(0+256),w
  3266  0395  00BC               	movwf	(_temp+1)^(0+256)
  3267  0396  0828               	movf	(_TempDIFF+2)^(0+256),w
  3268  0397  00BD               	movwf	(_temp+2)^(0+256)
  3269                           
  3270                           ;main.c: 195: tens = temp/100000;
  3271  0398  083B               	movf	_temp^(0+256),w
  3272  0399  0020               	movlb	0	; select bank0
  3273  039A  00A9               	movwf	___ftdiv@f1
  3274  039B  0022               	movlb	2	; select bank2
  3275  039C  083C               	movf	(_temp+1)^(0+256),w
  3276  039D  0020               	movlb	0	; select bank0
  3277  039E  00AA               	movwf	___ftdiv@f1+1
  3278  039F  0022               	movlb	2	; select bank2
  3279  03A0  083D               	movf	(_temp+2)^(0+256),w
  3280  03A1  0020               	movlb	0	; select bank0
  3281  03A2  00AB               	movwf	___ftdiv@f1+2
  3282  03A3  3050               	movlw	80
  3283  03A4  00A6               	movwf	___ftdiv@f2
  3284  03A5  30C3               	movlw	195
  3285  03A6  00A7               	movwf	___ftdiv@f2+1
  3286  03A7  3047               	movlw	71
  3287  03A8  00A8               	movwf	___ftdiv@f2+2
  3288  03A9  318A  22A6  3180   	fcall	___ftdiv
  3289  03AC  0020               	movlb	0	; select bank0
  3290  03AD  0826               	movf	?___ftdiv,w
  3291  03AE  00B6               	movwf	___fttol@f1
  3292  03AF  0827               	movf	?___ftdiv+1,w
  3293  03B0  00B7               	movwf	___fttol@f1+1
  3294  03B1  0828               	movf	?___ftdiv+2,w
  3295  03B2  00B8               	movwf	___fttol@f1+2
  3296  03B3  3189  2185  3180   	fcall	___fttol
  3297  03B6  0020               	movlb	0	; select bank0
  3298  03B7  0837               	movf	?___fttol+1,w
  3299  03B8  0022               	movlb	2	; select bank2
  3300  03B9  00CF               	movwf	(_tens+1)^(0+256)
  3301  03BA  0020               	movlb	0	; select bank0
  3302  03BB  0836               	movf	?___fttol,w
  3303  03BC  0022               	movlb	2	; select bank2
  3304  03BD  00CE               	movwf	_tens^(0+256)
  3305                           
  3306                           ;main.c: 196: remainder = temp - tens*100000;
  3307  03BE  083B               	movf	_temp^(0+256),w
  3308  03BF  0020               	movlb	0	; select bank0
  3309  03C0  00DF               	movwf	___ftadd@f1
  3310  03C1  0022               	movlb	2	; select bank2
  3311  03C2  083C               	movf	(_temp+1)^(0+256),w
  3312  03C3  0020               	movlb	0	; select bank0
  3313  03C4  00E0               	movwf	___ftadd@f1+1
  3314  03C5  0022               	movlb	2	; select bank2
  3315  03C6  083D               	movf	(_temp+2)^(0+256),w
  3316  03C7  0020               	movlb	0	; select bank0
  3317  03C8  00E1               	movwf	___ftadd@f1+2
  3318  03C9  3000               	movlw	0
  3319  03CA  00F9               	movwf	___lmul@multiplicand+3
  3320  03CB  3001               	movlw	1
  3321  03CC  00F8               	movwf	___lmul@multiplicand+2
  3322  03CD  3086               	movlw	134
  3323  03CE  00F7               	movwf	___lmul@multiplicand+1
  3324  03CF  30A0               	movlw	160
  3325  03D0  00F6               	movwf	___lmul@multiplicand
  3326  03D1  0022               	movlb	2	; select bank2
  3327  03D2  084E               	movf	_tens^(0+256),w
  3328  03D3  00F2               	movwf	___lmul@multiplier
  3329  03D4  084F               	movf	(_tens+1)^(0+256),w
  3330  03D5  00F3               	movwf	___lmul@multiplier+1
  3331  03D6  0D89               	rlf	9,f
  3332  03D7  3B89               	subwfb	9,f
  3333  03D8  0989               	comf	9,f
  3334  03D9  00F4               	movwf	___lmul@multiplier+2
  3335  03DA  00F5               	movwf	___lmul@multiplier+3
  3336  03DB  3196  26E5  3180   	fcall	___lmul
  3337  03DE  0875               	movf	?___lmul+3,w
  3338  03DF  0020               	movlb	0	; select bank0
  3339  03E0  00C7               	movwf	___altoft@c+3
  3340  03E1  0874               	movf	?___lmul+2,w
  3341  03E2  00C6               	movwf	___altoft@c+2
  3342  03E3  0873               	movf	?___lmul+1,w
  3343  03E4  00C5               	movwf	___altoft@c+1
  3344  03E5  0872               	movf	?___lmul,w
  3345  03E6  00C4               	movwf	___altoft@c
  3346  03E7  3197  2786  3180   	fcall	___altoft
  3347  03EA  0020               	movlb	0	; select bank0
  3348  03EB  0844               	movf	?___altoft,w
  3349  03EC  00CC               	movwf	___ftneg@f1
  3350  03ED  0845               	movf	?___altoft+1,w
  3351  03EE  00CD               	movwf	___ftneg@f1+1
  3352  03EF  0846               	movf	?___altoft+2,w
  3353  03F0  00CE               	movwf	___ftneg@f1+2
  3354  03F1  3194  24F9  3180   	fcall	___ftneg
  3355  03F4  0020               	movlb	0	; select bank0
  3356  03F5  084C               	movf	?___ftneg,w
  3357  03F6  00E2               	movwf	___ftadd@f2
  3358  03F7  084D               	movf	?___ftneg+1,w
  3359  03F8  00E3               	movwf	___ftadd@f2+1
  3360  03F9  084E               	movf	?___ftneg+2,w
  3361  03FA  00E4               	movwf	___ftadd@f2+2
  3362  03FB  318C  24C8  3180   	fcall	___ftadd
  3363  03FE  0020               	movlb	0	; select bank0
  3364  03FF  085F               	movf	?___ftadd,w
  3365  0400  0022               	movlb	2	; select bank2
  3366  0401  00B8               	movwf	_remainder^(0+256)
  3367  0402  0020               	movlb	0	; select bank0
  3368  0403  0860               	movf	?___ftadd+1,w
  3369  0404  0022               	movlb	2	; select bank2
  3370  0405  00B9               	movwf	(_remainder+1)^(0+256)
  3371  0406  0020               	movlb	0	; select bank0
  3372  0407  0861               	movf	?___ftadd+2,w
  3373  0408  0022               	movlb	2	; select bank2
  3374  0409  00BA               	movwf	(_remainder+2)^(0+256)
  3375                           
  3376                           ;main.c: 197: units = remainder/10000;
  3377  040A  0838               	movf	_remainder^(0+256),w
  3378  040B  0020               	movlb	0	; select bank0
  3379  040C  00A9               	movwf	___ftdiv@f1
  3380  040D  0022               	movlb	2	; select bank2
  3381  040E  0839               	movf	(_remainder+1)^(0+256),w
  3382  040F  0020               	movlb	0	; select bank0
  3383  0410  00AA               	movwf	___ftdiv@f1+1
  3384  0411  0022               	movlb	2	; select bank2
  3385  0412  083A               	movf	(_remainder+2)^(0+256),w
  3386  0413  0020               	movlb	0	; select bank0
  3387  0414  00AB               	movwf	___ftdiv@f1+2
  3388  0415  3040               	movlw	64
  3389  0416  00A6               	movwf	___ftdiv@f2
  3390  0417  301C               	movlw	28
  3391  0418  00A7               	movwf	___ftdiv@f2+1
  3392  0419  3046               	movlw	70
  3393  041A  00A8               	movwf	___ftdiv@f2+2
  3394  041B  318A  22A6  3180   	fcall	___ftdiv
  3395  041E  0020               	movlb	0	; select bank0
  3396  041F  0826               	movf	?___ftdiv,w
  3397  0420  00B6               	movwf	___fttol@f1
  3398  0421  0827               	movf	?___ftdiv+1,w
  3399  0422  00B7               	movwf	___fttol@f1+1
  3400  0423  0828               	movf	?___ftdiv+2,w
  3401  0424  00B8               	movwf	___fttol@f1+2
  3402  0425  3189  2185  3180   	fcall	___fttol
  3403  0428  0020               	movlb	0	; select bank0
  3404  0429  0837               	movf	?___fttol+1,w
  3405  042A  0022               	movlb	2	; select bank2
  3406  042B  00CD               	movwf	(_units+1)^(0+256)
  3407  042C  0020               	movlb	0	; select bank0
  3408  042D  0836               	movf	?___fttol,w
  3409  042E  0022               	movlb	2	; select bank2
  3410  042F  00CC               	movwf	_units^(0+256)
  3411                           
  3412                           ;main.c: 206: sprintf(str8,"%d%d", tens,units );
  3413  0430  30B0               	movlw	low (STR_6| (0+32768))
  3414  0431  0020               	movlb	0	; select bank0
  3415  0432  00B5               	movwf	sprintf@f
  3416  0433  3098               	movlw	high (STR_6| (0+32768))
  3417  0434  00B6               	movwf	sprintf@f+1
  3418  0435  0022               	movlb	2	; select bank2
  3419  0436  084F               	movf	(_tens+1)^(0+256),w
  3420  0437  0020               	movlb	0	; select bank0
  3421  0438  00B8               	movwf	?_sprintf+3
  3422  0439  0022               	movlb	2	; select bank2
  3423  043A  084E               	movf	_tens^(0+256),w
  3424  043B  0020               	movlb	0	; select bank0
  3425  043C  00B7               	movwf	?_sprintf+2
  3426  043D  0022               	movlb	2	; select bank2
  3427  043E  084D               	movf	(_units+1)^(0+256),w
  3428  043F  0020               	movlb	0	; select bank0
  3429  0440  00BA               	movwf	?_sprintf+5
  3430  0441  0022               	movlb	2	; select bank2
  3431  0442  084C               	movf	_units^(0+256),w
  3432  0443  0020               	movlb	0	; select bank0
  3433  0444  00B9               	movwf	?_sprintf+4
  3434  0445  30DB               	movlw	(low (_str8| (0+256)))& (0+255)
  3435  0446  3195  25FE  3180   	fcall	_sprintf
  3436                           
  3437                           ;main.c: 208: printf("%s\n",str8);
  3438  0449  30B5               	movlw	low (STR_7| (0+32768))
  3439  044A  0020               	movlb	0	; select bank0
  3440  044B  00B5               	movwf	printf@f
  3441  044C  3098               	movlw	high (STR_7| (0+32768))
  3442  044D  00B6               	movwf	printf@f+1
  3443  044E  30DB               	movlw	low _str8
  3444  044F  00B7               	movwf	low ((?_printf| 0+2))
  3445  0450  3001               	movlw	high _str8
  3446  0451  00B8               	movwf	(low ((?_printf| 0+2))+1)
  3447  0452  3195  2546  3180   	fcall	_printf
  3448                           
  3449                           ;main.c: 210: SENSORID=0;
  3450  0455  0022               	movlb	2	; select bank2
  3451  0456  01C2               	clrf	_SENSORID^(0+256)
  3452  0457  01C3               	clrf	(_SENSORID+1)^(0+256)
  3453                           
  3454                           ;main.c: 211: sensor0=483;
  3455  0458  3080               	movlw	128
  3456  0459  00A3               	movwf	_sensor0^(0+256)
  3457  045A  30F1               	movlw	241
  3458  045B  00A4               	movwf	(_sensor0+1)^(0+256)
  3459  045C  3043               	movlw	67
  3460  045D  00A5               	movwf	(_sensor0+2)^(0+256)
  3461                           
  3462                           ;main.c: 213: char *c = str8;
  3463  045E  30DB               	movlw	(low (_str8| (0+256)))& (0+255)
  3464  045F  0021               	movlb	1	; select bank1
  3465  0460  00CA               	movwf	??_main^(0+128)
  3466  0461  084A               	movf	??_main^(0+128),w
  3467  0462  00E0               	movwf	main@c^(0+128)
  3468  0463                     l3842:	
  3469                           ;main.c: 214: for( ; *c ; c++ )
  3470                           
  3471  0463  0860               	movf	main@c^(0+128),w
  3472  0464  0086               	movwf	6
  3473  0465  3001               	movlw	1	; select bank2/3
  3474  0466  0087               	movwf	7
  3475  0467  0801               	movf	1,w
  3476  0468  1903               	btfsc	3,2
  3477  0469  2C8F               	goto	l3844
  3478                           
  3479                           ;main.c: 215: {
  3480                           ;main.c: 216: sendChar( *c );
  3481  046A  0860               	movf	main@c^(0+128),w
  3482  046B  0086               	movwf	6
  3483  046C  3001               	movlw	1	; select bank2/3
  3484  046D  0087               	movwf	7
  3485  046E  0801               	movf	1,w
  3486  046F  318E  26D4  3180   	fcall	_sendChar
  3487                           
  3488                           ;main.c: 217: printf("%c \n", *c );
  3489  0472  30AB               	movlw	low (STR_8| (0+32768))
  3490  0473  0020               	movlb	0	; select bank0
  3491  0474  00B5               	movwf	printf@f
  3492  0475  3098               	movlw	high (STR_8| (0+32768))
  3493  0476  00B6               	movwf	printf@f+1
  3494  0477  0021               	movlb	1	; select bank1
  3495  0478  0860               	movf	main@c^(0+128),w
  3496  0479  0086               	movwf	6
  3497  047A  3001               	movlw	1	; select bank2/3
  3498  047B  0087               	movwf	7
  3499  047C  0801               	movf	1,w
  3500  047D  00CA               	movwf	??_main^(0+128)
  3501  047E  01CB               	clrf	(??_main^(0+128)+1)
  3502  047F  084A               	movf	??_main^(0+128),w
  3503  0480  0020               	movlb	0	; select bank0
  3504  0481  00B7               	movwf	?_printf+2
  3505  0482  0021               	movlb	1	; select bank1
  3506  0483  084B               	movf	(??_main+1)^(0+128),w
  3507  0484  0020               	movlb	0	; select bank0
  3508  0485  00B8               	movwf	?_printf+3
  3509  0486  3195  2546  3180   	fcall	_printf
  3510  0489  3001               	movlw	1
  3511  048A  0021               	movlb	1	; select bank1
  3512  048B  00CA               	movwf	??_main^(0+128)
  3513  048C  084A               	movf	??_main^(0+128),w
  3514  048D  07E0               	addwf	main@c^(0+128),f
  3515  048E  2C63               	goto	l3842
  3516  048F                     l3844:	
  3517                           
  3518                           ;main.c: 218: }
  3519                           ;main.c: 237: if (sleep==1)
  3520  048F  0022               	movlb	2	; select bank2
  3521  0490  0340               	decf	_sleep^(0+256),w
  3522  0491  0441               	iorwf	(_sleep+1)^(0+256),w
  3523  0492  1D03               	btfss	3,2
  3524  0493  2C96               	goto	l3848
  3525  0494  0063               	sleep	;# 
  3526                           
  3527                           ;main.c: 240: }
  3528  0495  2881               	goto	l3776
  3529  0496                     l3848:	
  3530                           
  3531                           ;main.c: 241: else
  3532                           ;main.c: 242: {
  3533                           ;main.c: 243: int waitind;
  3534                           ;main.c: 244: for(waitind = 0; waitind<400; waitind++){
  3535  0496  0021               	movlb	1	; select bank1
  3536  0497  01DE               	clrf	main@waitind^(0+128)
  3537  0498  01DF               	clrf	(main@waitind+1)^(0+128)
  3538  0499                     L1:	
  3539  0499  085F               	movf	(main@waitind+1)^(0+128),w
  3540  049A  3A80               	xorlw	128
  3541  049B  00CA               	movwf	??_main^(0+128)
  3542  049C  3081               	movlw	129
  3543  049D  024A               	subwf	??_main^(0+128),w
  3544  049E  1D03               	skipz
  3545  049F  2CA2               	goto	u5045
  3546  04A0  3090               	movlw	144
  3547  04A1  025E               	subwf	main@waitind^(0+128),w
  3548  04A2                     u5045:	
  3549  04A2  1803               	btfsc	3,0
  3550  04A3  2881               	goto	l3776
  3551                           
  3552                           ;main.c: 245: __nop();
  3553  04A4  0000               	nop
  3554                           
  3555                           ;main.c: 246: __nop();
  3556  04A5  0000               	nop
  3557  04A6  3001               	movlw	1
  3558  04A7  0021               	movlb	1	; select bank1
  3559  04A8  07DE               	addwf	main@waitind^(0+128),f
  3560  04A9  3000               	movlw	0
  3561  04AA  3DDF               	addwfc	(main@waitind+1)^(0+128),f
  3562  04AB  2C99               	goto	L1
  3563  04AC                     __end_of_main:	
  3564                           
  3565                           	psect	text1
  3566  15FE                     __ptext1:	
  3567 ;; *************** function _sprintf *****************
  3568 ;; Defined at:
  3569 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprintf.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;  wh              1    wreg     PTR unsigned char 
  3572 ;;		 -> str8(6), 
  3573 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  3574 ;;		 -> STR_6(5), 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  wh              1   28[BANK0 ] PTR unsigned char 
  3577 ;;		 -> str8(6), 
  3578 ;;  pb              3   30[BANK0 ] struct __prbuf
  3579 ;;  ap              1   29[BANK0 ] PTR void [1]
  3580 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  2   21[BANK0 ] int 
  3583 ;; Registers used:
  3584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3590 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3591 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3593 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3594 ;;Total ram usage:       12 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    7
  3597 ;; This function calls:
  3598 ;;		__doprnt
  3599 ;; This function is called by:
  3600 ;;		_main
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           
  3605                           ;psect for function _sprintf
  3606  15FE                     _sprintf:	
  3607                           
  3608                           ;incstack = 0
  3609                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3610                           ;sprintf@wh stored from wreg
  3611  15FE  0020               	movlb	0	; select bank0
  3612  15FF  00BC               	movwf	sprintf@wh
  3613  1600  083C               	movf	sprintf@wh,w
  3614  1601  00BB               	movwf	??_sprintf
  3615  1602  083B               	movf	??_sprintf,w
  3616  1603  00BE               	movwf	sprintf@pb
  3617  1604  01BF               	clrf	low ((sprintf@pb| 0+1))
  3618  1605  01C0               	clrf	(low ((sprintf@pb| 0+1))+1)
  3619  1606  3037               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3620  1607  00BB               	movwf	??_sprintf
  3621  1608  083B               	movf	??_sprintf,w
  3622  1609  00BD               	movwf	sprintf@ap
  3623  160A  0836               	movf	sprintf@f+1,w
  3624  160B  00A7               	movwf	__doprnt@f+1
  3625  160C  0835               	movf	sprintf@f,w
  3626  160D  00A6               	movwf	__doprnt@f
  3627  160E  303D               	movlw	(low (sprintf@ap| 0))& (0+255)
  3628  160F  00BB               	movwf	??_sprintf
  3629  1610  083B               	movf	??_sprintf,w
  3630  1611  00A8               	movwf	__doprnt@ap
  3631  1612  303E               	movlw	(low (sprintf@pb| 0))& (0+255)
  3632  1613  3184  24AC         	fcall	__doprnt
  3633  1615  0020               	movlb	0	; select bank0
  3634  1616  083E               	movf	sprintf@pb,w
  3635  1617  0086               	movwf	6
  3636  1618  3001               	movlw	1	; select bank2/3
  3637  1619  0087               	movwf	7
  3638  161A  0181               	clrf	1
  3639  161B  0008               	return
  3640  161C                     __end_of_sprintf:	
  3641                           ;	Return value of _sprintf is never used
  3642                           
  3643                           
  3644                           	psect	text2
  3645  0ED4                     __ptext2:	
  3646 ;; *************** function _sendChar *****************
  3647 ;; Defined at:
  3648 ;;		line 306 in file "main.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  a               1    wreg     unsigned char 
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;  a               1    2[BANK0 ] unsigned char 
  3653 ;;  i               2    0[BANK0 ] int 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2, status,0, pclath, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3664 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3665 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3666 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3667 ;;Total ram usage:        4 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    5
  3670 ;; This function calls:
  3671 ;;		_dit_dah
  3672 ;; This function is called by:
  3673 ;;		_main
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           
  3678                           ;psect for function _sendChar
  3679  0ED4                     _sendChar:	
  3680                           
  3681                           ;incstack = 0
  3682                           ; Regs used in _sendChar: [wreg+status,2+status,0+pclath+cstack]
  3683                           ;sendChar@a stored from wreg
  3684  0ED4  0020               	movlb	0	; select bank0
  3685  0ED5  00A2               	movwf	sendChar@a
  3686                           
  3687                           ;main.c: 308: int i;
  3688                           ;main.c: 309: if (a=='0'){
  3689  0ED6  3030               	movlw	48
  3690  0ED7  0622               	xorwf	sendChar@a,w
  3691  0ED8  1D03               	btfss	3,2
  3692  0ED9  2EDC               	goto	l3706
  3693                           
  3694                           ;main.c: 310: dit_dah(3); dit_dah(3); dit_dah(3); dit_dah(3); dit_dah(3);}
  3695  0EDA  3003               	movlw	3
  3696  0EDB  2EE2               	goto	L23
  3697  0EDC                     l3706:	
  3698                           
  3699                           ;main.c: 311: else if (a=='1'){
  3700  0EDC  3031               	movlw	49
  3701  0EDD  0020               	movlb	0	; select bank0
  3702  0EDE  0622               	xorwf	sendChar@a,w
  3703  0EDF  1D03               	btfss	3,2
  3704  0EE0  2EEA               	goto	l3710
  3705                           
  3706                           ;main.c: 312: dit_dah(1);dit_dah(3); dit_dah(3); dit_dah(3); dit_dah(3);}
  3707  0EE1  3001               	movlw	1
  3708  0EE2                     L23:	
  3709  0EE2  00F2               	movwf	dit_dah@index
  3710  0EE3  3000               	movlw	0
  3711  0EE4  00F3               	movwf	dit_dah@index+1
  3712  0EE5  3189  2108  318E   	fcall	_dit_dah
  3713  0EE8  3003               	movlw	3
  3714  0EE9  2EF7               	goto	L18
  3715  0EEA                     l3710:	
  3716                           
  3717                           ;main.c: 313: else if (a=='2'){
  3718  0EEA  3032               	movlw	50
  3719  0EEB  0020               	movlb	0	; select bank0
  3720  0EEC  0622               	xorwf	sendChar@a,w
  3721  0EED  1D03               	btfss	3,2
  3722  0EEE  2EFF               	goto	l3714
  3723                           
  3724                           ;main.c: 314: dit_dah(1);dit_dah(1); dit_dah(3); dit_dah(3); dit_dah(3);}
  3725  0EEF  3001               	movlw	1
  3726  0EF0  00F2               	movwf	dit_dah@index
  3727  0EF1  3000               	movlw	0
  3728  0EF2  00F3               	movwf	dit_dah@index+1
  3729  0EF3  3189  2108  318E   	fcall	_dit_dah
  3730  0EF6  3001               	movlw	1
  3731  0EF7                     L18:	
  3732  0EF7  00F2               	movwf	dit_dah@index
  3733  0EF8  3000               	movlw	0
  3734  0EF9  00F3               	movwf	dit_dah@index+1
  3735  0EFA  3189  2108  318E   	fcall	_dit_dah
  3736  0EFD  3003               	movlw	3
  3737  0EFE  2F13               	goto	L12
  3738  0EFF                     l3714:	
  3739                           
  3740                           ;main.c: 315: else if (a=='3'){
  3741  0EFF  3033               	movlw	51
  3742  0F00  0020               	movlb	0	; select bank0
  3743  0F01  0622               	xorwf	sendChar@a,w
  3744  0F02  1D03               	btfss	3,2
  3745  0F03  2F1B               	goto	l3718
  3746                           
  3747                           ;main.c: 316: dit_dah(1);dit_dah(1); dit_dah(1); dit_dah(3); dit_dah(3);}
  3748  0F04  3001               	movlw	1
  3749  0F05  00F2               	movwf	dit_dah@index
  3750  0F06  3000               	movlw	0
  3751  0F07  00F3               	movwf	dit_dah@index+1
  3752  0F08  3189  2108  318E   	fcall	_dit_dah
  3753  0F0B  3001               	movlw	1
  3754  0F0C  00F2               	movwf	dit_dah@index
  3755  0F0D  3000               	movlw	0
  3756  0F0E  00F3               	movwf	dit_dah@index+1
  3757  0F0F  3189  2108  318E   	fcall	_dit_dah
  3758  0F12  3001               	movlw	1
  3759  0F13                     L12:	
  3760  0F13  00F2               	movwf	dit_dah@index
  3761  0F14  3000               	movlw	0
  3762  0F15  00F3               	movwf	dit_dah@index+1
  3763  0F16  3189  2108  318E   	fcall	_dit_dah
  3764  0F19  3003               	movlw	3
  3765  0F1A  2FC7               	goto	L2
  3766  0F1B                     l3718:	
  3767                           
  3768                           ;main.c: 317: else if (a=='4'){
  3769  0F1B  3034               	movlw	52
  3770  0F1C  0020               	movlb	0	; select bank0
  3771  0F1D  0622               	xorwf	sendChar@a,w
  3772  0F1E  1903               	btfsc	3,2
  3773  0F1F  2F95               	goto	L16
  3774                           
  3775                           ;main.c: 319: else if (a=='5'){
  3776                           
  3777                           ;main.c: 318: dit_dah(1);dit_dah(1); dit_dah(1); dit_dah(1); dit_dah(3);}
  3778  0F20  3035               	movlw	53
  3779  0F21  0020               	movlb	0	; select bank0
  3780  0F22  0622               	xorwf	sendChar@a,w
  3781  0F23  1D03               	btfss	3,2
  3782  0F24  2F27               	goto	l3726
  3783                           
  3784                           ;main.c: 320: dit_dah(1);dit_dah(1); dit_dah(1);dit_dah(1); dit_dah(1);}
  3785  0F25  3001               	movlw	1
  3786  0F26  2F2D               	goto	L26
  3787  0F27                     l3726:	
  3788                           
  3789                           ;main.c: 321: else if (a=='6'){
  3790  0F27  3036               	movlw	54
  3791  0F28  0020               	movlb	0	; select bank0
  3792  0F29  0622               	xorwf	sendChar@a,w
  3793  0F2A  1D03               	btfss	3,2
  3794  0F2B  2F35               	goto	l3730
  3795                           
  3796                           ;main.c: 322: dit_dah(3);dit_dah(1); dit_dah(1);dit_dah(1); dit_dah(1);}
  3797  0F2C  3003               	movlw	3
  3798  0F2D                     L26:	
  3799  0F2D  00F2               	movwf	dit_dah@index
  3800  0F2E  3000               	movlw	0
  3801  0F2F  00F3               	movwf	dit_dah@index+1
  3802  0F30  3189  2108  318E   	fcall	_dit_dah
  3803  0F33  3001               	movlw	1
  3804  0F34  2F42               	goto	L24
  3805  0F35                     l3730:	
  3806                           
  3807                           ;main.c: 323: else if (a=='7'){
  3808  0F35  3037               	movlw	55
  3809  0F36  0020               	movlb	0	; select bank0
  3810  0F37  0622               	xorwf	sendChar@a,w
  3811  0F38  1D03               	btfss	3,2
  3812  0F39  2F4A               	goto	l3734
  3813                           
  3814                           ;main.c: 324: dit_dah(3);dit_dah(3); dit_dah(1);dit_dah(1); dit_dah(1);}
  3815  0F3A  3003               	movlw	3
  3816  0F3B  00F2               	movwf	dit_dah@index
  3817  0F3C  3000               	movlw	0
  3818  0F3D  00F3               	movwf	dit_dah@index+1
  3819  0F3E  3189  2108  318E   	fcall	_dit_dah
  3820  0F41  3003               	movlw	3
  3821  0F42                     L24:	
  3822  0F42  00F2               	movwf	dit_dah@index
  3823  0F43  3000               	movlw	0
  3824  0F44  00F3               	movwf	dit_dah@index+1
  3825  0F45  3189  2108  318E   	fcall	_dit_dah
  3826  0F48  3001               	movlw	1
  3827  0F49  2F5E               	goto	L20
  3828  0F4A                     l3734:	
  3829                           
  3830                           ;main.c: 325: else if (a=='8'){
  3831  0F4A  3038               	movlw	56
  3832  0F4B  0020               	movlb	0	; select bank0
  3833  0F4C  0622               	xorwf	sendChar@a,w
  3834  0F4D  1D03               	btfss	3,2
  3835  0F4E  2F66               	goto	l3738
  3836                           
  3837                           ;main.c: 326: dit_dah(3);dit_dah(3); dit_dah(3);dit_dah(1); dit_dah(1);}
  3838  0F4F  3003               	movlw	3
  3839  0F50  00F2               	movwf	dit_dah@index
  3840  0F51  3000               	movlw	0
  3841  0F52  00F3               	movwf	dit_dah@index+1
  3842  0F53  3189  2108  318E   	fcall	_dit_dah
  3843  0F56  3003               	movlw	3
  3844  0F57  00F2               	movwf	dit_dah@index
  3845  0F58  3000               	movlw	0
  3846  0F59  00F3               	movwf	dit_dah@index+1
  3847  0F5A  3189  2108  318E   	fcall	_dit_dah
  3848  0F5D  3003               	movlw	3
  3849  0F5E                     L20:	
  3850  0F5E  00F2               	movwf	dit_dah@index
  3851  0F5F  3000               	movlw	0
  3852  0F60  00F3               	movwf	dit_dah@index+1
  3853  0F61  3189  2108  318E   	fcall	_dit_dah
  3854  0F64  3001               	movlw	1
  3855  0F65  2F81               	goto	L14
  3856  0F66                     l3738:	
  3857                           
  3858                           ;main.c: 327: else if (a=='9'){
  3859  0F66  3039               	movlw	57
  3860  0F67  0020               	movlb	0	; select bank0
  3861  0F68  0622               	xorwf	sendChar@a,w
  3862  0F69  1D03               	btfss	3,2
  3863  0F6A  2F89               	goto	l3742
  3864                           
  3865                           ;main.c: 328: dit_dah(3);dit_dah(3); dit_dah(3);dit_dah(3); dit_dah(1);}
  3866  0F6B  3003               	movlw	3
  3867  0F6C  00F2               	movwf	dit_dah@index
  3868  0F6D  3000               	movlw	0
  3869  0F6E  00F3               	movwf	dit_dah@index+1
  3870  0F6F  3189  2108  318E   	fcall	_dit_dah
  3871  0F72  3003               	movlw	3
  3872  0F73  00F2               	movwf	dit_dah@index
  3873  0F74  3000               	movlw	0
  3874  0F75  00F3               	movwf	dit_dah@index+1
  3875  0F76  3189  2108  318E   	fcall	_dit_dah
  3876  0F79  3003               	movlw	3
  3877  0F7A  00F2               	movwf	dit_dah@index
  3878  0F7B  3000               	movlw	0
  3879  0F7C  00F3               	movwf	dit_dah@index+1
  3880  0F7D  3189  2108  318E   	fcall	_dit_dah
  3881  0F80  3003               	movlw	3
  3882  0F81                     L14:	
  3883  0F81  00F2               	movwf	dit_dah@index
  3884  0F82  3000               	movlw	0
  3885  0F83  00F3               	movwf	dit_dah@index+1
  3886  0F84  3189  2108  318E   	fcall	_dit_dah
  3887  0F87  3001               	movlw	1
  3888  0F88  2FCE               	goto	L3
  3889  0F89                     l3742:	
  3890                           
  3891                           ;main.c: 329: else if (a=='-'){
  3892  0F89  302D               	movlw	45
  3893  0F8A  0020               	movlb	0	; select bank0
  3894  0F8B  0622               	xorwf	sendChar@a,w
  3895  0F8C  1D03               	btfss	3,2
  3896  0F8D  2FA5               	goto	l3746
  3897                           
  3898                           ;main.c: 330: dit_dah(3); dit_dah(1); dit_dah(1); dit_dah(1); dit_dah(1); dit_dah(3);
  3899  0F8E  3003               	movlw	3
  3900  0F8F  00F2               	movwf	dit_dah@index
  3901  0F90  3000               	movlw	0
  3902  0F91  00F3               	movwf	dit_dah@index+1
  3903  0F92  3189  2108  318E   	fcall	_dit_dah
  3904  0F95                     L16:	
  3905  0F95  3001               	movlw	1
  3906  0F96  00F2               	movwf	dit_dah@index
  3907  0F97  3000               	movlw	0
  3908  0F98  00F3               	movwf	dit_dah@index+1
  3909  0F99  3189  2108  318E   	fcall	_dit_dah
  3910  0F9C  3001               	movlw	1
  3911  0F9D  00F2               	movwf	dit_dah@index
  3912  0F9E  3000               	movlw	0
  3913  0F9F  00F3               	movwf	dit_dah@index+1
  3914  0FA0  3189  2108  318E   	fcall	_dit_dah
  3915  0FA3  3001               	movlw	1
  3916  0FA4  2FC0               	goto	L7
  3917  0FA5                     l3746:	
  3918                           ;main.c: 331: }
  3919                           
  3920                           
  3921                           ;main.c: 332: else if (a=='.'){
  3922  0FA5  302E               	movlw	46
  3923  0FA6  0020               	movlb	0	; select bank0
  3924  0FA7  0622               	xorwf	sendChar@a,w
  3925  0FA8  1D03               	btfss	3,2
  3926  0FA9  2FD4               	goto	l3750
  3927                           
  3928                           ;main.c: 333: dit_dah(1);dit_dah(3); dit_dah(1); dit_dah(3); dit_dah(1); dit_dah(3);
  3929  0FAA  3001               	movlw	1
  3930  0FAB  00F2               	movwf	dit_dah@index
  3931  0FAC  3000               	movlw	0
  3932  0FAD  00F3               	movwf	dit_dah@index+1
  3933  0FAE  3189  2108  318E   	fcall	_dit_dah
  3934  0FB1  3003               	movlw	3
  3935  0FB2  00F2               	movwf	dit_dah@index
  3936  0FB3  3000               	movlw	0
  3937  0FB4  00F3               	movwf	dit_dah@index+1
  3938  0FB5  3189  2108  318E   	fcall	_dit_dah
  3939  0FB8  3001               	movlw	1
  3940  0FB9  00F2               	movwf	dit_dah@index
  3941  0FBA  3000               	movlw	0
  3942  0FBB  00F3               	movwf	dit_dah@index+1
  3943  0FBC  3189  2108  318E   	fcall	_dit_dah
  3944  0FBF  3003               	movlw	3
  3945  0FC0                     L7:	
  3946  0FC0  00F2               	movwf	dit_dah@index
  3947  0FC1  3000               	movlw	0
  3948  0FC2  00F3               	movwf	dit_dah@index+1
  3949  0FC3  3189  2108  318E   	fcall	_dit_dah
  3950  0FC6  3001               	movlw	1
  3951  0FC7                     L2:	
  3952  0FC7  00F2               	movwf	dit_dah@index
  3953  0FC8  3000               	movlw	0
  3954  0FC9  00F3               	movwf	dit_dah@index+1
  3955  0FCA  3189  2108  318E   	fcall	_dit_dah
  3956  0FCD  3003               	movlw	3
  3957  0FCE                     L3:	
  3958  0FCE  00F2               	movwf	dit_dah@index
  3959  0FCF  3000               	movlw	0
  3960  0FD0  00F3               	movwf	dit_dah@index+1
  3961  0FD1  3189  2108  318E   	fcall	_dit_dah
  3962  0FD4                     l3750:	
  3963                           
  3964                           ;main.c: 334: }
  3965                           ;main.c: 337: for(i = 0; i < delay; ++i){
  3966  0FD4  0020               	movlb	0	; select bank0
  3967  0FD5  01A0               	clrf	sendChar@i
  3968  0FD6  01A1               	clrf	sendChar@i+1
  3969  0FD7                     l387:	
  3970  0FD7  0821               	movf	sendChar@i+1,w
  3971  0FD8  3A80               	xorlw	128
  3972  0FD9  00F7               	movwf	??_sendChar
  3973  0FDA  087B               	movf	_delay+1,w
  3974  0FDB  3A80               	xorlw	128
  3975  0FDC  0277               	subwf	??_sendChar,w
  3976  0FDD  1D03               	skipz
  3977  0FDE  2FE1               	goto	u4995
  3978  0FDF  087A               	movf	_delay,w
  3979  0FE0  0220               	subwf	sendChar@i,w
  3980  0FE1                     u4995:	
  3981  0FE1  1803               	btfsc	3,0
  3982  0FE2  2FEA               	goto	l3754
  3983                           
  3984                           ;main.c: 338: __nop();
  3985  0FE3  0000               	nop
  3986  0FE4  3001               	movlw	1
  3987  0FE5  0020               	movlb	0	; select bank0
  3988  0FE6  07A0               	addwf	sendChar@i,f
  3989  0FE7  3000               	movlw	0
  3990  0FE8  3DA1               	addwfc	sendChar@i+1,f
  3991  0FE9  2FD7               	goto	l387
  3992  0FEA                     l3754:	
  3993                           
  3994                           ;main.c: 340: }
  3995                           ;main.c: 341: for(i = 0; i < delay; ++i){
  3996  0FEA  0020               	movlb	0	; select bank0
  3997  0FEB  01A0               	clrf	sendChar@i
  3998  0FEC  01A1               	clrf	sendChar@i+1
  3999  0FED                     l390:	
  4000  0FED  0821               	movf	sendChar@i+1,w
  4001  0FEE  3A80               	xorlw	128
  4002  0FEF  00F7               	movwf	??_sendChar
  4003  0FF0  087B               	movf	_delay+1,w
  4004  0FF1  3A80               	xorlw	128
  4005  0FF2  0277               	subwf	??_sendChar,w
  4006  0FF3  1D03               	skipz
  4007  0FF4  2FF7               	goto	u5005
  4008  0FF5  087A               	movf	_delay,w
  4009  0FF6  0220               	subwf	sendChar@i,w
  4010  0FF7                     u5005:	
  4011  0FF7  1803               	btfsc	3,0
  4012  0FF8  0008               	return
  4013                           
  4014                           ;main.c: 342: __nop();
  4015  0FF9  0000               	nop
  4016  0FFA  3001               	movlw	1
  4017  0FFB  0020               	movlb	0	; select bank0
  4018  0FFC  07A0               	addwf	sendChar@i,f
  4019  0FFD  3000               	movlw	0
  4020  0FFE  3DA1               	addwfc	sendChar@i+1,f
  4021  0FFF  2FED               	goto	l390
  4022  1000                     __end_of_sendChar:	
  4023                           
  4024                           	psect	text3
  4025  0908                     __ptext3:	
  4026 ;; *************** function _dit_dah *****************
  4027 ;; Defined at:
  4028 ;;		line 267 in file "main.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  index           2    2[COMMON] int 
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;  i               2    5[COMMON] int 
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  1    wreg      void 
  4035 ;; Registers used:
  4036 ;;		wreg, status,2, status,0
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4045 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4046 ;;Total ram usage:        5 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    4
  4049 ;; This function calls:
  4050 ;;		Nothing
  4051 ;; This function is called by:
  4052 ;;		_sendChar
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           
  4057                           ;psect for function _dit_dah
  4058  0908                     _dit_dah:	
  4059                           
  4060                           ;main.c: 270: int i;
  4061                           ;main.c: 271: LATC4=1;
  4062                           
  4063                           ;incstack = 0
  4064                           ; Regs used in _dit_dah: [wreg+status,2+status,0]
  4065  0908  0022               	movlb	2	; select bank2
  4066  0909  160E               	bsf	14,4	;volatile
  4067                           
  4068                           ;main.c: 272: if (index==1)
  4069  090A  0372               	decf	dit_dah@index,w
  4070  090B  0473               	iorwf	dit_dah@index+1,w
  4071  090C  1D03               	btfss	3,2
  4072  090D  2925               	goto	l3446
  4073                           
  4074                           ;main.c: 273: {
  4075                           ;main.c: 274: for(i = 0; i < delay; ++i)
  4076  090E  01F5               	clrf	dit_dah@i
  4077  090F  01F6               	clrf	dit_dah@i+1
  4078  0910                     l345:	
  4079  0910  0876               	movf	dit_dah@i+1,w
  4080  0911  3A80               	xorlw	128
  4081  0912  00F4               	movwf	??_dit_dah
  4082  0913  087B               	movf	_delay+1,w
  4083  0914  3A80               	xorlw	128
  4084  0915  0274               	subwf	??_dit_dah,w
  4085  0916  1D03               	skipz
  4086  0917  291A               	goto	u4485
  4087  0918  087A               	movf	_delay,w
  4088  0919  0275               	subwf	dit_dah@i,w
  4089  091A                     u4485:	
  4090  091A  1803               	btfsc	3,0
  4091  091B  2925               	goto	l3446
  4092                           
  4093                           ;main.c: 275: {
  4094                           ;main.c: 276: __nop();
  4095  091C  0000               	nop
  4096                           
  4097                           ;main.c: 277: LATC4=~LATC4;
  4098  091D  3010               	movlw	16
  4099  091E  0022               	movlb	2	; select bank2
  4100  091F  068E               	xorwf	14,f
  4101  0920  3001               	movlw	1
  4102  0921  07F5               	addwf	dit_dah@i,f
  4103  0922  3000               	movlw	0
  4104  0923  3DF6               	addwfc	dit_dah@i+1,f
  4105  0924  2910               	goto	l345
  4106  0925                     l3446:	
  4107                           
  4108                           ;main.c: 278: }
  4109                           ;main.c: 279: }
  4110                           ;main.c: 280: if(index==3)
  4111  0925  3003               	movlw	3
  4112  0926  0672               	xorwf	dit_dah@index,w
  4113  0927  0473               	iorwf	dit_dah@index+1,w
  4114  0928  1D03               	btfss	3,2
  4115  0929  296F               	goto	l348
  4116                           
  4117                           ;main.c: 281: {
  4118                           ;main.c: 282: for(i = 0; i < delay; ++i)
  4119  092A  01F5               	clrf	dit_dah@i
  4120  092B  01F6               	clrf	dit_dah@i+1
  4121  092C                     l349:	
  4122  092C  0876               	movf	dit_dah@i+1,w
  4123  092D  3A80               	xorlw	128
  4124  092E  00F4               	movwf	??_dit_dah
  4125  092F  087B               	movf	_delay+1,w
  4126  0930  3A80               	xorlw	128
  4127  0931  0274               	subwf	??_dit_dah,w
  4128  0932  1D03               	skipz
  4129  0933  2936               	goto	u4505
  4130  0934  087A               	movf	_delay,w
  4131  0935  0275               	subwf	dit_dah@i,w
  4132  0936                     u4505:	
  4133  0936  1803               	btfsc	3,0
  4134  0937  2941               	goto	l3452
  4135                           
  4136                           ;main.c: 283: {
  4137                           ;main.c: 284: __nop();
  4138  0938  0000               	nop
  4139                           
  4140                           ;main.c: 285: LATC4=~LATC4;
  4141  0939  3010               	movlw	16
  4142  093A  0022               	movlb	2	; select bank2
  4143  093B  068E               	xorwf	14,f
  4144  093C  3001               	movlw	1
  4145  093D  07F5               	addwf	dit_dah@i,f
  4146  093E  3000               	movlw	0
  4147  093F  3DF6               	addwfc	dit_dah@i+1,f
  4148  0940  292C               	goto	l349
  4149  0941                     l3452:	
  4150                           
  4151                           ;main.c: 286: }
  4152                           ;main.c: 287: for(i = 0; i < delay; ++i)
  4153  0941  01F5               	clrf	dit_dah@i
  4154  0942  01F6               	clrf	dit_dah@i+1
  4155  0943                     l352:	
  4156  0943  0876               	movf	dit_dah@i+1,w
  4157  0944  3A80               	xorlw	128
  4158  0945  00F4               	movwf	??_dit_dah
  4159  0946  087B               	movf	_delay+1,w
  4160  0947  3A80               	xorlw	128
  4161  0948  0274               	subwf	??_dit_dah,w
  4162  0949  1D03               	skipz
  4163  094A  294D               	goto	u4515
  4164  094B  087A               	movf	_delay,w
  4165  094C  0275               	subwf	dit_dah@i,w
  4166  094D                     u4515:	
  4167  094D  1803               	btfsc	3,0
  4168  094E  2958               	goto	l3456
  4169                           
  4170                           ;main.c: 288: {
  4171                           ;main.c: 289: __nop();
  4172  094F  0000               	nop
  4173                           
  4174                           ;main.c: 290: LATC4=~LATC4;
  4175  0950  3010               	movlw	16
  4176  0951  0022               	movlb	2	; select bank2
  4177  0952  068E               	xorwf	14,f
  4178  0953  3001               	movlw	1
  4179  0954  07F5               	addwf	dit_dah@i,f
  4180  0955  3000               	movlw	0
  4181  0956  3DF6               	addwfc	dit_dah@i+1,f
  4182  0957  2943               	goto	l352
  4183  0958                     l3456:	
  4184                           
  4185                           ;main.c: 291: }
  4186                           ;main.c: 292: for(i = 0; i < delay; ++i)
  4187  0958  01F5               	clrf	dit_dah@i
  4188  0959  01F6               	clrf	dit_dah@i+1
  4189  095A                     l355:	
  4190  095A  0876               	movf	dit_dah@i+1,w
  4191  095B  3A80               	xorlw	128
  4192  095C  00F4               	movwf	??_dit_dah
  4193  095D  087B               	movf	_delay+1,w
  4194  095E  3A80               	xorlw	128
  4195  095F  0274               	subwf	??_dit_dah,w
  4196  0960  1D03               	skipz
  4197  0961  2964               	goto	u4525
  4198  0962  087A               	movf	_delay,w
  4199  0963  0275               	subwf	dit_dah@i,w
  4200  0964                     u4525:	
  4201  0964  1803               	btfsc	3,0
  4202  0965  296F               	goto	l348
  4203                           
  4204                           ;main.c: 293: {
  4205                           ;main.c: 294: __nop();
  4206  0966  0000               	nop
  4207                           
  4208                           ;main.c: 295: LATC4=~LATC4;
  4209  0967  3010               	movlw	16
  4210  0968  0022               	movlb	2	; select bank2
  4211  0969  068E               	xorwf	14,f
  4212  096A  3001               	movlw	1
  4213  096B  07F5               	addwf	dit_dah@i,f
  4214  096C  3000               	movlw	0
  4215  096D  3DF6               	addwfc	dit_dah@i+1,f
  4216  096E  295A               	goto	l355
  4217  096F                     l348:	
  4218                           
  4219                           ;main.c: 296: }
  4220                           ;main.c: 297: }
  4221                           ;main.c: 298: LATC4=0;
  4222  096F  0022               	movlb	2	; select bank2
  4223  0970  120E               	bcf	14,4	;volatile
  4224                           
  4225                           ;main.c: 299: for(i = 0; i < delay; ++i)
  4226  0971  01F5               	clrf	dit_dah@i
  4227  0972  01F6               	clrf	dit_dah@i+1
  4228  0973                     l358:	
  4229  0973  0876               	movf	dit_dah@i+1,w
  4230  0974  3A80               	xorlw	128
  4231  0975  00F4               	movwf	??_dit_dah
  4232  0976  087B               	movf	_delay+1,w
  4233  0977  3A80               	xorlw	128
  4234  0978  0274               	subwf	??_dit_dah,w
  4235  0979  1D03               	skipz
  4236  097A  297D               	goto	u4535
  4237  097B  087A               	movf	_delay,w
  4238  097C  0275               	subwf	dit_dah@i,w
  4239  097D                     u4535:	
  4240  097D  1803               	btfsc	3,0
  4241  097E  0008               	return
  4242                           
  4243                           ;main.c: 300: {
  4244                           ;main.c: 301: __nop();
  4245  097F  0000               	nop
  4246  0980  3001               	movlw	1
  4247  0981  07F5               	addwf	dit_dah@i,f
  4248  0982  3000               	movlw	0
  4249  0983  3DF6               	addwfc	dit_dah@i+1,f
  4250  0984  2973               	goto	l358
  4251  0985                     __end_of_dit_dah:	
  4252                           
  4253                           	psect	text4
  4254  1546                     __ptext4:	
  4255 ;; *************** function _printf *****************
  4256 ;; Defined at:
  4257 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\printf.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4260 ;;		 -> STR_8(5), STR_7(4), STR_5(7), 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  pb              3   27[BANK0 ] struct __prbuf
  4263 ;;  ap              1   26[BANK0 ] PTR void [1]
  4264 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  2   21[BANK0 ] int 
  4267 ;; Registers used:
  4268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4274 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;Total ram usage:        9 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    7
  4281 ;; This function calls:
  4282 ;;		__doprnt
  4283 ;; This function is called by:
  4284 ;;		_main
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _printf
  4290  1546                     _printf:	
  4291                           
  4292                           ;incstack = 0
  4293                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4294  1546  0020               	movlb	0	; select bank0
  4295  1547  01BB               	clrf	printf@pb
  4296  1548  30FB               	movlw	low _putch
  4297  1549  00BC               	movwf	low ((printf@pb| 0+1))
  4298  154A  3007               	movlw	high _putch
  4299  154B  00BD               	movwf	(low ((printf@pb| 0+1))+1)
  4300  154C  3037               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4301  154D  00B9               	movwf	??_printf
  4302  154E  0839               	movf	??_printf,w
  4303  154F  00BA               	movwf	printf@ap
  4304                           
  4305                           ;	Return value of _printf is never used
  4306  1550  0836               	movf	printf@f+1,w
  4307  1551  00A7               	movwf	__doprnt@f+1
  4308  1552  0835               	movf	printf@f,w
  4309  1553  00A6               	movwf	__doprnt@f
  4310  1554  303A               	movlw	(low (printf@ap| 0))& (0+255)
  4311  1555  00B9               	movwf	??_printf
  4312  1556  0839               	movf	??_printf,w
  4313  1557  00A8               	movwf	__doprnt@ap
  4314  1558  303B               	movlw	(low (printf@pb| 0))& (0+255)
  4315  1559  3184  24AC         	fcall	__doprnt
  4316  155B  0008               	return
  4317  155C                     __end_of_printf:	
  4318                           
  4319                           	psect	text5
  4320  04AC                     __ptext5:	
  4321 ;; *************** function __doprnt *****************
  4322 ;; Defined at:
  4323 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  pb              1    wreg     PTR struct __prbuf
  4326 ;;		 -> sprintf@pb(3), printf@pb(3), 
  4327 ;;  f               2    6[BANK0 ] PTR const unsigned char 
  4328 ;;		 -> STR_8(5), STR_7(4), STR_6(5), STR_5(7), 
  4329 ;;  ap              1    8[BANK0 ] PTR PTR void 
  4330 ;;		 -> sprintf@ap(1), printf@ap(1), 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  pb              1   20[BANK0 ] PTR struct __prbuf
  4333 ;;		 -> sprintf@pb(3), printf@pb(3), 
  4334 ;;  tmpval          4    0        struct .
  4335 ;;  cp              2   17[BANK0 ] PTR const unsigned char 
  4336 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_9(7), 
  4337 ;;		 -> str8(6), 
  4338 ;;  val             2   15[BANK0 ] unsigned int 
  4339 ;;  len             2    0        unsigned int 
  4340 ;;  c               1   19[BANK0 ] char 
  4341 ;;  prec            1   14[BANK0 ] char 
  4342 ;;  flag            1   13[BANK0 ] unsigned char 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  2    6[BANK0 ] int 
  4345 ;; Registers used:
  4346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:       15 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    6
  4359 ;; This function calls:
  4360 ;;		Absolute function
  4361 ;;		___lwdiv
  4362 ;;		___lwmod
  4363 ;;		_putch
  4364 ;; This function is called by:
  4365 ;;		_printf
  4366 ;;		_sprintf
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           
  4371                           ;psect for function __doprnt
  4372  04AC                     __doprnt:	
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in __doprnt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4376                           ;__doprnt@pb stored from wreg
  4377  04AC  0020               	movlb	0	; select bank0
  4378  04AD  00B4               	movwf	__doprnt@pb
  4379  04AE                     l3556:	
  4380                           ;doprnt.c: 499: signed char c;
  4381                           ;doprnt.c: 506: signed char prec;
  4382                           ;doprnt.c: 508: unsigned char flag;
  4383                           ;doprnt.c: 523: union {
  4384                           ;doprnt.c: 524: unsigned long vd;
  4385                           ;doprnt.c: 525: double integ;
  4386                           ;doprnt.c: 526: } tmpval;
  4387                           ;doprnt.c: 528: unsigned int val;
  4388                           ;doprnt.c: 529: unsigned len;
  4389                           ;doprnt.c: 530: const char * cp;
  4390                           ;doprnt.c: 536: while(c = *f++) {
  4391                           
  4392  04AE  0020               	movlb	0	; select bank0
  4393  04AF  0827               	movf	__doprnt@f+1,w
  4394  04B0  00AA               	movwf	??__doprnt+1
  4395  04B1  0826               	movf	__doprnt@f,w
  4396  04B2  00A9               	movwf	??__doprnt
  4397  04B3  0AA6               	incf	__doprnt@f,f
  4398  04B4  1903               	skipnz
  4399  04B5  0AA7               	incf	__doprnt@f+1,f
  4400  04B6  0829               	movf	??__doprnt,w
  4401  04B7  0084               	movwf	4
  4402  04B8  082A               	movf	??__doprnt+1,w
  4403  04B9  0085               	movwf	5
  4404  04BA  0800               	movf	0,w	;code access
  4405  04BB  00AB               	movwf	??__doprnt+2
  4406  04BC  082B               	movf	??__doprnt+2,w
  4407  04BD  00B3               	movwf	__doprnt@c
  4408  04BE  0833               	movf	__doprnt@c,w
  4409  04BF  1903               	btfsc	3,2
  4410  04C0  2E43               	goto	l3558
  4411                           
  4412                           ;doprnt.c: 538: if(c != '%')
  4413  04C1  3025               	movlw	37
  4414  04C2  0633               	xorwf	__doprnt@c,w
  4415  04C3  1903               	btfsc	3,2
  4416  04C4  2CD9               	goto	l3476
  4417                           
  4418                           ;doprnt.c: 540: {
  4419                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4420  04C5  0A34               	incf	__doprnt@pb,w
  4421  04C6  0086               	movwf	6
  4422  04C7  0187               	clrf	7
  4423  04C8  0016               	moviw fsr1++
  4424  04C9  0401               	iorwf	1,w
  4425  04CA  1903               	btfsc	3,2
  4426  04CB  2D4E               	goto	l3504
  4427  04CC  0833               	movf	__doprnt@c,w
  4428  04CD  00A9               	movwf	??__doprnt
  4429  04CE  0829               	movf	??__doprnt,w
  4430  04CF  00F4               	movwf	putch@txData
  4431  04D0  0A34               	incf	__doprnt@pb,w
  4432  04D1  0086               	movwf	6
  4433  04D2  0187               	clrf	7
  4434  04D3  3F41               	moviw [1]fsr1
  4435  04D4  008A               	movwf	10
  4436  04D5  3F40               	moviw [0]fsr1
  4437  04D6  000A               	callw
  4438  04D7  3184               	pagesel	$
  4439  04D8  2CAE               	goto	l3556
  4440  04D9                     l3476:	
  4441                           ;doprnt.c: 542: continue;
  4442                           
  4443                           
  4444                           ;doprnt.c: 543: }
  4445                           ;doprnt.c: 548: flag = 0;
  4446  04D9  01AD               	clrf	__doprnt@flag
  4447                           
  4448                           ;doprnt.c: 635: switch(c = *f++) {
  4449  04DA  2D62               	goto	l3510
  4450  04DB                     l3478:	
  4451                           ;doprnt.c: 728: case 's':
  4452                           
  4453                           ;doprnt.c: 698: case 'i':
  4454                           ;doprnt.c: 699: break;
  4455                           
  4456                           ;doprnt.c: 697: case 'd':
  4457                           
  4458                           ;doprnt.c: 638: goto alldone;
  4459                           
  4460                           ;doprnt.c: 637: case 0:
  4461                           
  4462                           
  4463                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4464  04DB  0828               	movf	__doprnt@ap,w
  4465  04DC  0086               	movwf	6
  4466  04DD  0187               	clrf	7
  4467  04DE  0801               	movf	1,w
  4468  04DF  0084               	movwf	4
  4469  04E0  0185               	clrf	5
  4470  04E1  3002               	movlw	2
  4471  04E2  0781               	addwf	1,f
  4472  04E3  3F00               	moviw [0]fsr0
  4473  04E4  00B1               	movwf	__doprnt@cp
  4474  04E5  3F01               	moviw [1]fsr0
  4475  04E6  00B2               	movwf	__doprnt@cp+1
  4476                           
  4477                           ;doprnt.c: 740: if(!cp)
  4478  04E7  0831               	movf	__doprnt@cp,w
  4479  04E8  0432               	iorwf	__doprnt@cp+1,w
  4480  04E9  1D03               	btfss	3,2
  4481  04EA  2CEF               	goto	l3496
  4482                           
  4483                           ;doprnt.c: 741: cp = "(null)";
  4484  04EB  309D               	movlw	low (STR_9| (0+32768))
  4485  04EC  00B1               	movwf	__doprnt@cp
  4486  04ED  3098               	movlw	high (STR_9| (0+32768))
  4487  04EE  00B2               	movwf	__doprnt@cp+1
  4488  04EF                     l3496:	
  4489                           ;doprnt.c: 777: while(*cp)
  4490                           
  4491  04EF  0831               	movf	__doprnt@cp,w
  4492  04F0  0084               	movwf	4
  4493  04F1  0832               	movf	__doprnt@cp+1,w
  4494  04F2  0085               	movwf	5
  4495  04F3  0012               	moviw fsr0++
  4496  04F4  1903               	btfsc	3,2
  4497  04F5  2CAE               	goto	l3556
  4498                           
  4499                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4500  04F6  0A34               	incf	__doprnt@pb,w
  4501  04F7  0086               	movwf	6
  4502  04F8  0187               	clrf	7
  4503  04F9  0016               	moviw fsr1++
  4504  04FA  0401               	iorwf	1,w
  4505  04FB  1903               	btfsc	3,2
  4506  04FC  2D13               	goto	l3490
  4507  04FD  0831               	movf	__doprnt@cp,w
  4508  04FE  0084               	movwf	4
  4509  04FF  0832               	movf	__doprnt@cp+1,w
  4510  0500  0085               	movwf	5
  4511  0501  0800               	movf	0,w	;code access
  4512  0502  00A9               	movwf	??__doprnt
  4513  0503  0829               	movf	??__doprnt,w
  4514  0504  00F4               	movwf	putch@txData
  4515  0505  0A34               	incf	__doprnt@pb,w
  4516  0506  0086               	movwf	6
  4517  0507  0187               	clrf	7
  4518  0508  3F41               	moviw [1]fsr1
  4519  0509  008A               	movwf	10
  4520  050A  3F40               	moviw [0]fsr1
  4521  050B  000A               	callw
  4522  050C  3184               	pagesel	$
  4523  050D  3001               	movlw	1
  4524  050E  0020               	movlb	0	; select bank0
  4525  050F  07B1               	addwf	__doprnt@cp,f
  4526  0510  3000               	movlw	0
  4527  0511  3DB2               	addwfc	__doprnt@cp+1,f
  4528  0512  2CEF               	goto	l3496
  4529  0513                     l3490:	
  4530  0513  0831               	movf	__doprnt@cp,w
  4531  0514  0084               	movwf	4
  4532  0515  0832               	movf	__doprnt@cp+1,w
  4533  0516  0085               	movwf	5
  4534  0517  0800               	movf	0,w	;code access
  4535  0518  00A9               	movwf	??__doprnt
  4536  0519  0834               	movf	__doprnt@pb,w
  4537  051A  0086               	movwf	6
  4538  051B  0187               	clrf	7
  4539  051C  0801               	movf	1,w
  4540  051D  0086               	movwf	6
  4541  051E  3001               	movlw	1	; select bank2/3
  4542  051F  0087               	movwf	7
  4543  0520  0829               	movf	??__doprnt,w
  4544  0521  0081               	movwf	1
  4545  0522  3001               	movlw	1
  4546  0523  07B1               	addwf	__doprnt@cp,f
  4547  0524  3000               	movlw	0
  4548  0525  3DB2               	addwfc	__doprnt@cp+1,f
  4549  0526  3001               	movlw	1
  4550  0527  00A9               	movwf	??__doprnt
  4551  0528  0834               	movf	__doprnt@pb,w
  4552  0529  0086               	movwf	6
  4553  052A  0187               	clrf	7
  4554  052B  0829               	movf	??__doprnt,w
  4555  052C  0781               	addwf	1,f
  4556  052D  2CEF               	goto	l3496
  4557  052E                     l3498:	
  4558                           ;doprnt.c: 784: case 'c':
  4559                           
  4560                           ;doprnt.c: 779: continue;
  4561                           
  4562                           
  4563                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4564  052E  0828               	movf	__doprnt@ap,w
  4565  052F  0086               	movwf	6
  4566  0530  0187               	clrf	7
  4567  0531  0801               	movf	1,w
  4568  0532  0084               	movwf	4
  4569  0533  0185               	clrf	5
  4570  0534  3002               	movlw	2
  4571  0535  0781               	addwf	1,f
  4572  0536  0800               	movf	0,w
  4573  0537  00A9               	movwf	??__doprnt
  4574  0538  0829               	movf	??__doprnt,w
  4575  0539  00B3               	movwf	__doprnt@c
  4576  053A                     l3500:	
  4577                           ;doprnt.c: 802: default:
  4578                           
  4579                           
  4580                           ;doprnt.c: 809: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4581  053A  0A34               	incf	__doprnt@pb,w
  4582  053B  0086               	movwf	6
  4583  053C  0187               	clrf	7
  4584  053D  0016               	moviw fsr1++
  4585  053E  0401               	iorwf	1,w
  4586  053F  1903               	btfsc	3,2
  4587  0540  2D4E               	goto	l3504
  4588  0541  0833               	movf	__doprnt@c,w
  4589  0542  00A9               	movwf	??__doprnt
  4590  0543  0829               	movf	??__doprnt,w
  4591  0544  00F4               	movwf	putch@txData
  4592  0545  0A34               	incf	__doprnt@pb,w
  4593  0546  0086               	movwf	6
  4594  0547  0187               	clrf	7
  4595  0548  3F41               	moviw [1]fsr1
  4596  0549  008A               	movwf	10
  4597  054A  3F40               	moviw [0]fsr1
  4598  054B  000A               	callw
  4599  054C  3184               	pagesel	$
  4600  054D  2CAE               	goto	l3556
  4601  054E                     l3504:	
  4602  054E  0020               	movlb	0	; select bank0
  4603  054F  0833               	movf	__doprnt@c,w
  4604  0550  00A9               	movwf	??__doprnt
  4605  0551  0834               	movf	__doprnt@pb,w
  4606  0552  0086               	movwf	6
  4607  0553  0187               	clrf	7
  4608  0554  0801               	movf	1,w
  4609  0555  0086               	movwf	6
  4610  0556  3001               	movlw	1	; select bank2/3
  4611  0557  0087               	movwf	7
  4612  0558  0829               	movf	??__doprnt,w
  4613  0559  0081               	movwf	1
  4614  055A  3001               	movlw	1
  4615  055B  00A9               	movwf	??__doprnt
  4616  055C  0834               	movf	__doprnt@pb,w
  4617  055D  0086               	movwf	6
  4618  055E  0187               	clrf	7
  4619  055F  0829               	movf	??__doprnt,w
  4620  0560  0781               	addwf	1,f
  4621                           
  4622                           ;doprnt.c: 810: continue;
  4623  0561  2CAE               	goto	l3556
  4624  0562                     l3510:	
  4625                           ;doprnt.c: 822: }
  4626                           
  4627  0562  0827               	movf	__doprnt@f+1,w
  4628  0563  00AA               	movwf	??__doprnt+1
  4629  0564  0826               	movf	__doprnt@f,w
  4630  0565  00A9               	movwf	??__doprnt
  4631  0566  0AA6               	incf	__doprnt@f,f
  4632  0567  1903               	skipnz
  4633  0568  0AA7               	incf	__doprnt@f+1,f
  4634  0569  0829               	movf	??__doprnt,w
  4635  056A  0084               	movwf	4
  4636  056B  082A               	movf	??__doprnt+1,w
  4637  056C  0085               	movwf	5
  4638  056D  0800               	movf	0,w	;code access
  4639  056E  00B3               	movwf	__doprnt@c
  4640                           
  4641                           ; Switch size 1, requested type "space"
  4642                           ; Number of cases is 5, Range of values is 0 to 115
  4643                           ; switch strategies available:
  4644                           ; Name         Instructions Cycles
  4645                           ; simple_byte           16     9 (average)
  4646                           ; direct_byte          238     6 (fixed)
  4647                           ; jumptable            260     6 (fixed)
  4648                           ;	Chosen strategy is simple_byte
  4649  056F  3A00               	xorlw	0	; case 0
  4650  0570  1903               	skipnz
  4651  0571  2E43               	goto	l3558
  4652  0572  3A63               	xorlw	99	; case 99
  4653  0573  1903               	skipnz
  4654  0574  2D2E               	goto	l3498
  4655  0575  3A07               	xorlw	7	; case 100
  4656  0576  1903               	skipnz
  4657  0577  2D7F               	goto	l3512
  4658  0578  3A0D               	xorlw	13	; case 105
  4659  0579  1903               	skipnz
  4660  057A  2D7F               	goto	l3512
  4661  057B  3A1A               	xorlw	26	; case 115
  4662  057C  1903               	skipnz
  4663  057D  2CDB               	goto	l3478
  4664  057E  2D3A               	goto	l3500
  4665  057F                     l3512:	
  4666                           
  4667                           ;doprnt.c: 1253: {
  4668                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4669  057F  0828               	movf	__doprnt@ap,w
  4670  0580  0086               	movwf	6
  4671  0581  0187               	clrf	7
  4672  0582  0801               	movf	1,w
  4673  0583  0084               	movwf	4
  4674  0584  0185               	clrf	5
  4675  0585  3002               	movlw	2
  4676  0586  0781               	addwf	1,f
  4677  0587  3F00               	moviw [0]fsr0
  4678  0588  00AF               	movwf	__doprnt@val
  4679  0589  3F01               	moviw [1]fsr0
  4680  058A  00B0               	movwf	__doprnt@val+1
  4681                           
  4682                           ;doprnt.c: 1261: if((int)val < 0) {
  4683  058B  1FB0               	btfss	__doprnt@val+1,7
  4684  058C  2D96               	goto	l3520
  4685                           
  4686                           ;doprnt.c: 1262: flag |= 0x03;
  4687  058D  3003               	movlw	3
  4688  058E  00A9               	movwf	??__doprnt
  4689  058F  0829               	movf	??__doprnt,w
  4690  0590  04AD               	iorwf	__doprnt@flag,f
  4691                           
  4692                           ;doprnt.c: 1263: val = -val;
  4693  0591  09AF               	comf	__doprnt@val,f
  4694  0592  09B0               	comf	__doprnt@val+1,f
  4695  0593  0AAF               	incf	__doprnt@val,f
  4696  0594  1903               	skipnz
  4697  0595  0AB0               	incf	__doprnt@val+1,f
  4698  0596                     l3520:	
  4699                           
  4700                           ;doprnt.c: 1264: }
  4701                           ;doprnt.c: 1266: }
  4702                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4703  0596  01B3               	clrf	__doprnt@c
  4704  0597  0AB3               	incf	__doprnt@c,f
  4705  0598  3005               	movlw	5
  4706  0599  0633               	xorwf	__doprnt@c,w
  4707  059A  1903               	btfsc	3,2
  4708  059B  2DBB               	goto	l3532
  4709  059C                     l3526:	
  4710                           
  4711                           ;doprnt.c: 1306: if(val < dpowers[c])
  4712  059C  0833               	movf	__doprnt@c,w
  4713  059D  00A9               	movwf	??__doprnt
  4714  059E  01AA               	clrf	??__doprnt+1
  4715  059F  35A9               	lslf	??__doprnt,f
  4716  05A0  0DAA               	rlf	??__doprnt+1,f
  4717  05A1  3089               	movlw	low (_dpowers| (0+32768))
  4718  05A2  0729               	addwf	??__doprnt,w
  4719  05A3  0084               	movwf	4
  4720  05A4  3098               	movlw	high (_dpowers| (0+32768))
  4721  05A5  3D2A               	addwfc	??__doprnt+1,w
  4722  05A6  0085               	movwf	5
  4723  05A7  3F00               	moviw [0]fsr0
  4724  05A8  00AB               	movwf	??__doprnt+2
  4725  05A9  3F01               	moviw [1]fsr0
  4726  05AA  00AC               	movwf	??__doprnt+3
  4727  05AB  082C               	movf	??__doprnt+3,w
  4728  05AC  0230               	subwf	__doprnt@val+1,w
  4729  05AD  1D03               	skipz
  4730  05AE  2DB1               	goto	u4625
  4731  05AF  082B               	movf	??__doprnt+2,w
  4732  05B0  022F               	subwf	__doprnt@val,w
  4733  05B1                     u4625:	
  4734  05B1  1C03               	btfss	3,0
  4735  05B2  2DBB               	goto	l3532
  4736                           
  4737                           ;doprnt.c: 1307: break;
  4738  05B3  3001               	movlw	1
  4739  05B4  00A9               	movwf	??__doprnt
  4740  05B5  0829               	movf	??__doprnt,w
  4741  05B6  07B3               	addwf	__doprnt@c,f
  4742  05B7  3005               	movlw	5
  4743  05B8  0633               	xorwf	__doprnt@c,w
  4744  05B9  1D03               	btfss	3,2
  4745  05BA  2D9C               	goto	l3526
  4746  05BB                     l3532:	
  4747                           
  4748                           ;doprnt.c: 1422: {
  4749                           ;doprnt.c: 1438: if(flag & 0x03)
  4750  05BB  082D               	movf	__doprnt@flag,w
  4751  05BC  3903               	andlw	3
  4752  05BD  1903               	btfsc	3,2
  4753  05BE  2DE6               	goto	l3542
  4754                           
  4755                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4756  05BF  0A34               	incf	__doprnt@pb,w
  4757  05C0  0086               	movwf	6
  4758  05C1  0187               	clrf	7
  4759  05C2  0016               	moviw fsr1++
  4760  05C3  0401               	iorwf	1,w
  4761  05C4  1903               	btfsc	3,2
  4762  05C5  2DD3               	goto	l3538
  4763  05C6  302D               	movlw	45
  4764  05C7  00A9               	movwf	??__doprnt
  4765  05C8  0829               	movf	??__doprnt,w
  4766  05C9  00F4               	movwf	putch@txData
  4767  05CA  0A34               	incf	__doprnt@pb,w
  4768  05CB  0086               	movwf	6
  4769  05CC  0187               	clrf	7
  4770  05CD  3F41               	moviw [1]fsr1
  4771  05CE  008A               	movwf	10
  4772  05CF  3F40               	moviw [0]fsr1
  4773  05D0  000A               	callw
  4774  05D1  3184               	pagesel	$
  4775  05D2  2DE6               	goto	l3542
  4776  05D3                     l3538:	
  4777  05D3  302D               	movlw	45
  4778  05D4  0020               	movlb	0	; select bank0
  4779  05D5  00A9               	movwf	??__doprnt
  4780  05D6  0834               	movf	__doprnt@pb,w
  4781  05D7  0086               	movwf	6
  4782  05D8  0187               	clrf	7
  4783  05D9  0801               	movf	1,w
  4784  05DA  0086               	movwf	6
  4785  05DB  3001               	movlw	1	; select bank2/3
  4786  05DC  0087               	movwf	7
  4787  05DD  0829               	movf	??__doprnt,w
  4788  05DE  0081               	movwf	1
  4789  05DF  3001               	movlw	1
  4790  05E0  00A9               	movwf	??__doprnt
  4791  05E1  0834               	movf	__doprnt@pb,w
  4792  05E2  0086               	movwf	6
  4793  05E3  0187               	clrf	7
  4794  05E4  0829               	movf	??__doprnt,w
  4795  05E5  0781               	addwf	1,f
  4796  05E6                     l3542:	
  4797                           
  4798                           ;doprnt.c: 1469: }
  4799                           ;doprnt.c: 1472: prec = c;
  4800  05E6  0020               	movlb	0	; select bank0
  4801  05E7  0833               	movf	__doprnt@c,w
  4802  05E8  00A9               	movwf	??__doprnt
  4803  05E9  0829               	movf	??__doprnt,w
  4804  05EA  00AE               	movwf	__doprnt@prec
  4805  05EB                     l3554:	
  4806                           ;doprnt.c: 1474: while(prec--) {
  4807                           
  4808  05EB  30FF               	movlw	255
  4809  05EC  0020               	movlb	0	; select bank0
  4810  05ED  00A9               	movwf	??__doprnt
  4811  05EE  0829               	movf	??__doprnt,w
  4812  05EF  07AE               	addwf	__doprnt@prec,f
  4813  05F0  0A2E               	incf	__doprnt@prec,w
  4814  05F1  1903               	btfsc	3,2
  4815  05F2  2CAE               	goto	l3556
  4816                           
  4817                           ;doprnt.c: 1478: {
  4818                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4819  05F3  300A               	movlw	10
  4820  05F4  00A0               	movwf	___lwmod@divisor
  4821  05F5  3000               	movlw	0
  4822  05F6  00A1               	movwf	___lwmod@divisor+1
  4823  05F7  082E               	movf	__doprnt@prec,w
  4824  05F8  00A9               	movwf	??__doprnt
  4825  05F9  01AA               	clrf	??__doprnt+1
  4826  05FA  35A9               	lslf	??__doprnt,f
  4827  05FB  0DAA               	rlf	??__doprnt+1,f
  4828  05FC  3089               	movlw	low (_dpowers| (0+32768))
  4829  05FD  0729               	addwf	??__doprnt,w
  4830  05FE  0084               	movwf	4
  4831  05FF  3098               	movlw	high (_dpowers| (0+32768))
  4832  0600  3D2A               	addwfc	??__doprnt+1,w
  4833  0601  0085               	movwf	5
  4834  0602  3F00               	moviw [0]fsr0
  4835  0603  00F2               	movwf	___lwdiv@divisor
  4836  0604  3F01               	moviw [1]fsr0
  4837  0605  00F3               	movwf	___lwdiv@divisor+1
  4838  0606  0830               	movf	__doprnt@val+1,w
  4839  0607  00F5               	movwf	___lwdiv@dividend+1
  4840  0608  082F               	movf	__doprnt@val,w
  4841  0609  00F4               	movwf	___lwdiv@dividend
  4842  060A  3197  2717  3184   	fcall	___lwdiv
  4843  060D  0873               	movf	?___lwdiv+1,w
  4844  060E  0020               	movlb	0	; select bank0
  4845  060F  00A3               	movwf	___lwmod@dividend+1
  4846  0610  0872               	movf	?___lwdiv,w
  4847  0611  00A2               	movwf	___lwmod@dividend
  4848  0612  3196  268A  3184   	fcall	___lwmod
  4849  0615  0020               	movlb	0	; select bank0
  4850  0616  0820               	movf	?___lwmod,w
  4851  0617  3E30               	addlw	48
  4852  0618  00AB               	movwf	??__doprnt+2
  4853  0619  082B               	movf	??__doprnt+2,w
  4854  061A  00B3               	movwf	__doprnt@c
  4855                           
  4856                           ;doprnt.c: 1523: }
  4857                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4858  061B  0A34               	incf	__doprnt@pb,w
  4859  061C  0086               	movwf	6
  4860  061D  0187               	clrf	7
  4861  061E  0016               	moviw fsr1++
  4862  061F  0401               	iorwf	1,w
  4863  0620  1903               	btfsc	3,2
  4864  0621  2E2F               	goto	l3550
  4865  0622  0833               	movf	__doprnt@c,w
  4866  0623  00A9               	movwf	??__doprnt
  4867  0624  0829               	movf	??__doprnt,w
  4868  0625  00F4               	movwf	putch@txData
  4869  0626  0A34               	incf	__doprnt@pb,w
  4870  0627  0086               	movwf	6
  4871  0628  0187               	clrf	7
  4872  0629  3F41               	moviw [1]fsr1
  4873  062A  008A               	movwf	10
  4874  062B  3F40               	moviw [0]fsr1
  4875  062C  000A               	callw
  4876  062D  3184               	pagesel	$
  4877  062E  2DEB               	goto	l3554
  4878  062F                     l3550:	
  4879  062F  0020               	movlb	0	; select bank0
  4880  0630  0833               	movf	__doprnt@c,w
  4881  0631  00A9               	movwf	??__doprnt
  4882  0632  0834               	movf	__doprnt@pb,w
  4883  0633  0086               	movwf	6
  4884  0634  0187               	clrf	7
  4885  0635  0801               	movf	1,w
  4886  0636  0086               	movwf	6
  4887  0637  3001               	movlw	1	; select bank2/3
  4888  0638  0087               	movwf	7
  4889  0639  0829               	movf	??__doprnt,w
  4890  063A  0081               	movwf	1
  4891  063B  3001               	movlw	1
  4892  063C  00A9               	movwf	??__doprnt
  4893  063D  0834               	movf	__doprnt@pb,w
  4894  063E  0086               	movwf	6
  4895  063F  0187               	clrf	7
  4896  0640  0829               	movf	??__doprnt,w
  4897  0641  0781               	addwf	1,f
  4898  0642  2DEB               	goto	l3554
  4899  0643                     l3558:	
  4900                           ;doprnt.c: 1525: }
  4901                           ;doprnt.c: 1533: }
  4902                           ;doprnt.c: 1535: alldone:
  4903                           
  4904                           
  4905                           ;doprnt.c: 1540: return 0;
  4906  0643  01A6               	clrf	?__doprnt
  4907  0644  01A7               	clrf	?__doprnt+1
  4908  0645  0008               	return
  4909  0646                     __end_of__doprnt:	
  4910                           
  4911                           	psect	text6
  4912  07FB                     __ptext6:	
  4913 ;; *************** function _putch *****************
  4914 ;; Defined at:
  4915 ;;		line 160 in file "mcc_generated_files/eusart.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  txData          1    4[COMMON] unsigned char 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      void 
  4922 ;; Registers used:
  4923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4929 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;Total ram usage:        1 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    5
  4936 ;; This function calls:
  4937 ;;		_EUSART_Write
  4938 ;; This function is called by:
  4939 ;;		_printf
  4940 ;;		__doprnt
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function _putch
  4946  07FB                     _putch:	
  4947                           
  4948                           ;eusart.c: 162: EUSART_Write(txData);
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4952  07FB  0874               	movf	putch@txData,w
  4953  07FC  3196  263E         	fcall	_EUSART_Write
  4954  07FE  0008               	return
  4955  07FF                     __end_of_putch:	
  4956                           
  4957                           	psect	text7
  4958  163E                     __ptext7:	
  4959 ;; *************** function _EUSART_Write *****************
  4960 ;; Defined at:
  4961 ;;		line 132 in file "mcc_generated_files/eusart.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;  txData          1    wreg     unsigned char 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  txData          1    3[COMMON] unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  1    wreg      void 
  4968 ;; Registers used:
  4969 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;Total ram usage:        2 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    4
  4982 ;; This function calls:
  4983 ;;		Nothing
  4984 ;; This function is called by:
  4985 ;;		_putch
  4986 ;; This function uses a non-reentrant model
  4987 ;;
  4988                           
  4989                           
  4990                           ;psect for function _EUSART_Write
  4991  163E                     _EUSART_Write:	
  4992                           
  4993                           ;incstack = 0
  4994                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4995                           ;EUSART_Write@txData stored from wreg
  4996  163E  00F3               	movwf	EUSART_Write@txData
  4997  163F                     l2058:	
  4998                           ;eusart.c: 135: {
  4999                           
  5000                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  5001                           
  5002  163F  0021               	movlb	1	; select bank1
  5003  1640  086C               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  5004  1641  1903               	btfsc	3,2
  5005  1642  2E3F               	goto	l2058
  5006                           
  5007                           ;eusart.c: 136: }
  5008                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  5009  1643  1A11               	btfsc	17,4	;volatile
  5010  1644  2E49               	goto	l196
  5011                           
  5012                           ;eusart.c: 139: {
  5013                           ;eusart.c: 140: TXREG = txData;
  5014  1645  0873               	movf	EUSART_Write@txData,w
  5015  1646  0023               	movlb	3	; select bank3
  5016  1647  009A               	movwf	26	;volatile
  5017                           
  5018                           ;eusart.c: 141: }
  5019  1648  2E5D               	goto	l2072
  5020  1649                     l196:	
  5021                           
  5022                           ;eusart.c: 142: else
  5023                           ;eusart.c: 143: {
  5024                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  5025  1649  1211               	bcf	17,4	;volatile
  5026                           
  5027                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  5028  164A  0873               	movf	EUSART_Write@txData,w
  5029  164B  00F2               	movwf	??_EUSART_Write
  5030  164C  086E               	movf	_eusartTxHead^(0+128),w
  5031  164D  3ECD               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  5032  164E  0086               	movwf	6
  5033  164F  3001               	movlw	1	; select bank3/4
  5034  1650  0087               	movwf	7
  5035  1651  0872               	movf	??_EUSART_Write,w
  5036  1652  0081               	movwf	1
  5037  1653  3001               	movlw	1
  5038  1654  00F2               	movwf	??_EUSART_Write
  5039  1655  0872               	movf	??_EUSART_Write,w
  5040  1656  07EE               	addwf	_eusartTxHead^(0+128),f	;volatile
  5041                           
  5042                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5043  1657  3008               	movlw	8
  5044  1658  026E               	subwf	_eusartTxHead^(0+128),w	;volatile
  5045  1659  1803               	btfsc	3,0
  5046                           
  5047                           ;eusart.c: 147: {
  5048                           ;eusart.c: 148: eusartTxHead = 0;
  5049  165A  01EE               	clrf	_eusartTxHead^(0+128)	;volatile
  5050                           
  5051                           ;eusart.c: 149: }
  5052                           ;eusart.c: 150: eusartTxBufferRemaining--;
  5053  165B  3001               	movlw	1
  5054  165C  02EC               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  5055  165D                     l2072:	
  5056                           
  5057                           ;eusart.c: 151: }
  5058                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  5059  165D  0021               	movlb	1	; select bank1
  5060  165E  1611               	bsf	17,4	;volatile
  5061  165F  0008               	return
  5062  1660                     __end_of_EUSART_Write:	
  5063                           
  5064                           	psect	text8
  5065  168A                     __ptext8:	
  5066 ;; *************** function ___lwmod *****************
  5067 ;; Defined at:
  5068 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  divisor         2    0[BANK0 ] unsigned int 
  5071 ;;  dividend        2    2[BANK0 ] unsigned int 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  counter         1    5[BANK0 ] unsigned char 
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  2    0[BANK0 ] unsigned int 
  5076 ;; Registers used:
  5077 ;;		wreg, status,2, status,0
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5083 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;Total ram usage:        6 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    4
  5090 ;; This function calls:
  5091 ;;		Nothing
  5092 ;; This function is called by:
  5093 ;;		__doprnt
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function ___lwmod
  5099  168A                     ___lwmod:	
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5103  168A  0020               	movlb	0	; select bank0
  5104  168B  0820               	movf	___lwmod@divisor,w
  5105  168C  0421               	iorwf	___lwmod@divisor+1,w
  5106  168D  1903               	btfsc	3,2
  5107  168E  2EB2               	goto	l3358
  5108  168F  01A5               	clrf	___lwmod@counter
  5109  1690  0AA5               	incf	___lwmod@counter,f
  5110  1691                     l3348:	
  5111  1691  1BA1               	btfsc	___lwmod@divisor+1,7
  5112  1692  2E9D               	goto	l3350
  5113  1693  3001               	movlw	1
  5114  1694                     u4335:	
  5115  1694  35A0               	lslf	___lwmod@divisor,f
  5116  1695  0DA1               	rlf	___lwmod@divisor+1,f
  5117  1696  0B89               	decfsz	9,f
  5118  1697  2E94               	goto	u4335
  5119  1698  3001               	movlw	1
  5120  1699  00A4               	movwf	??___lwmod
  5121  169A  0824               	movf	??___lwmod,w
  5122  169B  07A5               	addwf	___lwmod@counter,f
  5123  169C  2E91               	goto	l3348
  5124  169D                     l3350:	
  5125  169D  0821               	movf	___lwmod@divisor+1,w
  5126  169E  0223               	subwf	___lwmod@dividend+1,w
  5127  169F  1D03               	skipz
  5128  16A0  2EA3               	goto	u4355
  5129  16A1  0820               	movf	___lwmod@divisor,w
  5130  16A2  0222               	subwf	___lwmod@dividend,w
  5131  16A3                     u4355:	
  5132  16A3  1C03               	skipc
  5133  16A4  2EA9               	goto	l3354
  5134  16A5  0820               	movf	___lwmod@divisor,w
  5135  16A6  02A2               	subwf	___lwmod@dividend,f
  5136  16A7  0821               	movf	___lwmod@divisor+1,w
  5137  16A8  3BA3               	subwfb	___lwmod@dividend+1,f
  5138  16A9                     l3354:	
  5139  16A9  3001               	movlw	1
  5140  16AA                     u4365:	
  5141  16AA  36A1               	lsrf	___lwmod@divisor+1,f
  5142  16AB  0CA0               	rrf	___lwmod@divisor,f
  5143  16AC  0B89               	decfsz	9,f
  5144  16AD  2EAA               	goto	u4365
  5145  16AE  3001               	movlw	1
  5146  16AF  02A5               	subwf	___lwmod@counter,f
  5147  16B0  1D03               	btfss	3,2
  5148  16B1  2E9D               	goto	l3350
  5149  16B2                     l3358:	
  5150  16B2  0823               	movf	___lwmod@dividend+1,w
  5151  16B3  00A1               	movwf	?___lwmod+1
  5152  16B4  0822               	movf	___lwmod@dividend,w
  5153  16B5  00A0               	movwf	?___lwmod
  5154  16B6  0008               	return
  5155  16B7                     __end_of___lwmod:	
  5156                           
  5157                           	psect	text9
  5158  1717                     __ptext9:	
  5159 ;; *************** function ___lwdiv *****************
  5160 ;; Defined at:
  5161 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  divisor         2    2[COMMON] unsigned int 
  5164 ;;  dividend        2    4[COMMON] unsigned int 
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;  quotient        2    7[COMMON] unsigned int 
  5167 ;;  counter         1    9[COMMON] unsigned char 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  2    2[COMMON] unsigned int 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, status,0
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5177 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5178 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5181 ;;Total ram usage:        8 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    4
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		__doprnt
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           
  5192                           ;psect for function ___lwdiv
  5193  1717                     ___lwdiv:	
  5194                           
  5195                           ;incstack = 0
  5196                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5197  1717  01F7               	clrf	___lwdiv@quotient
  5198  1718  01F8               	clrf	___lwdiv@quotient+1
  5199  1719  0872               	movf	___lwdiv@divisor,w
  5200  171A  0473               	iorwf	___lwdiv@divisor+1,w
  5201  171B  1903               	btfsc	3,2
  5202  171C  2F46               	goto	l2402
  5203  171D  01F9               	clrf	___lwdiv@counter
  5204  171E  0AF9               	incf	___lwdiv@counter,f
  5205  171F                     l2390:	
  5206  171F  1BF3               	btfsc	___lwdiv@divisor+1,7
  5207  1720  2F2B               	goto	l2392
  5208  1721  3001               	movlw	1
  5209  1722                     u2685:	
  5210  1722  35F2               	lslf	___lwdiv@divisor,f
  5211  1723  0DF3               	rlf	___lwdiv@divisor+1,f
  5212  1724  0B89               	decfsz	9,f
  5213  1725  2F22               	goto	u2685
  5214  1726  3001               	movlw	1
  5215  1727  00F6               	movwf	??___lwdiv
  5216  1728  0876               	movf	??___lwdiv,w
  5217  1729  07F9               	addwf	___lwdiv@counter,f
  5218  172A  2F1F               	goto	l2390
  5219  172B                     l2392:	
  5220  172B  3001               	movlw	1
  5221  172C                     u2705:	
  5222  172C  35F7               	lslf	___lwdiv@quotient,f
  5223  172D  0DF8               	rlf	___lwdiv@quotient+1,f
  5224  172E  0B89               	decfsz	9,f
  5225  172F  2F2C               	goto	u2705
  5226  1730  0873               	movf	___lwdiv@divisor+1,w
  5227  1731  0275               	subwf	___lwdiv@dividend+1,w
  5228  1732  1D03               	skipz
  5229  1733  2F36               	goto	u2715
  5230  1734  0872               	movf	___lwdiv@divisor,w
  5231  1735  0274               	subwf	___lwdiv@dividend,w
  5232  1736                     u2715:	
  5233  1736  1C03               	skipc
  5234  1737  2F3D               	goto	l2398
  5235  1738  0872               	movf	___lwdiv@divisor,w
  5236  1739  02F4               	subwf	___lwdiv@dividend,f
  5237  173A  0873               	movf	___lwdiv@divisor+1,w
  5238  173B  3BF5               	subwfb	___lwdiv@dividend+1,f
  5239  173C  1477               	bsf	___lwdiv@quotient,0
  5240  173D                     l2398:	
  5241  173D  3001               	movlw	1
  5242  173E                     u2725:	
  5243  173E  36F3               	lsrf	___lwdiv@divisor+1,f
  5244  173F  0CF2               	rrf	___lwdiv@divisor,f
  5245  1740  0B89               	decfsz	9,f
  5246  1741  2F3E               	goto	u2725
  5247  1742  3001               	movlw	1
  5248  1743  02F9               	subwf	___lwdiv@counter,f
  5249  1744  1D03               	btfss	3,2
  5250  1745  2F2B               	goto	l2392
  5251  1746                     l2402:	
  5252  1746  0878               	movf	___lwdiv@quotient+1,w
  5253  1747  00F3               	movwf	?___lwdiv+1
  5254  1748  0877               	movf	___lwdiv@quotient,w
  5255  1749  00F2               	movwf	?___lwdiv
  5256  174A  0008               	return
  5257  174B                     __end_of___lwdiv:	
  5258                           
  5259                           	psect	text10
  5260  0DBE                     __ptext10:	
  5261 ;; *************** function _pow *****************
  5262 ;; Defined at:
  5263 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;  x               3   24[BANK1 ] unsigned int 
  5266 ;;  y               3   27[BANK1 ] unsigned int 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  yi              4   38[BANK1 ] unsigned long 
  5269 ;;  sign            1   37[BANK1 ] unsigned char 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  3   24[BANK1 ] unsigned char 
  5272 ;; Registers used:
  5273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5279 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5280 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5282 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;Total ram usage:       18 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    8
  5286 ;; This function calls:
  5287 ;;		___ftge
  5288 ;;		___ftmul
  5289 ;;		___ftneg
  5290 ;;		___fttol
  5291 ;;		___lltoft
  5292 ;;		_exp
  5293 ;;		_log
  5294 ;; This function is called by:
  5295 ;;		_main
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _pow
  5301  0DBE                     _pow:	
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _pow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5305  0DBE  0021               	movlb	1	; select bank1
  5306  0DBF  01C5               	clrf	pow@sign^(0+128)
  5307  0DC0  083A               	movf	(pow@x+2)^(0+128),w
  5308  0DC1  0439               	iorwf	(pow@x+1)^(0+128),w
  5309  0DC2  0438               	iorwf	pow@x^(0+128),w
  5310  0DC3  1D03               	skipz
  5311  0DC4  2DE3               	goto	l3660
  5312  0DC5  3000               	movlw	0
  5313  0DC6  00F2               	movwf	___ftge@ff1
  5314  0DC7  3000               	movlw	0
  5315  0DC8  00F3               	movwf	___ftge@ff1+1
  5316  0DC9  3000               	movlw	0
  5317  0DCA  00F4               	movwf	___ftge@ff1+2
  5318  0DCB  083B               	movf	pow@y^(0+128),w
  5319  0DCC  00F5               	movwf	___ftge@ff2
  5320  0DCD  083C               	movf	(pow@y+1)^(0+128),w
  5321  0DCE  00F6               	movwf	___ftge@ff2+1
  5322  0DCF  083D               	movf	(pow@y+2)^(0+128),w
  5323  0DD0  00F7               	movwf	___ftge@ff2+2
  5324  0DD1  3197  27C3  318D   	fcall	___ftge
  5325  0DD4  1C03               	btfss	3,0
  5326  0DD5  2DDB               	goto	l803
  5327  0DD6  3021               	movlw	33
  5328  0DD7  0022               	movlb	2	; select bank2
  5329  0DD8  00BE               	movwf	_errno^(0+256)
  5330  0DD9  3000               	movlw	0
  5331  0DDA  00BF               	movwf	(_errno^(0+256)+1)
  5332  0DDB                     l803:	
  5333  0DDB  3000               	movlw	0
  5334  0DDC  0021               	movlb	1	; select bank1
  5335  0DDD  00B8               	movwf	?_pow^(0+128)
  5336  0DDE  3000               	movlw	0
  5337  0DDF  00B9               	movwf	(?_pow+1)^(0+128)
  5338  0DE0  3000               	movlw	0
  5339  0DE1  00BA               	movwf	(?_pow+2)^(0+128)
  5340  0DE2  0008               	return
  5341  0DE3                     l3660:	
  5342  0DE3  083D               	movf	(pow@y+2)^(0+128),w
  5343  0DE4  043C               	iorwf	(pow@y+1)^(0+128),w
  5344  0DE5  043B               	iorwf	pow@y^(0+128),w
  5345  0DE6  1D03               	skipz
  5346  0DE7  2DEF               	goto	l3666
  5347  0DE8  3000               	movlw	0
  5348  0DE9  00B8               	movwf	?_pow^(0+128)
  5349  0DEA  3080               	movlw	128
  5350  0DEB  00B9               	movwf	(?_pow+1)^(0+128)
  5351  0DEC  303F               	movlw	63
  5352  0DED  00BA               	movwf	(?_pow+2)^(0+128)
  5353  0DEE  0008               	return
  5354  0DEF                     l3666:	
  5355  0DEF  0838               	movf	pow@x^(0+128),w
  5356  0DF0  00F2               	movwf	___ftge@ff1
  5357  0DF1  0839               	movf	(pow@x+1)^(0+128),w
  5358  0DF2  00F3               	movwf	___ftge@ff1+1
  5359  0DF3  083A               	movf	(pow@x+2)^(0+128),w
  5360  0DF4  00F4               	movwf	___ftge@ff1+2
  5361  0DF5  3000               	movlw	0
  5362  0DF6  00F5               	movwf	___ftge@ff2
  5363  0DF7  3000               	movlw	0
  5364  0DF8  00F6               	movwf	___ftge@ff2+1
  5365  0DF9  3000               	movlw	0
  5366  0DFA  00F7               	movwf	___ftge@ff2+2
  5367  0DFB  3197  27C3  318D   	fcall	___ftge
  5368  0DFE  1803               	btfsc	3,0
  5369  0DFF  2E70               	goto	l3678
  5370  0E00  0021               	movlb	1	; select bank1
  5371  0E01  083B               	movf	pow@y^(0+128),w
  5372  0E02  0020               	movlb	0	; select bank0
  5373  0E03  00B6               	movwf	___fttol@f1
  5374  0E04  0021               	movlb	1	; select bank1
  5375  0E05  083C               	movf	(pow@y+1)^(0+128),w
  5376  0E06  0020               	movlb	0	; select bank0
  5377  0E07  00B7               	movwf	___fttol@f1+1
  5378  0E08  0021               	movlb	1	; select bank1
  5379  0E09  083D               	movf	(pow@y+2)^(0+128),w
  5380  0E0A  0020               	movlb	0	; select bank0
  5381  0E0B  00B8               	movwf	___fttol@f1+2
  5382  0E0C  3189  2185  318D   	fcall	___fttol
  5383  0E0F  0020               	movlb	0	; select bank0
  5384  0E10  0839               	movf	?___fttol+3,w
  5385  0E11  0021               	movlb	1	; select bank1
  5386  0E12  00C9               	movwf	(pow@yi+3)^(0+128)
  5387  0E13  0020               	movlb	0	; select bank0
  5388  0E14  0838               	movf	?___fttol+2,w
  5389  0E15  0021               	movlb	1	; select bank1
  5390  0E16  00C8               	movwf	(pow@yi+2)^(0+128)
  5391  0E17  0020               	movlb	0	; select bank0
  5392  0E18  0837               	movf	?___fttol+1,w
  5393  0E19  0021               	movlb	1	; select bank1
  5394  0E1A  00C7               	movwf	(pow@yi+1)^(0+128)
  5395  0E1B  0020               	movlb	0	; select bank0
  5396  0E1C  0836               	movf	?___fttol,w
  5397  0E1D  0021               	movlb	1	; select bank1
  5398  0E1E  00C6               	movwf	pow@yi^(0+128)
  5399  0E1F  0849               	movf	(pow@yi+3)^(0+128),w
  5400  0E20  0020               	movlb	0	; select bank0
  5401  0E21  00A3               	movwf	___lltoft@c+3
  5402  0E22  0021               	movlb	1	; select bank1
  5403  0E23  0848               	movf	(pow@yi+2)^(0+128),w
  5404  0E24  0020               	movlb	0	; select bank0
  5405  0E25  00A2               	movwf	___lltoft@c+2
  5406  0E26  0021               	movlb	1	; select bank1
  5407  0E27  0847               	movf	(pow@yi+1)^(0+128),w
  5408  0E28  0020               	movlb	0	; select bank0
  5409  0E29  00A1               	movwf	___lltoft@c+1
  5410  0E2A  0021               	movlb	1	; select bank1
  5411  0E2B  0846               	movf	pow@yi^(0+128),w
  5412  0E2C  0020               	movlb	0	; select bank0
  5413  0E2D  00A0               	movwf	___lltoft@c
  5414  0E2E  3196  2660  318D   	fcall	___lltoft
  5415  0E31  0021               	movlb	1	; select bank1
  5416  0E32  083D               	movf	(pow@y+2)^(0+128),w
  5417  0E33  0020               	movlb	0	; select bank0
  5418  0E34  0622               	xorwf	?___lltoft+2,w
  5419  0E35  1D03               	skipz
  5420  0E36  2E41               	goto	u4855
  5421  0E37  0021               	movlb	1	; select bank1
  5422  0E38  083C               	movf	(pow@y+1)^(0+128),w
  5423  0E39  0020               	movlb	0	; select bank0
  5424  0E3A  0621               	xorwf	?___lltoft+1,w
  5425  0E3B  1D03               	skipz
  5426  0E3C  2E41               	goto	u4855
  5427  0E3D  0021               	movlb	1	; select bank1
  5428  0E3E  083B               	movf	pow@y^(0+128),w
  5429  0E3F  0020               	movlb	0	; select bank0
  5430  0E40  0620               	xorwf	?___lltoft,w
  5431  0E41                     u4855:	
  5432  0E41  1903               	skipnz
  5433  0E42  2E50               	goto	l3674
  5434  0E43  3021               	movlw	33
  5435  0E44  0022               	movlb	2	; select bank2
  5436  0E45  00BE               	movwf	_errno^(0+256)
  5437  0E46  3000               	movlw	0
  5438  0E47  00BF               	movwf	(_errno^(0+256)+1)
  5439  0E48  3000               	movlw	0
  5440  0E49  0021               	movlb	1	; select bank1
  5441  0E4A  00B8               	movwf	?_pow^(0+128)
  5442  0E4B  3000               	movlw	0
  5443  0E4C  00B9               	movwf	(?_pow+1)^(0+128)
  5444  0E4D  3000               	movlw	0
  5445  0E4E  00BA               	movwf	(?_pow+2)^(0+128)
  5446  0E4F  0008               	return
  5447  0E50                     l3674:	
  5448  0E50  0021               	movlb	1	; select bank1
  5449  0E51  0846               	movf	pow@yi^(0+128),w
  5450  0E52  3901               	andlw	1
  5451  0E53  00BE               	movwf	??_pow^(0+128)
  5452  0E54  083E               	movf	??_pow^(0+128),w
  5453  0E55  00C5               	movwf	pow@sign^(0+128)
  5454  0E56  0838               	movf	pow@x^(0+128),w
  5455  0E57  0020               	movlb	0	; select bank0
  5456  0E58  00CC               	movwf	___ftneg@f1
  5457  0E59  0021               	movlb	1	; select bank1
  5458  0E5A  0839               	movf	(pow@x+1)^(0+128),w
  5459  0E5B  0020               	movlb	0	; select bank0
  5460  0E5C  00CD               	movwf	___ftneg@f1+1
  5461  0E5D  0021               	movlb	1	; select bank1
  5462  0E5E  083A               	movf	(pow@x+2)^(0+128),w
  5463  0E5F  0020               	movlb	0	; select bank0
  5464  0E60  00CE               	movwf	___ftneg@f1+2
  5465  0E61  3194  24F9  318D   	fcall	___ftneg
  5466  0E64  0020               	movlb	0	; select bank0
  5467  0E65  084C               	movf	?___ftneg,w
  5468  0E66  0021               	movlb	1	; select bank1
  5469  0E67  00B8               	movwf	pow@x^(0+128)
  5470  0E68  0020               	movlb	0	; select bank0
  5471  0E69  084D               	movf	?___ftneg+1,w
  5472  0E6A  0021               	movlb	1	; select bank1
  5473  0E6B  00B9               	movwf	(pow@x+1)^(0+128)
  5474  0E6C  0020               	movlb	0	; select bank0
  5475  0E6D  084E               	movf	?___ftneg+2,w
  5476  0E6E  0021               	movlb	1	; select bank1
  5477  0E6F  00BA               	movwf	(pow@x+2)^(0+128)
  5478  0E70                     l3678:	
  5479  0E70  0021               	movlb	1	; select bank1
  5480  0E71  0838               	movf	pow@x^(0+128),w
  5481  0E72  00A7               	movwf	log@x^(0+128)
  5482  0E73  0839               	movf	(pow@x+1)^(0+128),w
  5483  0E74  00A8               	movwf	(log@x+1)^(0+128)
  5484  0E75  083A               	movf	(pow@x+2)^(0+128),w
  5485  0E76  00A9               	movwf	(log@x+2)^(0+128)
  5486  0E77  318C  2403  318D   	fcall	_log
  5487  0E7A  0021               	movlb	1	; select bank1
  5488  0E7B  0827               	movf	?_log^(0+128),w
  5489  0E7C  00BF               	movwf	_pow$1026^(0+128)
  5490  0E7D  0828               	movf	(?_log+1)^(0+128),w
  5491  0E7E  00C0               	movwf	(_pow$1026+1)^(0+128)
  5492  0E7F  0829               	movf	(?_log+2)^(0+128),w
  5493  0E80  00C1               	movwf	(_pow$1026+2)^(0+128)
  5494  0E81  083B               	movf	pow@y^(0+128),w
  5495  0E82  0020               	movlb	0	; select bank0
  5496  0E83  00CF               	movwf	___ftmul@f1
  5497  0E84  0021               	movlb	1	; select bank1
  5498  0E85  083C               	movf	(pow@y+1)^(0+128),w
  5499  0E86  0020               	movlb	0	; select bank0
  5500  0E87  00D0               	movwf	___ftmul@f1+1
  5501  0E88  0021               	movlb	1	; select bank1
  5502  0E89  083D               	movf	(pow@y+2)^(0+128),w
  5503  0E8A  0020               	movlb	0	; select bank0
  5504  0E8B  00D1               	movwf	___ftmul@f1+2
  5505  0E8C  0021               	movlb	1	; select bank1
  5506  0E8D  083F               	movf	_pow$1026^(0+128),w
  5507  0E8E  0020               	movlb	0	; select bank0
  5508  0E8F  00D2               	movwf	___ftmul@f2
  5509  0E90  0021               	movlb	1	; select bank1
  5510  0E91  0840               	movf	(_pow$1026+1)^(0+128),w
  5511  0E92  0020               	movlb	0	; select bank0
  5512  0E93  00D3               	movwf	___ftmul@f2+1
  5513  0E94  0021               	movlb	1	; select bank1
  5514  0E95  0841               	movf	(_pow$1026+2)^(0+128),w
  5515  0E96  0020               	movlb	0	; select bank0
  5516  0E97  00D4               	movwf	___ftmul@f2+2
  5517  0E98  318B  234F  318D   	fcall	___ftmul
  5518  0E9B  0020               	movlb	0	; select bank0
  5519  0E9C  084F               	movf	?___ftmul,w
  5520  0E9D  0021               	movlb	1	; select bank1
  5521  0E9E  00C2               	movwf	_pow$1027^(0+128)
  5522  0E9F  0020               	movlb	0	; select bank0
  5523  0EA0  0850               	movf	?___ftmul+1,w
  5524  0EA1  0021               	movlb	1	; select bank1
  5525  0EA2  00C3               	movwf	(_pow$1027+1)^(0+128)
  5526  0EA3  0020               	movlb	0	; select bank0
  5527  0EA4  0851               	movf	?___ftmul+2,w
  5528  0EA5  0021               	movlb	1	; select bank1
  5529  0EA6  00C4               	movwf	(_pow$1027+2)^(0+128)
  5530  0EA7  0842               	movf	_pow$1027^(0+128),w
  5531  0EA8  00AE               	movwf	exp@x^(0+128)
  5532  0EA9  0843               	movf	(_pow$1027+1)^(0+128),w
  5533  0EAA  00AF               	movwf	(exp@x+1)^(0+128)
  5534  0EAB  0844               	movf	(_pow$1027+2)^(0+128),w
  5535  0EAC  00B0               	movwf	(exp@x+2)^(0+128)
  5536  0EAD  3186  2646  318D   	fcall	_exp
  5537  0EB0  0021               	movlb	1	; select bank1
  5538  0EB1  082E               	movf	?_exp^(0+128),w
  5539  0EB2  00B8               	movwf	pow@x^(0+128)
  5540  0EB3  082F               	movf	(?_exp+1)^(0+128),w
  5541  0EB4  00B9               	movwf	(pow@x+1)^(0+128)
  5542  0EB5  0830               	movf	(?_exp+2)^(0+128),w
  5543  0EB6  00BA               	movwf	(pow@x+2)^(0+128)
  5544  0EB7  0845               	movf	pow@sign^(0+128),w
  5545  0EB8  1903               	btfsc	3,2
  5546  0EB9  0008               	return
  5547  0EBA  0838               	movf	pow@x^(0+128),w
  5548  0EBB  0020               	movlb	0	; select bank0
  5549  0EBC  00CC               	movwf	___ftneg@f1
  5550  0EBD  0021               	movlb	1	; select bank1
  5551  0EBE  0839               	movf	(pow@x+1)^(0+128),w
  5552  0EBF  0020               	movlb	0	; select bank0
  5553  0EC0  00CD               	movwf	___ftneg@f1+1
  5554  0EC1  0021               	movlb	1	; select bank1
  5555  0EC2  083A               	movf	(pow@x+2)^(0+128),w
  5556  0EC3  0020               	movlb	0	; select bank0
  5557  0EC4  00CE               	movwf	___ftneg@f1+2
  5558  0EC5  3194  24F9         	fcall	___ftneg
  5559  0EC7  0020               	movlb	0	; select bank0
  5560  0EC8  084C               	movf	?___ftneg,w
  5561  0EC9  0021               	movlb	1	; select bank1
  5562  0ECA  00B8               	movwf	?_pow^(0+128)
  5563  0ECB  0020               	movlb	0	; select bank0
  5564  0ECC  084D               	movf	?___ftneg+1,w
  5565  0ECD  0021               	movlb	1	; select bank1
  5566  0ECE  00B9               	movwf	(?_pow+1)^(0+128)
  5567  0ECF  0020               	movlb	0	; select bank0
  5568  0ED0  084E               	movf	?___ftneg+2,w
  5569  0ED1  0021               	movlb	1	; select bank1
  5570  0ED2  00BA               	movwf	(?_pow+2)^(0+128)
  5571  0ED3  0008               	return
  5572  0ED4                     __end_of_pow:	
  5573                           
  5574                           	psect	text11
  5575  0C03                     __ptext11:	
  5576 ;; *************** function _log *****************
  5577 ;; Defined at:
  5578 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;  x               3    7[BANK1 ] unsigned char 
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;  exponent        2   10[BANK1 ] int 
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  3    7[BANK1 ] int 
  5585 ;; Registers used:
  5586 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5592 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;Total ram usage:        6 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    7
  5599 ;; This function calls:
  5600 ;;		___awtoft
  5601 ;;		___ftadd
  5602 ;;		___ftge
  5603 ;;		___ftmul
  5604 ;;		_eval_poly
  5605 ;;		_frexp
  5606 ;; This function is called by:
  5607 ;;		_pow
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _log
  5613  0C03                     _log:	
  5614                           
  5615                           ;incstack = 0
  5616                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5617  0C03  0021               	movlb	1	; select bank1
  5618  0C04  0827               	movf	log@x^(0+128),w
  5619  0C05  00F2               	movwf	___ftge@ff1
  5620  0C06  0828               	movf	(log@x+1)^(0+128),w
  5621  0C07  00F3               	movwf	___ftge@ff1+1
  5622  0C08  0829               	movf	(log@x+2)^(0+128),w
  5623  0C09  00F4               	movwf	___ftge@ff1+2
  5624  0C0A  3000               	movlw	0
  5625  0C0B  00F5               	movwf	___ftge@ff2
  5626  0C0C  3000               	movlw	0
  5627  0C0D  00F6               	movwf	___ftge@ff2+1
  5628  0C0E  3000               	movlw	0
  5629  0C0F  00F7               	movwf	___ftge@ff2+2
  5630  0C10  3197  27C3  318C   	fcall	___ftge
  5631  0C13  1803               	btfsc	3,0
  5632  0C14  2C22               	goto	l3578
  5633  0C15  3021               	movlw	33
  5634  0C16  0022               	movlb	2	; select bank2
  5635  0C17  00BE               	movwf	_errno^(0+256)
  5636  0C18  3000               	movlw	0
  5637  0C19  00BF               	movwf	(_errno^(0+256)+1)
  5638  0C1A  3000               	movlw	0
  5639  0C1B  0021               	movlb	1	; select bank1
  5640  0C1C  00A7               	movwf	?_log^(0+128)
  5641  0C1D  3000               	movlw	0
  5642  0C1E  00A8               	movwf	(?_log+1)^(0+128)
  5643  0C1F  3000               	movlw	0
  5644  0C20  00A9               	movwf	(?_log+2)^(0+128)
  5645  0C21  0008               	return
  5646  0C22                     l3578:	
  5647  0C22  0021               	movlb	1	; select bank1
  5648  0C23  0829               	movf	(log@x+2)^(0+128),w
  5649  0C24  0428               	iorwf	(log@x+1)^(0+128),w
  5650  0C25  0427               	iorwf	log@x^(0+128),w
  5651  0C26  1D03               	skipz
  5652  0C27  2C35               	goto	l3584
  5653  0C28  3022               	movlw	34
  5654  0C29  0022               	movlb	2	; select bank2
  5655  0C2A  00BE               	movwf	_errno^(0+256)
  5656  0C2B  3000               	movlw	0
  5657  0C2C  00BF               	movwf	(_errno^(0+256)+1)
  5658  0C2D  3000               	movlw	0
  5659  0C2E  0021               	movlb	1	; select bank1
  5660  0C2F  00A7               	movwf	?_log^(0+128)
  5661  0C30  3000               	movlw	0
  5662  0C31  00A8               	movwf	(?_log+1)^(0+128)
  5663  0C32  3000               	movlw	0
  5664  0C33  00A9               	movwf	(?_log+2)^(0+128)
  5665  0C34  0008               	return
  5666  0C35                     l3584:	
  5667  0C35  3000               	movlw	0
  5668  0C36  0020               	movlb	0	; select bank0
  5669  0C37  00DF               	movwf	___ftadd@f1
  5670  0C38  3080               	movlw	128
  5671  0C39  00E0               	movwf	___ftadd@f1+1
  5672  0C3A  30BF               	movlw	191
  5673  0C3B  00E1               	movwf	___ftadd@f1+2
  5674  0C3C  3000               	movlw	0
  5675  0C3D  00CF               	movwf	___ftmul@f1
  5676  0C3E  3000               	movlw	0
  5677  0C3F  00D0               	movwf	___ftmul@f1+1
  5678  0C40  3040               	movlw	64
  5679  0C41  00D1               	movwf	___ftmul@f1+2
  5680  0C42  30AA               	movlw	(low (log@exponent| 0))& (0+255)
  5681  0C43  00EF               	movwf	??_log
  5682  0C44  086F               	movf	??_log,w
  5683  0C45  00F5               	movwf	frexp@eptr
  5684  0C46  0021               	movlb	1	; select bank1
  5685  0C47  0827               	movf	log@x^(0+128),w
  5686  0C48  00F2               	movwf	frexp@value
  5687  0C49  0828               	movf	(log@x+1)^(0+128),w
  5688  0C4A  00F3               	movwf	frexp@value+1
  5689  0C4B  0829               	movf	(log@x+2)^(0+128),w
  5690  0C4C  00F4               	movwf	frexp@value+2
  5691  0C4D  3197  274B  318C   	fcall	_frexp
  5692  0C50  0872               	movf	?_frexp,w
  5693  0C51  0020               	movlb	0	; select bank0
  5694  0C52  00D2               	movwf	___ftmul@f2
  5695  0C53  0873               	movf	?_frexp+1,w
  5696  0C54  00D3               	movwf	___ftmul@f2+1
  5697  0C55  0874               	movf	?_frexp+2,w
  5698  0C56  00D4               	movwf	___ftmul@f2+2
  5699  0C57  318B  234F  318C   	fcall	___ftmul
  5700  0C5A  0020               	movlb	0	; select bank0
  5701  0C5B  084F               	movf	?___ftmul,w
  5702  0C5C  00E2               	movwf	___ftadd@f2
  5703  0C5D  0850               	movf	?___ftmul+1,w
  5704  0C5E  00E3               	movwf	___ftadd@f2+1
  5705  0C5F  0851               	movf	?___ftmul+2,w
  5706  0C60  00E4               	movwf	___ftadd@f2+2
  5707  0C61  318C  24C8  318C   	fcall	___ftadd
  5708  0C64  0020               	movlb	0	; select bank0
  5709  0C65  085F               	movf	?___ftadd,w
  5710  0C66  0021               	movlb	1	; select bank1
  5711  0C67  00A7               	movwf	log@x^(0+128)
  5712  0C68  0020               	movlb	0	; select bank0
  5713  0C69  0860               	movf	?___ftadd+1,w
  5714  0C6A  0021               	movlb	1	; select bank1
  5715  0C6B  00A8               	movwf	(log@x+1)^(0+128)
  5716  0C6C  0020               	movlb	0	; select bank0
  5717  0C6D  0861               	movf	?___ftadd+2,w
  5718  0C6E  0021               	movlb	1	; select bank1
  5719  0C6F  00A9               	movwf	(log@x+2)^(0+128)
  5720  0C70  30FF               	movlw	255
  5721  0C71  07AA               	addwf	log@exponent^(0+128),f
  5722  0C72  30FF               	movlw	255
  5723  0C73  3DAB               	addwfc	(log@exponent+1)^(0+128),f
  5724  0C74  0827               	movf	log@x^(0+128),w
  5725  0C75  00A0               	movwf	eval_poly@x^(0+128)
  5726  0C76  0828               	movf	(log@x+1)^(0+128),w
  5727  0C77  00A1               	movwf	(eval_poly@x+1)^(0+128)
  5728  0C78  0829               	movf	(log@x+2)^(0+128),w
  5729  0C79  00A2               	movwf	(eval_poly@x+2)^(0+128)
  5730  0C7A  3000               	movlw	low (log@coeff| (0+32768))
  5731  0C7B  00A3               	movwf	eval_poly@d^(0+128)
  5732  0C7C  3098               	movlw	high (log@coeff| (0+32768))
  5733  0C7D  00A4               	movwf	(eval_poly@d^(0+128)+1)
  5734  0C7E  3008               	movlw	8
  5735  0C7F  00A5               	movwf	eval_poly@n^(0+128)
  5736  0C80  3000               	movlw	0
  5737  0C81  00A6               	movwf	(eval_poly@n^(0+128)+1)
  5738  0C82  3188  201F  318C   	fcall	_eval_poly
  5739  0C85  0021               	movlb	1	; select bank1
  5740  0C86  0820               	movf	?_eval_poly^(0+128),w
  5741  0C87  00A7               	movwf	log@x^(0+128)
  5742  0C88  0821               	movf	(?_eval_poly+1)^(0+128),w
  5743  0C89  00A8               	movwf	(log@x+1)^(0+128)
  5744  0C8A  0822               	movf	(?_eval_poly+2)^(0+128),w
  5745  0C8B  00A9               	movwf	(log@x+2)^(0+128)
  5746  0C8C  0827               	movf	log@x^(0+128),w
  5747  0C8D  0020               	movlb	0	; select bank0
  5748  0C8E  00DF               	movwf	___ftadd@f1
  5749  0C8F  0021               	movlb	1	; select bank1
  5750  0C90  0828               	movf	(log@x+1)^(0+128),w
  5751  0C91  0020               	movlb	0	; select bank0
  5752  0C92  00E0               	movwf	___ftadd@f1+1
  5753  0C93  0021               	movlb	1	; select bank1
  5754  0C94  0829               	movf	(log@x+2)^(0+128),w
  5755  0C95  0020               	movlb	0	; select bank0
  5756  0C96  00E1               	movwf	___ftadd@f1+2
  5757  0C97  3072               	movlw	114
  5758  0C98  00CF               	movwf	___ftmul@f1
  5759  0C99  3031               	movlw	49
  5760  0C9A  00D0               	movwf	___ftmul@f1+1
  5761  0C9B  303F               	movlw	63
  5762  0C9C  00D1               	movwf	___ftmul@f1+2
  5763  0C9D  0021               	movlb	1	; select bank1
  5764  0C9E  082B               	movf	(log@exponent+1)^(0+128),w
  5765  0C9F  0020               	movlb	0	; select bank0
  5766  0CA0  00A1               	movwf	___awtoft@c+1
  5767  0CA1  0021               	movlb	1	; select bank1
  5768  0CA2  082A               	movf	log@exponent^(0+128),w
  5769  0CA3  0020               	movlb	0	; select bank0
  5770  0CA4  00A0               	movwf	___awtoft@c
  5771  0CA5  3196  261C  318C   	fcall	___awtoft
  5772  0CA8  0020               	movlb	0	; select bank0
  5773  0CA9  0820               	movf	?___awtoft,w
  5774  0CAA  00D2               	movwf	___ftmul@f2
  5775  0CAB  0821               	movf	?___awtoft+1,w
  5776  0CAC  00D3               	movwf	___ftmul@f2+1
  5777  0CAD  0822               	movf	?___awtoft+2,w
  5778  0CAE  00D4               	movwf	___ftmul@f2+2
  5779  0CAF  318B  234F  318C   	fcall	___ftmul
  5780  0CB2  0020               	movlb	0	; select bank0
  5781  0CB3  084F               	movf	?___ftmul,w
  5782  0CB4  00E2               	movwf	___ftadd@f2
  5783  0CB5  0850               	movf	?___ftmul+1,w
  5784  0CB6  00E3               	movwf	___ftadd@f2+1
  5785  0CB7  0851               	movf	?___ftmul+2,w
  5786  0CB8  00E4               	movwf	___ftadd@f2+2
  5787  0CB9  318C  24C8         	fcall	___ftadd
  5788  0CBB  0020               	movlb	0	; select bank0
  5789  0CBC  085F               	movf	?___ftadd,w
  5790  0CBD  0021               	movlb	1	; select bank1
  5791  0CBE  00A7               	movwf	?_log^(0+128)
  5792  0CBF  0020               	movlb	0	; select bank0
  5793  0CC0  0860               	movf	?___ftadd+1,w
  5794  0CC1  0021               	movlb	1	; select bank1
  5795  0CC2  00A8               	movwf	(?_log+1)^(0+128)
  5796  0CC3  0020               	movlb	0	; select bank0
  5797  0CC4  0861               	movf	?___ftadd+2,w
  5798  0CC5  0021               	movlb	1	; select bank1
  5799  0CC6  00A9               	movwf	(?_log+2)^(0+128)
  5800  0CC7  0008               	return
  5801  0CC8                     __end_of_log:	
  5802                           
  5803                           	psect	text12
  5804  0646                     __ptext12:	
  5805 ;; *************** function _exp *****************
  5806 ;; Defined at:
  5807 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;  x               3   14[BANK1 ] int 
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;  exponent        2   21[BANK1 ] int 
  5812 ;;  sign            1   23[BANK1 ] unsigned char 
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  3   14[BANK1 ] unsigned char 
  5815 ;; Registers used:
  5816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5822 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;Total ram usage:       10 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    7
  5829 ;; This function calls:
  5830 ;;		___awtoft
  5831 ;;		___ftdiv
  5832 ;;		___ftge
  5833 ;;		___ftmul
  5834 ;;		___ftneg
  5835 ;;		___ftsub
  5836 ;;		___fttol
  5837 ;;		_eval_poly
  5838 ;;		_floor
  5839 ;;		_ldexp
  5840 ;; This function is called by:
  5841 ;;		_pow
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           
  5846                           ;psect for function _exp
  5847  0646                     _exp:	
  5848                           
  5849                           ;incstack = 0
  5850                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5851  0646  0021               	movlb	1	; select bank1
  5852  0647  0830               	movf	(exp@x+2)^(0+128),w
  5853  0648  042F               	iorwf	(exp@x+1)^(0+128),w
  5854  0649  042E               	iorwf	exp@x^(0+128),w
  5855  064A  1D03               	skipz
  5856  064B  2E53               	goto	l3600
  5857  064C  3000               	movlw	0
  5858  064D  00AE               	movwf	?_exp^(0+128)
  5859  064E  3080               	movlw	128
  5860  064F  00AF               	movwf	(?_exp+1)^(0+128)
  5861  0650  303F               	movlw	63
  5862  0651  00B0               	movwf	(?_exp+2)^(0+128)
  5863  0652  0008               	return
  5864  0653                     l3600:	
  5865  0653  3072               	movlw	114
  5866  0654  00F2               	movwf	___ftge@ff1
  5867  0655  3031               	movlw	49
  5868  0656  00F3               	movwf	___ftge@ff1+1
  5869  0657  3044               	movlw	68
  5870  0658  00F4               	movwf	___ftge@ff1+2
  5871  0659  082E               	movf	exp@x^(0+128),w
  5872  065A  00F5               	movwf	___ftge@ff2
  5873  065B  082F               	movf	(exp@x+1)^(0+128),w
  5874  065C  00F6               	movwf	___ftge@ff2+1
  5875  065D  0830               	movf	(exp@x+2)^(0+128),w
  5876  065E  00F7               	movwf	___ftge@ff2+2
  5877  065F  3197  27C3  3186   	fcall	___ftge
  5878  0662  1803               	btfsc	3,0
  5879  0663  2E71               	goto	l3606
  5880  0664  3022               	movlw	34
  5881  0665  0022               	movlb	2	; select bank2
  5882  0666  00BE               	movwf	_errno^(0+256)
  5883  0667  3000               	movlw	0
  5884  0668  00BF               	movwf	(_errno^(0+256)+1)
  5885  0669  30FF               	movlw	255
  5886  066A  0021               	movlb	1	; select bank1
  5887  066B  00AE               	movwf	?_exp^(0+128)
  5888  066C  307F               	movlw	127
  5889  066D  00AF               	movwf	(?_exp+1)^(0+128)
  5890  066E  307F               	movlw	127
  5891  066F  00B0               	movwf	(?_exp+2)^(0+128)
  5892  0670  0008               	return
  5893  0671                     l3606:	
  5894  0671  0021               	movlb	1	; select bank1
  5895  0672  082E               	movf	exp@x^(0+128),w
  5896  0673  00F2               	movwf	___ftge@ff1
  5897  0674  082F               	movf	(exp@x+1)^(0+128),w
  5898  0675  00F3               	movwf	___ftge@ff1+1
  5899  0676  0830               	movf	(exp@x+2)^(0+128),w
  5900  0677  00F4               	movwf	___ftge@ff1+2
  5901  0678  3049               	movlw	73
  5902  0679  00F5               	movwf	___ftge@ff2
  5903  067A  303A               	movlw	58
  5904  067B  00F6               	movwf	___ftge@ff2+1
  5905  067C  30C4               	movlw	196
  5906  067D  00F7               	movwf	___ftge@ff2+2
  5907  067E  3197  27C3  3186   	fcall	___ftge
  5908  0681  1803               	btfsc	3,0
  5909  0682  2E90               	goto	l3612
  5910  0683  3022               	movlw	34
  5911  0684  0022               	movlb	2	; select bank2
  5912  0685  00BE               	movwf	_errno^(0+256)
  5913  0686  3000               	movlw	0
  5914  0687  00BF               	movwf	(_errno^(0+256)+1)
  5915  0688  3000               	movlw	0
  5916  0689  0021               	movlb	1	; select bank1
  5917  068A  00AE               	movwf	?_exp^(0+128)
  5918  068B  3000               	movlw	0
  5919  068C  00AF               	movwf	(?_exp+1)^(0+128)
  5920  068D  3000               	movlw	0
  5921  068E  00B0               	movwf	(?_exp+2)^(0+128)
  5922  068F  0008               	return
  5923  0690                     l3612:	
  5924  0690  0021               	movlb	1	; select bank1
  5925  0691  082E               	movf	exp@x^(0+128),w
  5926  0692  00F2               	movwf	___ftge@ff1
  5927  0693  082F               	movf	(exp@x+1)^(0+128),w
  5928  0694  00F3               	movwf	___ftge@ff1+1
  5929  0695  0830               	movf	(exp@x+2)^(0+128),w
  5930  0696  00F4               	movwf	___ftge@ff1+2
  5931  0697  3000               	movlw	0
  5932  0698  00F5               	movwf	___ftge@ff2
  5933  0699  3000               	movlw	0
  5934  069A  00F6               	movwf	___ftge@ff2+1
  5935  069B  3000               	movlw	0
  5936  069C  00F7               	movwf	___ftge@ff2+2
  5937  069D  3197  27C3  3186   	fcall	___ftge
  5938  06A0  1803               	btfsc	3,0
  5939  06A1  2EA4               	goto	u4760
  5940  06A2  3001               	movlw	1
  5941  06A3  2EA5               	goto	u4770
  5942  06A4                     u4760:	
  5943  06A4  3000               	movlw	0
  5944  06A5                     u4770:	
  5945  06A5  0021               	movlb	1	; select bank1
  5946  06A6  00B1               	movwf	??_exp^(0+128)
  5947  06A7  0831               	movf	??_exp^(0+128),w
  5948  06A8  00B7               	movwf	exp@sign^(0+128)
  5949  06A9  0837               	movf	exp@sign^(0+128),w
  5950  06AA  1903               	btfsc	3,2
  5951  06AB  2EC6               	goto	l3618
  5952  06AC  082E               	movf	exp@x^(0+128),w
  5953  06AD  0020               	movlb	0	; select bank0
  5954  06AE  00CC               	movwf	___ftneg@f1
  5955  06AF  0021               	movlb	1	; select bank1
  5956  06B0  082F               	movf	(exp@x+1)^(0+128),w
  5957  06B1  0020               	movlb	0	; select bank0
  5958  06B2  00CD               	movwf	___ftneg@f1+1
  5959  06B3  0021               	movlb	1	; select bank1
  5960  06B4  0830               	movf	(exp@x+2)^(0+128),w
  5961  06B5  0020               	movlb	0	; select bank0
  5962  06B6  00CE               	movwf	___ftneg@f1+2
  5963  06B7  3194  24F9  3186   	fcall	___ftneg
  5964  06BA  0020               	movlb	0	; select bank0
  5965  06BB  084C               	movf	?___ftneg,w
  5966  06BC  0021               	movlb	1	; select bank1
  5967  06BD  00AE               	movwf	exp@x^(0+128)
  5968  06BE  0020               	movlb	0	; select bank0
  5969  06BF  084D               	movf	?___ftneg+1,w
  5970  06C0  0021               	movlb	1	; select bank1
  5971  06C1  00AF               	movwf	(exp@x+1)^(0+128)
  5972  06C2  0020               	movlb	0	; select bank0
  5973  06C3  084E               	movf	?___ftneg+2,w
  5974  06C4  0021               	movlb	1	; select bank1
  5975  06C5  00B0               	movwf	(exp@x+2)^(0+128)
  5976  06C6                     l3618:	
  5977  06C6  30AA               	movlw	170
  5978  06C7  0020               	movlb	0	; select bank0
  5979  06C8  00CF               	movwf	___ftmul@f1
  5980  06C9  30B8               	movlw	184
  5981  06CA  00D0               	movwf	___ftmul@f1+1
  5982  06CB  303F               	movlw	63
  5983  06CC  00D1               	movwf	___ftmul@f1+2
  5984  06CD  0021               	movlb	1	; select bank1
  5985  06CE  082E               	movf	exp@x^(0+128),w
  5986  06CF  0020               	movlb	0	; select bank0
  5987  06D0  00D2               	movwf	___ftmul@f2
  5988  06D1  0021               	movlb	1	; select bank1
  5989  06D2  082F               	movf	(exp@x+1)^(0+128),w
  5990  06D3  0020               	movlb	0	; select bank0
  5991  06D4  00D3               	movwf	___ftmul@f2+1
  5992  06D5  0021               	movlb	1	; select bank1
  5993  06D6  0830               	movf	(exp@x+2)^(0+128),w
  5994  06D7  0020               	movlb	0	; select bank0
  5995  06D8  00D4               	movwf	___ftmul@f2+2
  5996  06D9  318B  234F  3186   	fcall	___ftmul
  5997  06DC  0020               	movlb	0	; select bank0
  5998  06DD  084F               	movf	?___ftmul,w
  5999  06DE  0021               	movlb	1	; select bank1
  6000  06DF  00AE               	movwf	exp@x^(0+128)
  6001  06E0  0020               	movlb	0	; select bank0
  6002  06E1  0850               	movf	?___ftmul+1,w
  6003  06E2  0021               	movlb	1	; select bank1
  6004  06E3  00AF               	movwf	(exp@x+1)^(0+128)
  6005  06E4  0020               	movlb	0	; select bank0
  6006  06E5  0851               	movf	?___ftmul+2,w
  6007  06E6  0021               	movlb	1	; select bank1
  6008  06E7  00B0               	movwf	(exp@x+2)^(0+128)
  6009  06E8  082E               	movf	exp@x^(0+128),w
  6010  06E9  0020               	movlb	0	; select bank0
  6011  06EA  00EC               	movwf	floor@x
  6012  06EB  0021               	movlb	1	; select bank1
  6013  06EC  082F               	movf	(exp@x+1)^(0+128),w
  6014  06ED  0020               	movlb	0	; select bank0
  6015  06EE  00ED               	movwf	floor@x+1
  6016  06EF  0021               	movlb	1	; select bank1
  6017  06F0  0830               	movf	(exp@x+2)^(0+128),w
  6018  06F1  0020               	movlb	0	; select bank0
  6019  06F2  00EE               	movwf	floor@x+2
  6020  06F3  318A  220C  3186   	fcall	_floor
  6021  06F6  0020               	movlb	0	; select bank0
  6022  06F7  086C               	movf	?_floor,w
  6023  06F8  0021               	movlb	1	; select bank1
  6024  06F9  00B2               	movwf	_exp$1028^(0+128)
  6025  06FA  0020               	movlb	0	; select bank0
  6026  06FB  086D               	movf	?_floor+1,w
  6027  06FC  0021               	movlb	1	; select bank1
  6028  06FD  00B3               	movwf	(_exp$1028+1)^(0+128)
  6029  06FE  0020               	movlb	0	; select bank0
  6030  06FF  086E               	movf	?_floor+2,w
  6031  0700  0021               	movlb	1	; select bank1
  6032  0701  00B4               	movwf	(_exp$1028+2)^(0+128)
  6033  0702  0832               	movf	_exp$1028^(0+128),w
  6034  0703  0020               	movlb	0	; select bank0
  6035  0704  00B6               	movwf	___fttol@f1
  6036  0705  0021               	movlb	1	; select bank1
  6037  0706  0833               	movf	(_exp$1028+1)^(0+128),w
  6038  0707  0020               	movlb	0	; select bank0
  6039  0708  00B7               	movwf	___fttol@f1+1
  6040  0709  0021               	movlb	1	; select bank1
  6041  070A  0834               	movf	(_exp$1028+2)^(0+128),w
  6042  070B  0020               	movlb	0	; select bank0
  6043  070C  00B8               	movwf	___fttol@f1+2
  6044  070D  3189  2185  3186   	fcall	___fttol
  6045  0710  0020               	movlb	0	; select bank0
  6046  0711  0837               	movf	?___fttol+1,w
  6047  0712  0021               	movlb	1	; select bank1
  6048  0713  00B6               	movwf	(exp@exponent+1)^(0+128)
  6049  0714  0020               	movlb	0	; select bank0
  6050  0715  0836               	movf	?___fttol,w
  6051  0716  0021               	movlb	1	; select bank1
  6052  0717  00B5               	movwf	exp@exponent^(0+128)
  6053  0718  0836               	movf	(exp@exponent+1)^(0+128),w
  6054  0719  0020               	movlb	0	; select bank0
  6055  071A  00A1               	movwf	___awtoft@c+1
  6056  071B  0021               	movlb	1	; select bank1
  6057  071C  0835               	movf	exp@exponent^(0+128),w
  6058  071D  0020               	movlb	0	; select bank0
  6059  071E  00A0               	movwf	___awtoft@c
  6060  071F  3196  261C  3186   	fcall	___awtoft
  6061  0722  0020               	movlb	0	; select bank0
  6062  0723  0820               	movf	?___awtoft,w
  6063  0724  0021               	movlb	1	; select bank1
  6064  0725  00A0               	movwf	___ftsub@f2^(0+128)
  6065  0726  0020               	movlb	0	; select bank0
  6066  0727  0821               	movf	?___awtoft+1,w
  6067  0728  0021               	movlb	1	; select bank1
  6068  0729  00A1               	movwf	(___ftsub@f2+1)^(0+128)
  6069  072A  0020               	movlb	0	; select bank0
  6070  072B  0822               	movf	?___awtoft+2,w
  6071  072C  0021               	movlb	1	; select bank1
  6072  072D  00A2               	movwf	(___ftsub@f2+2)^(0+128)
  6073  072E  082E               	movf	exp@x^(0+128),w
  6074  072F  00A3               	movwf	___ftsub@f1^(0+128)
  6075  0730  082F               	movf	(exp@x+1)^(0+128),w
  6076  0731  00A4               	movwf	(___ftsub@f1+1)^(0+128)
  6077  0732  0830               	movf	(exp@x+2)^(0+128),w
  6078  0733  00A5               	movwf	(___ftsub@f1+2)^(0+128)
  6079  0734  3196  26B7  3186   	fcall	___ftsub
  6080  0737  0021               	movlb	1	; select bank1
  6081  0738  0820               	movf	?___ftsub^(0+128),w
  6082  0739  00AE               	movwf	exp@x^(0+128)
  6083  073A  0821               	movf	(?___ftsub+1)^(0+128),w
  6084  073B  00AF               	movwf	(exp@x+1)^(0+128)
  6085  073C  0822               	movf	(?___ftsub+2)^(0+128),w
  6086  073D  00B0               	movwf	(exp@x+2)^(0+128)
  6087  073E  082E               	movf	exp@x^(0+128),w
  6088  073F  00A0               	movwf	eval_poly@x^(0+128)
  6089  0740  082F               	movf	(exp@x+1)^(0+128),w
  6090  0741  00A1               	movwf	(eval_poly@x+1)^(0+128)
  6091  0742  0830               	movf	(exp@x+2)^(0+128),w
  6092  0743  00A2               	movwf	(eval_poly@x+2)^(0+128)
  6093  0744  3060               	movlw	low (exp@coeff| (0+32768))
  6094  0745  00A3               	movwf	eval_poly@d^(0+128)
  6095  0746  3098               	movlw	high (exp@coeff| (0+32768))
  6096  0747  00A4               	movwf	(eval_poly@d^(0+128)+1)
  6097  0748  3009               	movlw	9
  6098  0749  00A5               	movwf	eval_poly@n^(0+128)
  6099  074A  3000               	movlw	0
  6100  074B  00A6               	movwf	(eval_poly@n^(0+128)+1)
  6101  074C  3188  201F  3186   	fcall	_eval_poly
  6102  074F  0021               	movlb	1	; select bank1
  6103  0750  0820               	movf	?_eval_poly^(0+128),w
  6104  0751  00A7               	movwf	ldexp@value^(0+128)
  6105  0752  0821               	movf	(?_eval_poly+1)^(0+128),w
  6106  0753  00A8               	movwf	(ldexp@value+1)^(0+128)
  6107  0754  0822               	movf	(?_eval_poly+2)^(0+128),w
  6108  0755  00A9               	movwf	(ldexp@value+2)^(0+128)
  6109  0756  0836               	movf	(exp@exponent+1)^(0+128),w
  6110  0757  00AB               	movwf	(ldexp@newexp+1)^(0+128)
  6111  0758  0835               	movf	exp@exponent^(0+128),w
  6112  0759  00AA               	movwf	ldexp@newexp^(0+128)
  6113  075A  3188  208F  3186   	fcall	_ldexp
  6114  075D  0021               	movlb	1	; select bank1
  6115  075E  0827               	movf	?_ldexp^(0+128),w
  6116  075F  00AE               	movwf	exp@x^(0+128)
  6117  0760  0828               	movf	(?_ldexp+1)^(0+128),w
  6118  0761  00AF               	movwf	(exp@x+1)^(0+128)
  6119  0762  0829               	movf	(?_ldexp+2)^(0+128),w
  6120  0763  00B0               	movwf	(exp@x+2)^(0+128)
  6121  0764  0837               	movf	exp@sign^(0+128),w
  6122  0765  1903               	btfsc	3,2
  6123  0766  0008               	return
  6124  0767  0A2E               	incf	exp@x^(0+128),w
  6125  0768  307F               	movlw	127
  6126  0769  1903               	skipnz
  6127  076A  062F               	xorwf	(exp@x+1)^(0+128),w
  6128  076B  307F               	movlw	127
  6129  076C  1903               	skipnz
  6130  076D  0630               	xorwf	(exp@x+2)^(0+128),w
  6131  076E  1D03               	btfss	3,2
  6132  076F  2F77               	goto	l3636
  6133  0770  3000               	movlw	0
  6134  0771  00AE               	movwf	?_exp^(0+128)
  6135  0772  3000               	movlw	0
  6136  0773  00AF               	movwf	(?_exp+1)^(0+128)
  6137  0774  3000               	movlw	0
  6138  0775  00B0               	movwf	(?_exp+2)^(0+128)
  6139  0776  0008               	return
  6140  0777                     l3636:	
  6141  0777  082E               	movf	exp@x^(0+128),w
  6142  0778  0020               	movlb	0	; select bank0
  6143  0779  00A6               	movwf	___ftdiv@f2
  6144  077A  0021               	movlb	1	; select bank1
  6145  077B  082F               	movf	(exp@x+1)^(0+128),w
  6146  077C  0020               	movlb	0	; select bank0
  6147  077D  00A7               	movwf	___ftdiv@f2+1
  6148  077E  0021               	movlb	1	; select bank1
  6149  077F  0830               	movf	(exp@x+2)^(0+128),w
  6150  0780  0020               	movlb	0	; select bank0
  6151  0781  00A8               	movwf	___ftdiv@f2+2
  6152  0782  3000               	movlw	0
  6153  0783  00A9               	movwf	___ftdiv@f1
  6154  0784  3080               	movlw	128
  6155  0785  00AA               	movwf	___ftdiv@f1+1
  6156  0786  303F               	movlw	63
  6157  0787  00AB               	movwf	___ftdiv@f1+2
  6158  0788  318A  22A6         	fcall	___ftdiv
  6159  078A  0020               	movlb	0	; select bank0
  6160  078B  0826               	movf	?___ftdiv,w
  6161  078C  0021               	movlb	1	; select bank1
  6162  078D  00AE               	movwf	?_exp^(0+128)
  6163  078E  0020               	movlb	0	; select bank0
  6164  078F  0827               	movf	?___ftdiv+1,w
  6165  0790  0021               	movlb	1	; select bank1
  6166  0791  00AF               	movwf	(?_exp+1)^(0+128)
  6167  0792  0020               	movlb	0	; select bank0
  6168  0793  0828               	movf	?___ftdiv+2,w
  6169  0794  0021               	movlb	1	; select bank1
  6170  0795  00B0               	movwf	(?_exp+2)^(0+128)
  6171  0796  0008               	return
  6172  0797                     __end_of_exp:	
  6173                           
  6174                           	psect	text13
  6175  088F                     __ptext13:	
  6176 ;; *************** function _ldexp *****************
  6177 ;; Defined at:
  6178 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  value           3    7[BANK1 ] unsigned char 
  6181 ;;  newexp          2   10[BANK1 ] int 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  3    7[BANK1 ] int 
  6186 ;; Registers used:
  6187 ;;		wreg, status,2, status,0, pclath, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:        7 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    5
  6200 ;; This function calls:
  6201 ;;		___ftge
  6202 ;; This function is called by:
  6203 ;;		_exp
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           
  6208                           ;psect for function _ldexp
  6209  088F                     _ldexp:	
  6210                           
  6211                           ;incstack = 0
  6212                           ; Regs used in _ldexp: [wreg+status,2+status,0+pclath+cstack]
  6213  088F  0021               	movlb	1	; select bank1
  6214  0890  0829               	movf	(ldexp@value+2)^(0+128),w
  6215  0891  0428               	iorwf	(ldexp@value+1)^(0+128),w
  6216  0892  0427               	iorwf	ldexp@value^(0+128),w
  6217  0893  1D03               	skipz
  6218  0894  289C               	goto	l3406
  6219  0895  3000               	movlw	0
  6220  0896  00A7               	movwf	?_ldexp^(0+128)
  6221  0897  3000               	movlw	0
  6222  0898  00A8               	movwf	(?_ldexp+1)^(0+128)
  6223  0899  3000               	movlw	0
  6224  089A  00A9               	movwf	(?_ldexp+2)^(0+128)
  6225  089B  0008               	return
  6226  089C                     l3406:	
  6227  089C  0829               	movf	(ldexp@value^(0+128)+2),w
  6228  089D  397F               	andlw	127
  6229  089E  00AC               	movwf	??_ldexp^(0+128)
  6230  089F  01AD               	clrf	(??_ldexp^(0+128)+1)
  6231  08A0  35AC               	lslf	??_ldexp^(0+128),f
  6232  08A1  0DAD               	rlf	(??_ldexp^(0+128)+1),f
  6233  08A2  082C               	movf	??_ldexp^(0+128),w
  6234  08A3  07AA               	addwf	ldexp@newexp^(0+128),f
  6235  08A4  082D               	movf	(??_ldexp+1)^(0+128),w
  6236  08A5  3DAB               	addwfc	(ldexp@newexp+1)^(0+128),f
  6237  08A6  0D28               	rlf	(ldexp@value^(0+128)+1),w
  6238  08A7  0D28               	rlf	(ldexp@value^(0+128)+1),w
  6239  08A8  3901               	andlw	1
  6240  08A9  00AC               	movwf	??_ldexp^(0+128)
  6241  08AA  01AD               	clrf	(??_ldexp^(0+128)+1)
  6242  08AB  082C               	movf	??_ldexp^(0+128),w
  6243  08AC  07AA               	addwf	ldexp@newexp^(0+128),f
  6244  08AD  082D               	movf	(??_ldexp+1)^(0+128),w
  6245  08AE  3DAB               	addwfc	(ldexp@newexp+1)^(0+128),f
  6246  08AF  1FAB               	btfss	(ldexp@newexp+1)^(0+128),7
  6247  08B0  28BE               	goto	l3416
  6248  08B1  3022               	movlw	34
  6249  08B2  0022               	movlb	2	; select bank2
  6250  08B3  00BE               	movwf	_errno^(0+256)
  6251  08B4  3000               	movlw	0
  6252  08B5  00BF               	movwf	(_errno^(0+256)+1)
  6253  08B6  3000               	movlw	0
  6254  08B7  0021               	movlb	1	; select bank1
  6255  08B8  00A7               	movwf	?_ldexp^(0+128)
  6256  08B9  3000               	movlw	0
  6257  08BA  00A8               	movwf	(?_ldexp+1)^(0+128)
  6258  08BB  3000               	movlw	0
  6259  08BC  00A9               	movwf	(?_ldexp+2)^(0+128)
  6260  08BD  0008               	return
  6261  08BE                     l3416:	
  6262  08BE  082B               	movf	(ldexp@newexp+1)^(0+128),w
  6263  08BF  3A80               	xorlw	128
  6264  08C0  00AC               	movwf	??_ldexp^(0+128)
  6265  08C1  3081               	movlw	129
  6266  08C2  022C               	subwf	??_ldexp^(0+128),w
  6267  08C3  1D03               	skipz
  6268  08C4  28C7               	goto	u4455
  6269  08C5  3000               	movlw	0
  6270  08C6  022A               	subwf	ldexp@newexp^(0+128),w
  6271  08C7                     u4455:	
  6272  08C7  1C03               	skipc
  6273  08C8  28F0               	goto	l3432
  6274  08C9  3022               	movlw	34
  6275  08CA  0022               	movlb	2	; select bank2
  6276  08CB  00BE               	movwf	_errno^(0+256)
  6277  08CC  3000               	movlw	0
  6278  08CD  00BF               	movwf	(_errno^(0+256)+1)
  6279  08CE  0021               	movlb	1	; select bank1
  6280  08CF  0827               	movf	ldexp@value^(0+128),w
  6281  08D0  00F2               	movwf	___ftge@ff1
  6282  08D1  0828               	movf	(ldexp@value+1)^(0+128),w
  6283  08D2  00F3               	movwf	___ftge@ff1+1
  6284  08D3  0829               	movf	(ldexp@value+2)^(0+128),w
  6285  08D4  00F4               	movwf	___ftge@ff1+2
  6286  08D5  3000               	movlw	0
  6287  08D6  00F5               	movwf	___ftge@ff2
  6288  08D7  3000               	movlw	0
  6289  08D8  00F6               	movwf	___ftge@ff2+1
  6290  08D9  3000               	movlw	0
  6291  08DA  00F7               	movwf	___ftge@ff2+2
  6292  08DB  3197  27C3  3188   	fcall	___ftge
  6293  08DE  1803               	btfsc	3,0
  6294  08DF  28E8               	goto	l3428
  6295  08E0  30FF               	movlw	255
  6296  08E1  0021               	movlb	1	; select bank1
  6297  08E2  00A7               	movwf	?_ldexp^(0+128)
  6298  08E3  307F               	movlw	127
  6299  08E4  00A8               	movwf	(?_ldexp+1)^(0+128)
  6300  08E5  30FF               	movlw	255
  6301  08E6  00A9               	movwf	(?_ldexp+2)^(0+128)
  6302  08E7  0008               	return
  6303  08E8                     l3428:	
  6304  08E8  30FF               	movlw	255
  6305  08E9  0021               	movlb	1	; select bank1
  6306  08EA  00A7               	movwf	?_ldexp^(0+128)
  6307  08EB  307F               	movlw	127
  6308  08EC  00A8               	movwf	(?_ldexp+1)^(0+128)
  6309  08ED  307F               	movlw	127
  6310  08EE  00A9               	movwf	(?_ldexp+2)^(0+128)
  6311  08EF  0008               	return
  6312  08F0                     l3432:	
  6313  08F0  0021               	movlb	1	; select bank1
  6314  08F1  082B               	movf	(ldexp@newexp+1)^(0+128),w
  6315  08F2  00AD               	movwf	(??_ldexp^(0+128)+1)
  6316  08F3  082A               	movf	ldexp@newexp^(0+128),w
  6317  08F4  00AC               	movwf	??_ldexp^(0+128)
  6318  08F5  0D2D               	rlf	(??_ldexp^(0+128)+1),w
  6319  08F6  0CAD               	rrf	(??_ldexp^(0+128)+1),f
  6320  08F7  0CAC               	rrf	??_ldexp^(0+128),f
  6321  08F8  0829               	movf	(ldexp@value^(0+128)+2),w
  6322  08F9  062C               	xorwf	??_ldexp^(0+128),w
  6323  08FA  3980               	andlw	-128
  6324  08FB  062C               	xorwf	??_ldexp^(0+128),w
  6325  08FC  00A9               	movwf	(ldexp@value^(0+128)+2)
  6326  08FD  082A               	movf	ldexp@newexp^(0+128),w
  6327  08FE  3901               	andlw	1
  6328  08FF  00AC               	movwf	??_ldexp^(0+128)
  6329  0900  0CAC               	rrf	??_ldexp^(0+128),f
  6330  0901  0CAC               	rrf	??_ldexp^(0+128),f
  6331  0902  0828               	movf	(ldexp@value^(0+128)+1),w
  6332  0903  062C               	xorwf	??_ldexp^(0+128),w
  6333  0904  397F               	andlw	-129
  6334  0905  062C               	xorwf	??_ldexp^(0+128),w
  6335  0906  00A8               	movwf	(ldexp@value^(0+128)+1)
  6336  0907  0008               	return
  6337  0908                     __end_of_ldexp:	
  6338                           
  6339                           	psect	text14
  6340  0A0C                     __ptext14:	
  6341 ;; *************** function _floor *****************
  6342 ;; Defined at:
  6343 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  x               3   76[BANK0 ] int 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  i               3    0[BANK1 ] int 
  6348 ;;  expon           2    3[BANK1 ] int 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  3   76[BANK0 ] int 
  6351 ;; Registers used:
  6352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6358 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Totals:         0       4       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;Total ram usage:        9 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    6
  6365 ;; This function calls:
  6366 ;;		___altoft
  6367 ;;		___ftadd
  6368 ;;		___ftge
  6369 ;;		___fttol
  6370 ;;		_frexp
  6371 ;; This function is called by:
  6372 ;;		_exp
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           
  6377                           ;psect for function _floor
  6378  0A0C                     _floor:	
  6379                           
  6380                           ;incstack = 0
  6381                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6382  0A0C  0020               	movlb	0	; select bank0
  6383  0A0D  086C               	movf	floor@x,w
  6384  0A0E  00F2               	movwf	frexp@value
  6385  0A0F  086D               	movf	floor@x+1,w
  6386  0A10  00F3               	movwf	frexp@value+1
  6387  0A11  086E               	movf	floor@x+2,w
  6388  0A12  00F4               	movwf	frexp@value+2
  6389  0A13  30A3               	movlw	(low (floor@expon| 0))& (0+255)
  6390  0A14  00EF               	movwf	??_floor
  6391  0A15  086F               	movf	??_floor,w
  6392  0A16  00F5               	movwf	frexp@eptr
  6393  0A17  3197  274B  318A   	fcall	_frexp
  6394  0A1A  0021               	movlb	1	; select bank1
  6395  0A1B  1FA4               	btfss	(floor@expon+1)^(0+128),7
  6396  0A1C  2A3F               	goto	l3376
  6397  0A1D  0020               	movlb	0	; select bank0
  6398  0A1E  086C               	movf	floor@x,w
  6399  0A1F  00F2               	movwf	___ftge@ff1
  6400  0A20  086D               	movf	floor@x+1,w
  6401  0A21  00F3               	movwf	___ftge@ff1+1
  6402  0A22  086E               	movf	floor@x+2,w
  6403  0A23  00F4               	movwf	___ftge@ff1+2
  6404  0A24  3000               	movlw	0
  6405  0A25  00F5               	movwf	___ftge@ff2
  6406  0A26  3000               	movlw	0
  6407  0A27  00F6               	movwf	___ftge@ff2+1
  6408  0A28  3000               	movlw	0
  6409  0A29  00F7               	movwf	___ftge@ff2+2
  6410  0A2A  3197  27C3  318A   	fcall	___ftge
  6411  0A2D  1803               	btfsc	3,0
  6412  0A2E  2A37               	goto	l3372
  6413  0A2F  3000               	movlw	0
  6414  0A30  0020               	movlb	0	; select bank0
  6415  0A31  00EC               	movwf	?_floor
  6416  0A32  3080               	movlw	128
  6417  0A33  00ED               	movwf	?_floor+1
  6418  0A34  30BF               	movlw	191
  6419  0A35  00EE               	movwf	?_floor+2
  6420  0A36  0008               	return
  6421  0A37                     l3372:	
  6422  0A37  3000               	movlw	0
  6423  0A38  0020               	movlb	0	; select bank0
  6424  0A39  00EC               	movwf	?_floor
  6425  0A3A  3000               	movlw	0
  6426  0A3B  00ED               	movwf	?_floor+1
  6427  0A3C  3000               	movlw	0
  6428  0A3D  00EE               	movwf	?_floor+2
  6429  0A3E  0008               	return
  6430  0A3F                     l3376:	
  6431  0A3F  3000               	movlw	0
  6432  0A40  0021               	movlb	1	; select bank1
  6433  0A41  0224               	subwf	(floor@expon+1)^(0+128),w
  6434  0A42  3015               	movlw	21
  6435  0A43  1903               	skipnz
  6436  0A44  0223               	subwf	floor@expon^(0+128),w
  6437  0A45  1803               	btfsc	3,0
  6438  0A46  0008               	return
  6439  0A47  0020               	movlb	0	; select bank0
  6440  0A48  086C               	movf	floor@x,w
  6441  0A49  00B6               	movwf	___fttol@f1
  6442  0A4A  086D               	movf	floor@x+1,w
  6443  0A4B  00B7               	movwf	___fttol@f1+1
  6444  0A4C  086E               	movf	floor@x+2,w
  6445  0A4D  00B8               	movwf	___fttol@f1+2
  6446  0A4E  3189  2185  318A   	fcall	___fttol
  6447  0A51  0020               	movlb	0	; select bank0
  6448  0A52  0839               	movf	?___fttol+3,w
  6449  0A53  00C7               	movwf	___altoft@c+3
  6450  0A54  0838               	movf	?___fttol+2,w
  6451  0A55  00C6               	movwf	___altoft@c+2
  6452  0A56  0837               	movf	?___fttol+1,w
  6453  0A57  00C5               	movwf	___altoft@c+1
  6454  0A58  0836               	movf	?___fttol,w
  6455  0A59  00C4               	movwf	___altoft@c
  6456  0A5A  3197  2786  318A   	fcall	___altoft
  6457  0A5D  0020               	movlb	0	; select bank0
  6458  0A5E  0844               	movf	?___altoft,w
  6459  0A5F  0021               	movlb	1	; select bank1
  6460  0A60  00A0               	movwf	floor@i^(0+128)
  6461  0A61  0020               	movlb	0	; select bank0
  6462  0A62  0845               	movf	?___altoft+1,w
  6463  0A63  0021               	movlb	1	; select bank1
  6464  0A64  00A1               	movwf	(floor@i+1)^(0+128)
  6465  0A65  0020               	movlb	0	; select bank0
  6466  0A66  0846               	movf	?___altoft+2,w
  6467  0A67  0021               	movlb	1	; select bank1
  6468  0A68  00A2               	movwf	(floor@i+2)^(0+128)
  6469  0A69  0020               	movlb	0	; select bank0
  6470  0A6A  086C               	movf	floor@x,w
  6471  0A6B  00F2               	movwf	___ftge@ff1
  6472  0A6C  086D               	movf	floor@x+1,w
  6473  0A6D  00F3               	movwf	___ftge@ff1+1
  6474  0A6E  086E               	movf	floor@x+2,w
  6475  0A6F  00F4               	movwf	___ftge@ff1+2
  6476  0A70  0021               	movlb	1	; select bank1
  6477  0A71  0820               	movf	floor@i^(0+128),w
  6478  0A72  00F5               	movwf	___ftge@ff2
  6479  0A73  0821               	movf	(floor@i+1)^(0+128),w
  6480  0A74  00F6               	movwf	___ftge@ff2+1
  6481  0A75  0822               	movf	(floor@i+2)^(0+128),w
  6482  0A76  00F7               	movwf	___ftge@ff2+2
  6483  0A77  3197  27C3  318A   	fcall	___ftge
  6484  0A7A  1803               	btfsc	3,0
  6485  0A7B  2A99               	goto	l3386
  6486  0A7C  3000               	movlw	0
  6487  0A7D  0020               	movlb	0	; select bank0
  6488  0A7E  00DF               	movwf	___ftadd@f1
  6489  0A7F  3080               	movlw	128
  6490  0A80  00E0               	movwf	___ftadd@f1+1
  6491  0A81  30BF               	movlw	191
  6492  0A82  00E1               	movwf	___ftadd@f1+2
  6493  0A83  0021               	movlb	1	; select bank1
  6494  0A84  0820               	movf	floor@i^(0+128),w
  6495  0A85  0020               	movlb	0	; select bank0
  6496  0A86  00E2               	movwf	___ftadd@f2
  6497  0A87  0021               	movlb	1	; select bank1
  6498  0A88  0821               	movf	(floor@i+1)^(0+128),w
  6499  0A89  0020               	movlb	0	; select bank0
  6500  0A8A  00E3               	movwf	___ftadd@f2+1
  6501  0A8B  0021               	movlb	1	; select bank1
  6502  0A8C  0822               	movf	(floor@i+2)^(0+128),w
  6503  0A8D  0020               	movlb	0	; select bank0
  6504  0A8E  00E4               	movwf	___ftadd@f2+2
  6505  0A8F  318C  24C8         	fcall	___ftadd
  6506  0A91  0020               	movlb	0	; select bank0
  6507  0A92  085F               	movf	?___ftadd,w
  6508  0A93  00EC               	movwf	?_floor
  6509  0A94  0860               	movf	?___ftadd+1,w
  6510  0A95  00ED               	movwf	?_floor+1
  6511  0A96  0861               	movf	?___ftadd+2,w
  6512  0A97  00EE               	movwf	?_floor+2
  6513  0A98  0008               	return
  6514  0A99                     l3386:	
  6515  0A99  0021               	movlb	1	; select bank1
  6516  0A9A  0820               	movf	floor@i^(0+128),w
  6517  0A9B  0020               	movlb	0	; select bank0
  6518  0A9C  00EC               	movwf	?_floor
  6519  0A9D  0021               	movlb	1	; select bank1
  6520  0A9E  0821               	movf	(floor@i+1)^(0+128),w
  6521  0A9F  0020               	movlb	0	; select bank0
  6522  0AA0  00ED               	movwf	?_floor+1
  6523  0AA1  0021               	movlb	1	; select bank1
  6524  0AA2  0822               	movf	(floor@i+2)^(0+128),w
  6525  0AA3  0020               	movlb	0	; select bank0
  6526  0AA4  00EE               	movwf	?_floor+2
  6527  0AA5  0008               	return
  6528  0AA6                     __end_of_floor:	
  6529                           
  6530                           	psect	text15
  6531  174B                     __ptext15:	
  6532 ;; *************** function _frexp *****************
  6533 ;; Defined at:
  6534 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  value           3    2[COMMON] int 
  6537 ;;  eptr            1    5[COMMON] PTR int 
  6538 ;;		 -> log@exponent(2), floor@expon(2), 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;		None
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  3    2[COMMON] PTR int 
  6543 ;; Registers used:
  6544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6550 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;Total ram usage:        6 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    4
  6557 ;; This function calls:
  6558 ;;		Nothing
  6559 ;; This function is called by:
  6560 ;;		_floor
  6561 ;;		_log
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function _frexp
  6567  174B                     _frexp:	
  6568                           
  6569                           ;incstack = 0
  6570                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  6571  174B  0874               	movf	frexp@value+2,w
  6572  174C  0473               	iorwf	frexp@value+1,w
  6573  174D  0472               	iorwf	frexp@value,w
  6574  174E  1D03               	skipz
  6575  174F  2F5D               	goto	l2294
  6576  1750  0875               	movf	frexp@eptr,w
  6577  1751  0086               	movwf	6
  6578  1752  0187               	clrf	7
  6579  1753  3000               	movlw	0
  6580  1754  3FC0               	movwi [0]fsr1
  6581  1755  3FC1               	movwi [1]fsr1
  6582  1756  3000               	movlw	0
  6583  1757  00F2               	movwf	?_frexp
  6584  1758  3000               	movlw	0
  6585  1759  00F3               	movwf	?_frexp+1
  6586  175A  3000               	movlw	0
  6587  175B  00F4               	movwf	?_frexp+2
  6588  175C  0008               	return
  6589  175D                     l2294:	
  6590  175D  0874               	movf	frexp@value+2,w
  6591  175E  397F               	andlw	127
  6592  175F  00F6               	movwf	??_frexp
  6593  1760  01F7               	clrf	??_frexp+1
  6594  1761  35F6               	lslf	??_frexp,f
  6595  1762  0DF7               	rlf	??_frexp+1,f
  6596  1763  0875               	movf	frexp@eptr,w
  6597  1764  0086               	movwf	6
  6598  1765  0187               	clrf	7
  6599  1766  0876               	movf	??_frexp,w
  6600  1767  3FC0               	movwi [0]fsr1
  6601  1768  0877               	movf	??_frexp+1,w
  6602  1769  3FC1               	movwi [1]fsr1
  6603  176A  0D73               	rlf	frexp@value+1,w
  6604  176B  0D73               	rlf	frexp@value+1,w
  6605  176C  3901               	andlw	1
  6606  176D  00F6               	movwf	??_frexp
  6607  176E  01F7               	clrf	??_frexp+1
  6608  176F  0875               	movf	frexp@eptr,w
  6609  1770  0086               	movwf	6
  6610  1771  0187               	clrf	7
  6611  1772  0876               	movf	??_frexp,w
  6612  1773  0481               	iorwf	1,f
  6613  1774  3141               	addfsr 1,1
  6614  1775  0877               	movf	??_frexp+1,w
  6615  1776  0481               	iorwf	1,f
  6616  1777  0875               	movf	frexp@eptr,w
  6617  1778  0086               	movwf	6
  6618  1779  0187               	clrf	7
  6619  177A  3082               	movlw	130
  6620  177B  0781               	addwf	1,f
  6621  177C  3141               	addfsr 1,1
  6622  177D  30FF               	movlw	255
  6623  177E  3D81               	addwfc	1,f
  6624  177F  317F               	addfsr 1,-1
  6625  1780  0874               	movf	frexp@value+2,w
  6626  1781  3980               	andlw	-128
  6627  1782  383F               	iorlw	63
  6628  1783  00F4               	movwf	frexp@value+2
  6629  1784  13F3               	bcf	frexp@value+1,7
  6630  1785  0008               	return
  6631  1786                     __end_of_frexp:	
  6632                           
  6633                           	psect	text16
  6634  0985                     __ptext16:	
  6635 ;; *************** function ___fttol *****************
  6636 ;; Defined at:
  6637 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  f1              3   22[BANK0 ] float 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  lval            4   31[BANK0 ] unsigned long 
  6642 ;;  exp1            1   35[BANK0 ] unsigned char 
  6643 ;;  sign1           1   30[BANK0 ] unsigned char 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  4   22[BANK0 ] long 
  6646 ;; Registers used:
  6647 ;;		wreg, status,2, status,0
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;Total ram usage:       14 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    4
  6660 ;; This function calls:
  6661 ;;		Nothing
  6662 ;; This function is called by:
  6663 ;;		_main
  6664 ;;		_pow
  6665 ;;		_exp
  6666 ;;		_floor
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           
  6671                           ;psect for function ___fttol
  6672  0985                     ___fttol:	
  6673                           
  6674                           ;incstack = 0
  6675                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6676  0985  0020               	movlb	0	; select bank0
  6677  0986  0836               	movf	___fttol@f1,w
  6678  0987  00BA               	movwf	??___fttol
  6679  0988  0837               	movf	___fttol@f1+1,w
  6680  0989  00BB               	movwf	??___fttol+1
  6681  098A  0838               	movf	___fttol@f1+2,w
  6682  098B  00BC               	movwf	??___fttol+2
  6683  098C  1003               	clrc
  6684  098D  0D3B               	rlf	??___fttol+1,w
  6685  098E  0D3C               	rlf	??___fttol+2,w
  6686  098F  00BD               	movwf	??___fttol+3
  6687  0990  083D               	movf	??___fttol+3,w
  6688  0991  00C3               	movwf	___fttol@exp1
  6689  0992  0843               	movf	___fttol@exp1,w
  6690  0993  1D03               	btfss	3,2
  6691  0994  299E               	goto	l2250
  6692  0995  3000               	movlw	0
  6693  0996  00B9               	movwf	?___fttol+3
  6694  0997  3000               	movlw	0
  6695  0998  00B8               	movwf	?___fttol+2
  6696  0999  3000               	movlw	0
  6697  099A  00B7               	movwf	?___fttol+1
  6698  099B  3000               	movlw	0
  6699  099C  00B6               	movwf	?___fttol
  6700  099D  0008               	return
  6701  099E                     l2250:	
  6702  099E  0836               	movf	___fttol@f1,w
  6703  099F  00BA               	movwf	??___fttol
  6704  09A0  0837               	movf	___fttol@f1+1,w
  6705  09A1  00BB               	movwf	??___fttol+1
  6706  09A2  0838               	movf	___fttol@f1+2,w
  6707  09A3  00BC               	movwf	??___fttol+2
  6708  09A4  3017               	movlw	23
  6709  09A5                     u2465:	
  6710  09A5  36BC               	lsrf	??___fttol+2,f
  6711  09A6  0CBB               	rrf	??___fttol+1,f
  6712  09A7  0CBA               	rrf	??___fttol,f
  6713  09A8  0B89               	decfsz	9,f
  6714  09A9  29A5               	goto	u2465
  6715  09AA  083A               	movf	??___fttol,w
  6716  09AB  00BD               	movwf	??___fttol+3
  6717  09AC  083D               	movf	??___fttol+3,w
  6718  09AD  00BE               	movwf	___fttol@sign1
  6719  09AE  17B7               	bsf	___fttol@f1+1,7
  6720  09AF  30FF               	movlw	255
  6721  09B0  05B6               	andwf	___fttol@f1,f
  6722  09B1  30FF               	movlw	255
  6723  09B2  05B7               	andwf	___fttol@f1+1,f
  6724  09B3  3000               	movlw	0
  6725  09B4  05B8               	andwf	___fttol@f1+2,f
  6726  09B5  0836               	movf	___fttol@f1,w
  6727  09B6  00BF               	movwf	___fttol@lval
  6728  09B7  0837               	movf	___fttol@f1+1,w
  6729  09B8  00C0               	movwf	___fttol@lval+1
  6730  09B9  0838               	movf	___fttol@f1+2,w
  6731  09BA  00C1               	movwf	___fttol@lval+2
  6732  09BB  01C2               	clrf	___fttol@lval+3
  6733  09BC  308E               	movlw	142
  6734  09BD  02C3               	subwf	___fttol@exp1,f
  6735  09BE  1FC3               	btfss	___fttol@exp1,7
  6736  09BF  29DC               	goto	l2270
  6737  09C0  0843               	movf	___fttol@exp1,w
  6738  09C1  3A80               	xorlw	128
  6739  09C2  3E8F               	addlw	143
  6740  09C3  1803               	skipnc
  6741  09C4  29CE               	goto	l2268
  6742  09C5  3000               	movlw	0
  6743  09C6  00B9               	movwf	?___fttol+3
  6744  09C7  3000               	movlw	0
  6745  09C8  00B8               	movwf	?___fttol+2
  6746  09C9  3000               	movlw	0
  6747  09CA  00B7               	movwf	?___fttol+1
  6748  09CB  3000               	movlw	0
  6749  09CC  00B6               	movwf	?___fttol
  6750  09CD  0008               	return
  6751  09CE                     l2268:	
  6752  09CE  3001               	movlw	1
  6753  09CF                     u2495:	
  6754  09CF  36C2               	lsrf	___fttol@lval+3,f
  6755  09D0  0CC1               	rrf	___fttol@lval+2,f
  6756  09D1  0CC0               	rrf	___fttol@lval+1,f
  6757  09D2  0CBF               	rrf	___fttol@lval,f
  6758  09D3  0B89               	decfsz	9,f
  6759  09D4  29CF               	goto	u2495
  6760  09D5  3001               	movlw	1
  6761  09D6  00BA               	movwf	??___fttol
  6762  09D7  083A               	movf	??___fttol,w
  6763  09D8  07C3               	addwf	___fttol@exp1,f
  6764  09D9  1903               	btfsc	3,2
  6765  09DA  29F5               	goto	l2278
  6766  09DB  29CE               	goto	l2268
  6767  09DC                     l2270:	
  6768  09DC  3018               	movlw	24
  6769  09DD  0243               	subwf	___fttol@exp1,w
  6770  09DE  1C03               	skipc
  6771  09DF  29F2               	goto	l691
  6772  09E0  3000               	movlw	0
  6773  09E1  00B9               	movwf	?___fttol+3
  6774  09E2  3000               	movlw	0
  6775  09E3  00B8               	movwf	?___fttol+2
  6776  09E4  3000               	movlw	0
  6777  09E5  00B7               	movwf	?___fttol+1
  6778  09E6  3000               	movlw	0
  6779  09E7  00B6               	movwf	?___fttol
  6780  09E8  0008               	return
  6781  09E9                     l2276:	
  6782  09E9  3001               	movlw	1
  6783  09EA                     u2525:	
  6784  09EA  35BF               	lslf	___fttol@lval,f
  6785  09EB  0DC0               	rlf	___fttol@lval+1,f
  6786  09EC  0DC1               	rlf	___fttol@lval+2,f
  6787  09ED  0DC2               	rlf	___fttol@lval+3,f
  6788  09EE  0B89               	decfsz	9,f
  6789  09EF  29EA               	goto	u2525
  6790  09F0  3001               	movlw	1
  6791  09F1  02C3               	subwf	___fttol@exp1,f
  6792  09F2                     l691:	
  6793  09F2  0843               	movf	___fttol@exp1,w
  6794  09F3  1D03               	btfss	3,2
  6795  09F4  29E9               	goto	l2276
  6796  09F5                     l2278:	
  6797  09F5  083E               	movf	___fttol@sign1,w
  6798  09F6  1903               	btfsc	3,2
  6799  09F7  2A03               	goto	l2282
  6800  09F8  09BF               	comf	___fttol@lval,f
  6801  09F9  09C0               	comf	___fttol@lval+1,f
  6802  09FA  09C1               	comf	___fttol@lval+2,f
  6803  09FB  09C2               	comf	___fttol@lval+3,f
  6804  09FC  0ABF               	incf	___fttol@lval,f
  6805  09FD  1903               	skipnz
  6806  09FE  0AC0               	incf	___fttol@lval+1,f
  6807  09FF  1903               	skipnz
  6808  0A00  0AC1               	incf	___fttol@lval+2,f
  6809  0A01  1903               	skipnz
  6810  0A02  0AC2               	incf	___fttol@lval+3,f
  6811  0A03                     l2282:	
  6812  0A03  0842               	movf	___fttol@lval+3,w
  6813  0A04  00B9               	movwf	?___fttol+3
  6814  0A05  0841               	movf	___fttol@lval+2,w
  6815  0A06  00B8               	movwf	?___fttol+2
  6816  0A07  0840               	movf	___fttol@lval+1,w
  6817  0A08  00B7               	movwf	?___fttol+1
  6818  0A09  083F               	movf	___fttol@lval,w
  6819  0A0A  00B6               	movwf	?___fttol
  6820  0A0B  0008               	return
  6821  0A0C                     __end_of___fttol:	
  6822                           
  6823                           	psect	text17
  6824  17C3                     __ptext17:	
  6825 ;; *************** function ___ftge *****************
  6826 ;; Defined at:
  6827 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;  ff1             3    2[COMMON] float 
  6830 ;;  ff2             3    5[COMMON] float 
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;		None
  6833 ;; Return value:  Size  Location     Type
  6834 ;;		None               void
  6835 ;; Registers used:
  6836 ;;		wreg, status,2, status,0
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6842 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Totals:         6       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;Total ram usage:        9 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    4
  6849 ;; This function calls:
  6850 ;;		Nothing
  6851 ;; This function is called by:
  6852 ;;		_pow
  6853 ;;		_exp
  6854 ;;		_floor
  6855 ;;		_ldexp
  6856 ;;		_log
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           
  6861                           ;psect for function ___ftge
  6862  17C3                     ___ftge:	
  6863                           
  6864                           ;incstack = 0
  6865                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6866  17C3  1FF4               	btfss	___ftge@ff1+2,7
  6867  17C4  2FDA               	goto	l3212
  6868  17C5  0972               	comf	___ftge@ff1,w
  6869  17C6  0020               	movlb	0	; select bank0
  6870  17C7  00A0               	movwf	??___ftge
  6871  17C8  0973               	comf	___ftge@ff1+1,w
  6872  17C9  00A1               	movwf	??___ftge+1
  6873  17CA  0974               	comf	___ftge@ff1+2,w
  6874  17CB  00A2               	movwf	??___ftge+2
  6875  17CC  0AA0               	incf	??___ftge,f
  6876  17CD  1903               	skipnz
  6877  17CE  0AA1               	incf	??___ftge+1,f
  6878  17CF  1903               	skipnz
  6879  17D0  0AA2               	incf	??___ftge+2,f
  6880  17D1  3000               	movlw	0
  6881  17D2  0720               	addwf	??___ftge,w
  6882  17D3  00F2               	movwf	___ftge@ff1
  6883  17D4  3000               	movlw	0
  6884  17D5  3D21               	addwfc	??___ftge+1,w
  6885  17D6  00F3               	movwf	___ftge@ff1+1
  6886  17D7  3080               	movlw	128
  6887  17D8  3D22               	addwfc	??___ftge+2,w
  6888  17D9  00F4               	movwf	___ftge@ff1+2
  6889  17DA                     l3212:	
  6890  17DA  1FF7               	btfss	___ftge@ff2+2,7
  6891  17DB  2FF1               	goto	l3216
  6892  17DC  0975               	comf	___ftge@ff2,w
  6893  17DD  0020               	movlb	0	; select bank0
  6894  17DE  00A0               	movwf	??___ftge
  6895  17DF  0976               	comf	___ftge@ff2+1,w
  6896  17E0  00A1               	movwf	??___ftge+1
  6897  17E1  0977               	comf	___ftge@ff2+2,w
  6898  17E2  00A2               	movwf	??___ftge+2
  6899  17E3  0AA0               	incf	??___ftge,f
  6900  17E4  1903               	skipnz
  6901  17E5  0AA1               	incf	??___ftge+1,f
  6902  17E6  1903               	skipnz
  6903  17E7  0AA2               	incf	??___ftge+2,f
  6904  17E8  3000               	movlw	0
  6905  17E9  0720               	addwf	??___ftge,w
  6906  17EA  00F5               	movwf	___ftge@ff2
  6907  17EB  3000               	movlw	0
  6908  17EC  3D21               	addwfc	??___ftge+1,w
  6909  17ED  00F6               	movwf	___ftge@ff2+1
  6910  17EE  3080               	movlw	128
  6911  17EF  3D22               	addwfc	??___ftge+2,w
  6912  17F0  00F7               	movwf	___ftge@ff2+2
  6913  17F1                     l3216:	
  6914  17F1  3080               	movlw	128
  6915  17F2  06F4               	xorwf	___ftge@ff1+2,f
  6916  17F3  3080               	movlw	128
  6917  17F4  06F7               	xorwf	___ftge@ff2+2,f
  6918  17F5  0877               	movf	___ftge@ff2+2,w
  6919  17F6  0274               	subwf	___ftge@ff1+2,w
  6920  17F7  1D03               	skipz
  6921  17F8  0008               	return
  6922  17F9  0876               	movf	___ftge@ff2+1,w
  6923  17FA  0273               	subwf	___ftge@ff1+1,w
  6924  17FB  1D03               	skipz
  6925  17FC  0008               	return
  6926  17FD  0875               	movf	___ftge@ff2,w
  6927  17FE  0272               	subwf	___ftge@ff1,w
  6928  17FF  0008               	return
  6929  1800                     __end_of___ftge:	
  6930                           
  6931                           	psect	text18
  6932  1786                     __ptext18:	
  6933 ;; *************** function ___altoft *****************
  6934 ;; Defined at:
  6935 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;  c               4   36[BANK0 ] long 
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;  sign            1   43[BANK0 ] unsigned char 
  6940 ;;  exp             1   42[BANK0 ] unsigned char 
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  3   36[BANK0 ] float 
  6943 ;; Registers used:
  6944 ;;		wreg, status,2, status,0, pclath, cstack
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6951 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;Total ram usage:        8 bytes
  6955 ;; Hardware stack levels used:    1
  6956 ;; Hardware stack levels required when called:    5
  6957 ;; This function calls:
  6958 ;;		___ftpack
  6959 ;; This function is called by:
  6960 ;;		_main
  6961 ;;		_floor
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           
  6966                           ;psect for function ___altoft
  6967  1786                     ___altoft:	
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  6971  1786  0020               	movlb	0	; select bank0
  6972  1787  01CB               	clrf	___altoft@sign
  6973  1788  308E               	movlw	142
  6974  1789  00C8               	movwf	??___altoft
  6975  178A  0848               	movf	??___altoft,w
  6976  178B  00CA               	movwf	___altoft@exp
  6977  178C  1FC7               	btfss	___altoft@c+3,7
  6978  178D  2F9B               	goto	l3132
  6979  178E  09C4               	comf	___altoft@c,f
  6980  178F  09C5               	comf	___altoft@c+1,f
  6981  1790  09C6               	comf	___altoft@c+2,f
  6982  1791  09C7               	comf	___altoft@c+3,f
  6983  1792  0AC4               	incf	___altoft@c,f
  6984  1793  1903               	skipnz
  6985  1794  0AC5               	incf	___altoft@c+1,f
  6986  1795  1903               	skipnz
  6987  1796  0AC6               	incf	___altoft@c+2,f
  6988  1797  1903               	skipnz
  6989  1798  0AC7               	incf	___altoft@c+3,f
  6990  1799  01CB               	clrf	___altoft@sign
  6991  179A  0ACB               	incf	___altoft@sign,f
  6992  179B                     l3132:	
  6993  179B  30FF               	movlw	255
  6994  179C  0547               	andwf	___altoft@c+3,w
  6995  179D  1903               	btfsc	3,2
  6996  179E  2FAB               	goto	l3134
  6997  179F  3001               	movlw	1
  6998  17A0                     u3825:	
  6999  17A0  36C7               	lsrf	___altoft@c+3,f
  7000  17A1  0CC6               	rrf	___altoft@c+2,f
  7001  17A2  0CC5               	rrf	___altoft@c+1,f
  7002  17A3  0CC4               	rrf	___altoft@c,f
  7003  17A4  0B89               	decfsz	9,f
  7004  17A5  2FA0               	goto	u3825
  7005  17A6  3001               	movlw	1
  7006  17A7  00C8               	movwf	??___altoft
  7007  17A8  0848               	movf	??___altoft,w
  7008  17A9  07CA               	addwf	___altoft@exp,f
  7009  17AA  2F9B               	goto	l3132
  7010  17AB                     l3134:	
  7011  17AB  0844               	movf	___altoft@c,w
  7012  17AC  00F2               	movwf	___ftpack@arg
  7013  17AD  0845               	movf	___altoft@c+1,w
  7014  17AE  00F3               	movwf	___ftpack@arg+1
  7015  17AF  0846               	movf	___altoft@c+2,w
  7016  17B0  00F4               	movwf	___ftpack@arg+2
  7017  17B1  084A               	movf	___altoft@exp,w
  7018  17B2  00C8               	movwf	??___altoft
  7019  17B3  0848               	movf	??___altoft,w
  7020  17B4  00F5               	movwf	___ftpack@exp
  7021  17B5  084B               	movf	___altoft@sign,w
  7022  17B6  00C9               	movwf	??___altoft+1
  7023  17B7  0849               	movf	??___altoft+1,w
  7024  17B8  00F6               	movwf	___ftpack@sign
  7025  17B9  3187  2797         	fcall	___ftpack
  7026  17BB  0872               	movf	?___ftpack,w
  7027  17BC  0020               	movlb	0	; select bank0
  7028  17BD  00C4               	movwf	?___altoft
  7029  17BE  0873               	movf	?___ftpack+1,w
  7030  17BF  00C5               	movwf	?___altoft+1
  7031  17C0  0874               	movf	?___ftpack+2,w
  7032  17C1  00C6               	movwf	?___altoft+2
  7033  17C2  0008               	return
  7034  17C3                     __end_of___altoft:	
  7035                           
  7036                           	psect	text19
  7037  081F                     __ptext19:	
  7038 ;; *************** function _eval_poly *****************
  7039 ;; Defined at:
  7040 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;  x               3    0[BANK1 ] float 
  7043 ;;  d               2    3[BANK1 ] PTR const 
  7044 ;;		 -> log@coeff(27), exp@coeff(30), 
  7045 ;;  n               2    5[BANK1 ] int 
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;  res             3   76[BANK0 ] int 
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  3    0[BANK1 ] int 
  7050 ;; Registers used:
  7051 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7057 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Totals:         0       3       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;Total ram usage:       10 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    6
  7064 ;; This function calls:
  7065 ;;		___ftadd
  7066 ;;		___ftmul
  7067 ;;		___wmul
  7068 ;; This function is called by:
  7069 ;;		_exp
  7070 ;;		_log
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           
  7075                           ;psect for function _eval_poly
  7076  081F                     _eval_poly:	
  7077                           
  7078                           ;incstack = 0
  7079                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7080  081F  0021               	movlb	1	; select bank1
  7081  0820  0826               	movf	(eval_poly@n+1)^(0+128),w
  7082  0821  00F3               	movwf	___wmul@multiplier+1
  7083  0822  0825               	movf	eval_poly@n^(0+128),w
  7084  0823  00F2               	movwf	___wmul@multiplier
  7085  0824  3003               	movlw	3
  7086  0825  00F4               	movwf	___wmul@multiplicand
  7087  0826  3000               	movlw	0
  7088  0827  00F5               	movwf	___wmul@multiplicand+1
  7089  0828  3195  25AA  3188   	fcall	___wmul
  7090  082B  0021               	movlb	1	; select bank1
  7091  082C  0823               	movf	eval_poly@d^(0+128),w
  7092  082D  0772               	addwf	?___wmul,w
  7093  082E  0084               	movwf	4
  7094  082F  0824               	movf	(eval_poly@d+1)^(0+128),w
  7095  0830  3D73               	addwfc	?___wmul+1,w
  7096  0831  0085               	movwf	5
  7097  0832  3F00               	moviw [0]fsr0
  7098  0833  0020               	movlb	0	; select bank0
  7099  0834  00EC               	movwf	eval_poly@res
  7100  0835  3F01               	moviw [1]fsr0
  7101  0836  00ED               	movwf	eval_poly@res+1
  7102  0837  3F02               	moviw [2]fsr0
  7103  0838                     L29:	
  7104  0838  00EE               	movwf	eval_poly@res+2
  7105  0839  0021               	movlb	1	; select bank1
  7106  083A  0825               	movf	eval_poly@n^(0+128),w
  7107  083B  0426               	iorwf	(eval_poly@n+1)^(0+128),w
  7108  083C  1903               	btfsc	3,2
  7109  083D  2882               	goto	l3396
  7110  083E  30FF               	movlw	255
  7111  083F  0021               	movlb	1	; select bank1
  7112  0840  07A5               	addwf	eval_poly@n^(0+128),f
  7113  0841  30FF               	movlw	255
  7114  0842  3DA6               	addwfc	(eval_poly@n+1)^(0+128),f
  7115  0843  0826               	movf	(eval_poly@n+1)^(0+128),w
  7116  0844  00F3               	movwf	___wmul@multiplier+1
  7117  0845  0825               	movf	eval_poly@n^(0+128),w
  7118  0846  00F2               	movwf	___wmul@multiplier
  7119  0847  3003               	movlw	3
  7120  0848  00F4               	movwf	___wmul@multiplicand
  7121  0849  3000               	movlw	0
  7122  084A  00F5               	movwf	___wmul@multiplicand+1
  7123  084B  3195  25AA  3188   	fcall	___wmul
  7124  084E  0021               	movlb	1	; select bank1
  7125  084F  0823               	movf	eval_poly@d^(0+128),w
  7126  0850  0772               	addwf	?___wmul,w
  7127  0851  0084               	movwf	4
  7128  0852  0824               	movf	(eval_poly@d+1)^(0+128),w
  7129  0853  3D73               	addwfc	?___wmul+1,w
  7130  0854  0085               	movwf	5
  7131  0855  3F00               	moviw [0]fsr0
  7132  0856  0020               	movlb	0	; select bank0
  7133  0857  00DF               	movwf	___ftadd@f1
  7134  0858  3F01               	moviw [1]fsr0
  7135  0859  00E0               	movwf	___ftadd@f1+1
  7136  085A  3F02               	moviw [2]fsr0
  7137  085B  00E1               	movwf	___ftadd@f1+2
  7138  085C  086C               	movf	eval_poly@res,w
  7139  085D  00CF               	movwf	___ftmul@f1
  7140  085E  086D               	movf	eval_poly@res+1,w
  7141  085F  00D0               	movwf	___ftmul@f1+1
  7142  0860  086E               	movf	eval_poly@res+2,w
  7143  0861  00D1               	movwf	___ftmul@f1+2
  7144  0862  0021               	movlb	1	; select bank1
  7145  0863  0820               	movf	eval_poly@x^(0+128),w
  7146  0864  0020               	movlb	0	; select bank0
  7147  0865  00D2               	movwf	___ftmul@f2
  7148  0866  0021               	movlb	1	; select bank1
  7149  0867  0821               	movf	(eval_poly@x+1)^(0+128),w
  7150  0868  0020               	movlb	0	; select bank0
  7151  0869  00D3               	movwf	___ftmul@f2+1
  7152  086A  0021               	movlb	1	; select bank1
  7153  086B  0822               	movf	(eval_poly@x+2)^(0+128),w
  7154  086C  0020               	movlb	0	; select bank0
  7155  086D  00D4               	movwf	___ftmul@f2+2
  7156  086E  318B  234F  3188   	fcall	___ftmul
  7157  0871  0020               	movlb	0	; select bank0
  7158  0872  084F               	movf	?___ftmul,w
  7159  0873  00E2               	movwf	___ftadd@f2
  7160  0874  0850               	movf	?___ftmul+1,w
  7161  0875  00E3               	movwf	___ftadd@f2+1
  7162  0876  0851               	movf	?___ftmul+2,w
  7163  0877  00E4               	movwf	___ftadd@f2+2
  7164  0878  318C  24C8  3188   	fcall	___ftadd
  7165  087B  0020               	movlb	0	; select bank0
  7166  087C  085F               	movf	?___ftadd,w
  7167  087D  00EC               	movwf	eval_poly@res
  7168  087E  0860               	movf	?___ftadd+1,w
  7169  087F  00ED               	movwf	eval_poly@res+1
  7170  0880  0861               	movf	?___ftadd+2,w
  7171  0881  2838               	goto	L29
  7172  0882                     l3396:	
  7173  0882  0020               	movlb	0	; select bank0
  7174  0883  086C               	movf	eval_poly@res,w
  7175  0884  0021               	movlb	1	; select bank1
  7176  0885  00A0               	movwf	?_eval_poly^(0+128)
  7177  0886  0020               	movlb	0	; select bank0
  7178  0887  086D               	movf	eval_poly@res+1,w
  7179  0888  0021               	movlb	1	; select bank1
  7180  0889  00A1               	movwf	(?_eval_poly+1)^(0+128)
  7181  088A  0020               	movlb	0	; select bank0
  7182  088B  086E               	movf	eval_poly@res+2,w
  7183  088C  0021               	movlb	1	; select bank1
  7184  088D  00A2               	movwf	(?_eval_poly+2)^(0+128)
  7185  088E  0008               	return
  7186  088F                     __end_of_eval_poly:	
  7187                           
  7188                           	psect	text20
  7189  15AA                     __ptext20:	
  7190 ;; *************** function ___wmul *****************
  7191 ;; Defined at:
  7192 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  multiplier      2    2[COMMON] unsigned int 
  7195 ;;  multiplicand    2    4[COMMON] unsigned int 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  product         2    6[COMMON] unsigned int 
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  2    2[COMMON] unsigned int 
  7200 ;; Registers used:
  7201 ;;		wreg, status,2, status,0
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;Total ram usage:        6 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    4
  7214 ;; This function calls:
  7215 ;;		Nothing
  7216 ;; This function is called by:
  7217 ;;		_eval_poly
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           
  7222                           ;psect for function ___wmul
  7223  15AA                     ___wmul:	
  7224                           
  7225                           ;incstack = 0
  7226                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7227  15AA  01F6               	clrf	___wmul@product
  7228  15AB  01F7               	clrf	___wmul@product+1
  7229  15AC                     l2076:	
  7230  15AC  1C72               	btfss	___wmul@multiplier,0
  7231  15AD  2DB2               	goto	l439
  7232  15AE  0874               	movf	___wmul@multiplicand,w
  7233  15AF  07F6               	addwf	___wmul@product,f
  7234  15B0  0875               	movf	___wmul@multiplicand+1,w
  7235  15B1  3DF7               	addwfc	___wmul@product+1,f
  7236  15B2                     l439:	
  7237  15B2  3001               	movlw	1
  7238  15B3                     u2015:	
  7239  15B3  35F4               	lslf	___wmul@multiplicand,f
  7240  15B4  0DF5               	rlf	___wmul@multiplicand+1,f
  7241  15B5  0B89               	decfsz	9,f
  7242  15B6  2DB3               	goto	u2015
  7243  15B7  3001               	movlw	1
  7244  15B8                     u2025:	
  7245  15B8  36F3               	lsrf	___wmul@multiplier+1,f
  7246  15B9  0CF2               	rrf	___wmul@multiplier,f
  7247  15BA  0B89               	decfsz	9,f
  7248  15BB  2DB8               	goto	u2025
  7249  15BC  0872               	movf	___wmul@multiplier,w
  7250  15BD  0473               	iorwf	___wmul@multiplier+1,w
  7251  15BE  1D03               	btfss	3,2
  7252  15BF  2DAC               	goto	l2076
  7253  15C0  0877               	movf	___wmul@product+1,w
  7254  15C1  00F3               	movwf	?___wmul+1
  7255  15C2  0876               	movf	___wmul@product,w
  7256  15C3  00F2               	movwf	?___wmul
  7257  15C4  0008               	return
  7258  15C5                     __end_of___wmul:	
  7259                           
  7260                           	psect	text21
  7261  0B4F                     __ptext21:	
  7262 ;; *************** function ___ftmul *****************
  7263 ;; Defined at:
  7264 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  f1              3   47[BANK0 ] float 
  7267 ;;  f2              3   50[BANK0 ] float 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  f3_as_produc    3   58[BANK0 ] unsigned um
  7270 ;;  sign            1   62[BANK0 ] unsigned char 
  7271 ;;  cntr            1   61[BANK0 ] unsigned char 
  7272 ;;  exp             1   57[BANK0 ] unsigned char 
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  3   47[BANK0 ] float 
  7275 ;; Registers used:
  7276 ;;		wreg, status,2, status,0, pclath, cstack
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7282 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;Total ram usage:       16 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; Hardware stack levels required when called:    5
  7289 ;; This function calls:
  7290 ;;		___ftpack
  7291 ;; This function is called by:
  7292 ;;		_main
  7293 ;;		_pow
  7294 ;;		_exp
  7295 ;;		_log
  7296 ;;		_eval_poly
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           
  7301                           ;psect for function ___ftmul
  7302  0B4F                     ___ftmul:	
  7303                           
  7304                           ;incstack = 0
  7305                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7306  0B4F  0020               	movlb	0	; select bank0
  7307  0B50  084F               	movf	___ftmul@f1,w
  7308  0B51  00D5               	movwf	??___ftmul
  7309  0B52  0850               	movf	___ftmul@f1+1,w
  7310  0B53  00D6               	movwf	??___ftmul+1
  7311  0B54  0851               	movf	___ftmul@f1+2,w
  7312  0B55  00D7               	movwf	??___ftmul+2
  7313  0B56  1003               	clrc
  7314  0B57  0D56               	rlf	??___ftmul+1,w
  7315  0B58  0D57               	rlf	??___ftmul+2,w
  7316  0B59  00D8               	movwf	??___ftmul+3
  7317  0B5A  0858               	movf	??___ftmul+3,w
  7318  0B5B  00D9               	movwf	___ftmul@exp
  7319  0B5C  0859               	movf	___ftmul@exp,w
  7320  0B5D  1D03               	btfss	3,2
  7321  0B5E  2B66               	goto	l3234
  7322  0B5F  3000               	movlw	0
  7323  0B60  00CF               	movwf	?___ftmul
  7324  0B61  3000               	movlw	0
  7325  0B62  00D0               	movwf	?___ftmul+1
  7326  0B63  3000               	movlw	0
  7327  0B64  00D1               	movwf	?___ftmul+2
  7328  0B65  0008               	return
  7329  0B66                     l3234:	
  7330  0B66  0852               	movf	___ftmul@f2,w
  7331  0B67  00D5               	movwf	??___ftmul
  7332  0B68  0853               	movf	___ftmul@f2+1,w
  7333  0B69  00D6               	movwf	??___ftmul+1
  7334  0B6A  0854               	movf	___ftmul@f2+2,w
  7335  0B6B  00D7               	movwf	??___ftmul+2
  7336  0B6C  1003               	clrc
  7337  0B6D  0D56               	rlf	??___ftmul+1,w
  7338  0B6E  0D57               	rlf	??___ftmul+2,w
  7339  0B6F  00D8               	movwf	??___ftmul+3
  7340  0B70  0858               	movf	??___ftmul+3,w
  7341  0B71  00DE               	movwf	___ftmul@sign
  7342  0B72  085E               	movf	___ftmul@sign,w
  7343  0B73  1D03               	btfss	3,2
  7344  0B74  2B7C               	goto	l3240
  7345  0B75  3000               	movlw	0
  7346  0B76  00CF               	movwf	?___ftmul
  7347  0B77  3000               	movlw	0
  7348  0B78  00D0               	movwf	?___ftmul+1
  7349  0B79  3000               	movlw	0
  7350  0B7A  00D1               	movwf	?___ftmul+2
  7351  0B7B  0008               	return
  7352  0B7C                     l3240:	
  7353  0B7C  085E               	movf	___ftmul@sign,w
  7354  0B7D  3E7B               	addlw	123
  7355  0B7E  00D5               	movwf	??___ftmul
  7356  0B7F  0855               	movf	??___ftmul,w
  7357  0B80  07D9               	addwf	___ftmul@exp,f
  7358  0B81  084F               	movf	___ftmul@f1,w
  7359  0B82  00D5               	movwf	??___ftmul
  7360  0B83  0850               	movf	___ftmul@f1+1,w
  7361  0B84  00D6               	movwf	??___ftmul+1
  7362  0B85  0851               	movf	___ftmul@f1+2,w
  7363  0B86  00D7               	movwf	??___ftmul+2
  7364  0B87  3010               	movlw	16
  7365  0B88                     u4125:	
  7366  0B88  36D7               	lsrf	??___ftmul+2,f
  7367  0B89  0CD6               	rrf	??___ftmul+1,f
  7368  0B8A  0CD5               	rrf	??___ftmul,f
  7369  0B8B  0B89               	decfsz	9,f
  7370  0B8C  2B88               	goto	u4125
  7371  0B8D  0855               	movf	??___ftmul,w
  7372  0B8E  00D8               	movwf	??___ftmul+3
  7373  0B8F  0858               	movf	??___ftmul+3,w
  7374  0B90  00DE               	movwf	___ftmul@sign
  7375  0B91  0852               	movf	___ftmul@f2,w
  7376  0B92  00D5               	movwf	??___ftmul
  7377  0B93  0853               	movf	___ftmul@f2+1,w
  7378  0B94  00D6               	movwf	??___ftmul+1
  7379  0B95  0854               	movf	___ftmul@f2+2,w
  7380  0B96  00D7               	movwf	??___ftmul+2
  7381  0B97  3010               	movlw	16
  7382  0B98                     u4135:	
  7383  0B98  36D7               	lsrf	??___ftmul+2,f
  7384  0B99  0CD6               	rrf	??___ftmul+1,f
  7385  0B9A  0CD5               	rrf	??___ftmul,f
  7386  0B9B  0B89               	decfsz	9,f
  7387  0B9C  2B98               	goto	u4135
  7388  0B9D  0855               	movf	??___ftmul,w
  7389  0B9E  00D8               	movwf	??___ftmul+3
  7390  0B9F  0858               	movf	??___ftmul+3,w
  7391  0BA0  06DE               	xorwf	___ftmul@sign,f
  7392  0BA1  3080               	movlw	128
  7393  0BA2  00D5               	movwf	??___ftmul
  7394  0BA3  0855               	movf	??___ftmul,w
  7395  0BA4  05DE               	andwf	___ftmul@sign,f
  7396  0BA5  17D0               	bsf	___ftmul@f1+1,7
  7397  0BA6  17D3               	bsf	___ftmul@f2+1,7
  7398  0BA7  30FF               	movlw	255
  7399  0BA8  05D2               	andwf	___ftmul@f2,f
  7400  0BA9  30FF               	movlw	255
  7401  0BAA  05D3               	andwf	___ftmul@f2+1,f
  7402  0BAB  3000               	movlw	0
  7403  0BAC  05D4               	andwf	___ftmul@f2+2,f
  7404  0BAD  3000               	movlw	0
  7405  0BAE  00DA               	movwf	___ftmul@f3_as_product
  7406  0BAF  3000               	movlw	0
  7407  0BB0  00DB               	movwf	___ftmul@f3_as_product+1
  7408  0BB1  3000               	movlw	0
  7409  0BB2  00DC               	movwf	___ftmul@f3_as_product+2
  7410  0BB3  3007               	movlw	7
  7411  0BB4  00D5               	movwf	??___ftmul
  7412  0BB5  0855               	movf	??___ftmul,w
  7413  0BB6  00DD               	movwf	___ftmul@cntr
  7414  0BB7                     l3252:	
  7415  0BB7  1C4F               	btfss	___ftmul@f1,0
  7416  0BB8  2BBF               	goto	l3256
  7417  0BB9  0852               	movf	___ftmul@f2,w
  7418  0BBA  07DA               	addwf	___ftmul@f3_as_product,f
  7419  0BBB  0853               	movf	___ftmul@f2+1,w
  7420  0BBC  3DDB               	addwfc	___ftmul@f3_as_product+1,f
  7421  0BBD  0854               	movf	___ftmul@f2+2,w
  7422  0BBE  3DDC               	addwfc	___ftmul@f3_as_product+2,f
  7423  0BBF                     l3256:	
  7424  0BBF  3001               	movlw	1
  7425  0BC0                     u4155:	
  7426  0BC0  36D1               	lsrf	___ftmul@f1+2,f
  7427  0BC1  0CD0               	rrf	___ftmul@f1+1,f
  7428  0BC2  0CCF               	rrf	___ftmul@f1,f
  7429  0BC3  0B89               	decfsz	9,f
  7430  0BC4  2BC0               	goto	u4155
  7431  0BC5  3001               	movlw	1
  7432  0BC6                     u4165:	
  7433  0BC6  35D2               	lslf	___ftmul@f2,f
  7434  0BC7  0DD3               	rlf	___ftmul@f2+1,f
  7435  0BC8  0DD4               	rlf	___ftmul@f2+2,f
  7436  0BC9  0B89               	decfsz	9,f
  7437  0BCA  2BC6               	goto	u4165
  7438  0BCB  3001               	movlw	1
  7439  0BCC  02DD               	subwf	___ftmul@cntr,f
  7440  0BCD  1D03               	btfss	3,2
  7441  0BCE  2BB7               	goto	l3252
  7442  0BCF  3009               	movlw	9
  7443  0BD0  00D5               	movwf	??___ftmul
  7444  0BD1  0855               	movf	??___ftmul,w
  7445  0BD2  00DD               	movwf	___ftmul@cntr
  7446  0BD3                     l3264:	
  7447  0BD3  1C4F               	btfss	___ftmul@f1,0
  7448  0BD4  2BDB               	goto	l3268
  7449  0BD5  0852               	movf	___ftmul@f2,w
  7450  0BD6  07DA               	addwf	___ftmul@f3_as_product,f
  7451  0BD7  0853               	movf	___ftmul@f2+1,w
  7452  0BD8  3DDB               	addwfc	___ftmul@f3_as_product+1,f
  7453  0BD9  0854               	movf	___ftmul@f2+2,w
  7454  0BDA  3DDC               	addwfc	___ftmul@f3_as_product+2,f
  7455  0BDB                     l3268:	
  7456  0BDB  3001               	movlw	1
  7457  0BDC                     u4195:	
  7458  0BDC  36D1               	lsrf	___ftmul@f1+2,f
  7459  0BDD  0CD0               	rrf	___ftmul@f1+1,f
  7460  0BDE  0CCF               	rrf	___ftmul@f1,f
  7461  0BDF  0B89               	decfsz	9,f
  7462  0BE0  2BDC               	goto	u4195
  7463  0BE1  3001               	movlw	1
  7464  0BE2                     u4205:	
  7465  0BE2  36DC               	lsrf	___ftmul@f3_as_product+2,f
  7466  0BE3  0CDB               	rrf	___ftmul@f3_as_product+1,f
  7467  0BE4  0CDA               	rrf	___ftmul@f3_as_product,f
  7468  0BE5  0B89               	decfsz	9,f
  7469  0BE6  2BE2               	goto	u4205
  7470  0BE7  3001               	movlw	1
  7471  0BE8  02DD               	subwf	___ftmul@cntr,f
  7472  0BE9  1D03               	btfss	3,2
  7473  0BEA  2BD3               	goto	l3264
  7474  0BEB  085A               	movf	___ftmul@f3_as_product,w
  7475  0BEC  00F2               	movwf	___ftpack@arg
  7476  0BED  085B               	movf	___ftmul@f3_as_product+1,w
  7477  0BEE  00F3               	movwf	___ftpack@arg+1
  7478  0BEF  085C               	movf	___ftmul@f3_as_product+2,w
  7479  0BF0  00F4               	movwf	___ftpack@arg+2
  7480  0BF1  0859               	movf	___ftmul@exp,w
  7481  0BF2  00D5               	movwf	??___ftmul
  7482  0BF3  0855               	movf	??___ftmul,w
  7483  0BF4  00F5               	movwf	___ftpack@exp
  7484  0BF5  085E               	movf	___ftmul@sign,w
  7485  0BF6  00D6               	movwf	??___ftmul+1
  7486  0BF7  0856               	movf	??___ftmul+1,w
  7487  0BF8  00F6               	movwf	___ftpack@sign
  7488  0BF9  3187  2797         	fcall	___ftpack
  7489  0BFB  0872               	movf	?___ftpack,w
  7490  0BFC  0020               	movlb	0	; select bank0
  7491  0BFD  00CF               	movwf	?___ftmul
  7492  0BFE  0873               	movf	?___ftpack+1,w
  7493  0BFF  00D0               	movwf	?___ftmul+1
  7494  0C00  0874               	movf	?___ftpack+2,w
  7495  0C01  00D1               	movwf	?___ftmul+2
  7496  0C02  0008               	return
  7497  0C03                     __end_of___ftmul:	
  7498                           
  7499                           	psect	text22
  7500  16B7                     __ptext22:	
  7501 ;; *************** function ___ftsub *****************
  7502 ;; Defined at:
  7503 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;  f2              3    0[BANK1 ] float 
  7506 ;;  f1              3    3[BANK1 ] float 
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;		None
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  3    0[BANK1 ] float 
  7511 ;; Registers used:
  7512 ;;		wreg, status,2, status,0, pclath, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7518 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;Total ram usage:        6 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    6
  7525 ;; This function calls:
  7526 ;;		___ftadd
  7527 ;; This function is called by:
  7528 ;;		_exp
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           
  7533                           ;psect for function ___ftsub
  7534  16B7                     ___ftsub:	
  7535                           
  7536                           ;incstack = 0
  7537                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7538  16B7  0021               	movlb	1	; select bank1
  7539  16B8  0822               	movf	(___ftsub@f2+2)^(0+128),w
  7540  16B9  0421               	iorwf	(___ftsub@f2+1)^(0+128),w
  7541  16BA  0420               	iorwf	___ftsub@f2^(0+128),w
  7542  16BB  1903               	skipnz
  7543  16BC  2EBF               	goto	l3336
  7544  16BD  3080               	movlw	128
  7545  16BE  06A2               	xorwf	(___ftsub@f2+2)^(0+128),f
  7546  16BF                     l3336:	
  7547  16BF  0823               	movf	___ftsub@f1^(0+128),w
  7548  16C0  0020               	movlb	0	; select bank0
  7549  16C1  00DF               	movwf	___ftadd@f1
  7550  16C2  0021               	movlb	1	; select bank1
  7551  16C3  0824               	movf	(___ftsub@f1+1)^(0+128),w
  7552  16C4  0020               	movlb	0	; select bank0
  7553  16C5  00E0               	movwf	___ftadd@f1+1
  7554  16C6  0021               	movlb	1	; select bank1
  7555  16C7  0825               	movf	(___ftsub@f1+2)^(0+128),w
  7556  16C8  0020               	movlb	0	; select bank0
  7557  16C9  00E1               	movwf	___ftadd@f1+2
  7558  16CA  0021               	movlb	1	; select bank1
  7559  16CB  0820               	movf	___ftsub@f2^(0+128),w
  7560  16CC  0020               	movlb	0	; select bank0
  7561  16CD  00E2               	movwf	___ftadd@f2
  7562  16CE  0021               	movlb	1	; select bank1
  7563  16CF  0821               	movf	(___ftsub@f2+1)^(0+128),w
  7564  16D0  0020               	movlb	0	; select bank0
  7565  16D1  00E3               	movwf	___ftadd@f2+1
  7566  16D2  0021               	movlb	1	; select bank1
  7567  16D3  0822               	movf	(___ftsub@f2+2)^(0+128),w
  7568  16D4  0020               	movlb	0	; select bank0
  7569  16D5  00E4               	movwf	___ftadd@f2+2
  7570  16D6  318C  24C8         	fcall	___ftadd
  7571  16D8  0020               	movlb	0	; select bank0
  7572  16D9  085F               	movf	?___ftadd,w
  7573  16DA  0021               	movlb	1	; select bank1
  7574  16DB  00A0               	movwf	?___ftsub^(0+128)
  7575  16DC  0020               	movlb	0	; select bank0
  7576  16DD  0860               	movf	?___ftadd+1,w
  7577  16DE  0021               	movlb	1	; select bank1
  7578  16DF  00A1               	movwf	(?___ftsub+1)^(0+128)
  7579  16E0  0020               	movlb	0	; select bank0
  7580  16E1  0861               	movf	?___ftadd+2,w
  7581  16E2  0021               	movlb	1	; select bank1
  7582  16E3  00A2               	movwf	(?___ftsub+2)^(0+128)
  7583  16E4  0008               	return
  7584  16E5                     __end_of___ftsub:	
  7585                           
  7586                           	psect	text23
  7587  0CC8                     __ptext23:	
  7588 ;; *************** function ___ftadd *****************
  7589 ;; Defined at:
  7590 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;  f1              3   63[BANK0 ] float 
  7593 ;;  f2              3   66[BANK0 ] float 
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;  exp1            1   75[BANK0 ] unsigned char 
  7596 ;;  exp2            1   74[BANK0 ] unsigned char 
  7597 ;;  sign            1   73[BANK0 ] unsigned char 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  3   63[BANK0 ] float 
  7600 ;; Registers used:
  7601 ;;		wreg, status,2, status,0, pclath, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7607 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7608 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;Total ram usage:       13 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    5
  7614 ;; This function calls:
  7615 ;;		___ftpack
  7616 ;; This function is called by:
  7617 ;;		_main
  7618 ;;		___ftsub
  7619 ;;		_floor
  7620 ;;		_log
  7621 ;;		_eval_poly
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           
  7626                           ;psect for function ___ftadd
  7627  0CC8                     ___ftadd:	
  7628                           
  7629                           ;incstack = 0
  7630                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7631  0CC8  0020               	movlb	0	; select bank0
  7632  0CC9  085F               	movf	___ftadd@f1,w
  7633  0CCA  00E5               	movwf	??___ftadd
  7634  0CCB  0860               	movf	___ftadd@f1+1,w
  7635  0CCC  00E6               	movwf	??___ftadd+1
  7636  0CCD  0861               	movf	___ftadd@f1+2,w
  7637  0CCE  00E7               	movwf	??___ftadd+2
  7638  0CCF  1003               	clrc
  7639  0CD0  0D66               	rlf	??___ftadd+1,w
  7640  0CD1  0D67               	rlf	??___ftadd+2,w
  7641  0CD2  00E8               	movwf	??___ftadd+3
  7642  0CD3  0868               	movf	??___ftadd+3,w
  7643  0CD4  00EB               	movwf	___ftadd@exp1
  7644  0CD5  0862               	movf	___ftadd@f2,w
  7645  0CD6  00E5               	movwf	??___ftadd
  7646  0CD7  0863               	movf	___ftadd@f2+1,w
  7647  0CD8  00E6               	movwf	??___ftadd+1
  7648  0CD9  0864               	movf	___ftadd@f2+2,w
  7649  0CDA  00E7               	movwf	??___ftadd+2
  7650  0CDB  1003               	clrc
  7651  0CDC  0D66               	rlf	??___ftadd+1,w
  7652  0CDD  0D67               	rlf	??___ftadd+2,w
  7653  0CDE  00E8               	movwf	??___ftadd+3
  7654  0CDF  0868               	movf	??___ftadd+3,w
  7655  0CE0  00EA               	movwf	___ftadd@exp2
  7656  0CE1  086B               	movf	___ftadd@exp1,w
  7657  0CE2  1903               	btfsc	3,2
  7658  0CE3  2CF0               	goto	l3144
  7659  0CE4  086A               	movf	___ftadd@exp2,w
  7660  0CE5  026B               	subwf	___ftadd@exp1,w
  7661  0CE6  1803               	skipnc
  7662  0CE7  2CF7               	goto	l3148
  7663  0CE8  036B               	decf	___ftadd@exp1,w
  7664  0CE9  3AFF               	xorlw	255
  7665  0CEA  076A               	addwf	___ftadd@exp2,w
  7666  0CEB  00E5               	movwf	??___ftadd
  7667  0CEC  3019               	movlw	25
  7668  0CED  0265               	subwf	??___ftadd,w
  7669  0CEE  1C03               	skipc
  7670  0CEF  2CF7               	goto	l3148
  7671  0CF0                     l3144:	
  7672  0CF0  0862               	movf	___ftadd@f2,w
  7673  0CF1  00DF               	movwf	?___ftadd
  7674  0CF2  0863               	movf	___ftadd@f2+1,w
  7675  0CF3  00E0               	movwf	?___ftadd+1
  7676  0CF4  0864               	movf	___ftadd@f2+2,w
  7677  0CF5  00E1               	movwf	?___ftadd+2
  7678  0CF6  0008               	return
  7679  0CF7                     l3148:	
  7680  0CF7  086A               	movf	___ftadd@exp2,w
  7681  0CF8  1903               	btfsc	3,2
  7682  0CF9  0008               	return
  7683  0CFA  086B               	movf	___ftadd@exp1,w
  7684  0CFB  026A               	subwf	___ftadd@exp2,w
  7685  0CFC  1803               	skipnc
  7686  0CFD  2D06               	goto	l3154
  7687  0CFE  036A               	decf	___ftadd@exp2,w
  7688  0CFF  3AFF               	xorlw	255
  7689  0D00  076B               	addwf	___ftadd@exp1,w
  7690  0D01  00E5               	movwf	??___ftadd
  7691  0D02  3019               	movlw	25
  7692  0D03  0265               	subwf	??___ftadd,w
  7693  0D04  1803               	btfsc	3,0
  7694  0D05  0008               	return
  7695  0D06                     l3154:	
  7696  0D06  3006               	movlw	6
  7697  0D07  00E5               	movwf	??___ftadd
  7698  0D08  0865               	movf	??___ftadd,w
  7699  0D09  00E9               	movwf	___ftadd@sign
  7700  0D0A  1BE1               	btfsc	___ftadd@f1+2,7
  7701  0D0B  17E9               	bsf	___ftadd@sign,7
  7702  0D0C  1BE4               	btfsc	___ftadd@f2+2,7
  7703  0D0D  1769               	bsf	___ftadd@sign,6
  7704  0D0E  17E0               	bsf	___ftadd@f1+1,7
  7705  0D0F  30FF               	movlw	255
  7706  0D10  05DF               	andwf	___ftadd@f1,f
  7707  0D11  30FF               	movlw	255
  7708  0D12  05E0               	andwf	___ftadd@f1+1,f
  7709  0D13  3000               	movlw	0
  7710  0D14  05E1               	andwf	___ftadd@f1+2,f
  7711  0D15  17E3               	bsf	___ftadd@f2+1,7
  7712  0D16  30FF               	movlw	255
  7713  0D17  05E2               	andwf	___ftadd@f2,f
  7714  0D18  30FF               	movlw	255
  7715  0D19  05E3               	andwf	___ftadd@f2+1,f
  7716  0D1A  3000               	movlw	0
  7717  0D1B  05E4               	andwf	___ftadd@f2+2,f
  7718  0D1C  086A               	movf	___ftadd@exp2,w
  7719  0D1D  026B               	subwf	___ftadd@exp1,w
  7720  0D1E  1803               	skipnc
  7721  0D1F  2D42               	goto	l3176
  7722  0D20                     l3166:	
  7723  0D20  3001               	movlw	1
  7724  0D21                     u3935:	
  7725  0D21  35E2               	lslf	___ftadd@f2,f
  7726  0D22  0DE3               	rlf	___ftadd@f2+1,f
  7727  0D23  0DE4               	rlf	___ftadd@f2+2,f
  7728  0D24  0B89               	decfsz	9,f
  7729  0D25  2D21               	goto	u3935
  7730  0D26  3001               	movlw	1
  7731  0D27  02EA               	subwf	___ftadd@exp2,f
  7732  0D28  086A               	movf	___ftadd@exp2,w
  7733  0D29  066B               	xorwf	___ftadd@exp1,w
  7734  0D2A  1903               	skipnz
  7735  0D2B  2D3D               	goto	l3174
  7736  0D2C  3001               	movlw	1
  7737  0D2D  02E9               	subwf	___ftadd@sign,f
  7738  0D2E  0869               	movf	___ftadd@sign,w
  7739  0D2F  3907               	andlw	7
  7740  0D30  1903               	btfsc	3,2
  7741  0D31  2D3D               	goto	l3174
  7742  0D32  2D20               	goto	l3166
  7743  0D33                     l3172:	
  7744  0D33  3001               	movlw	1
  7745  0D34                     u3965:	
  7746  0D34  36E1               	lsrf	___ftadd@f1+2,f
  7747  0D35  0CE0               	rrf	___ftadd@f1+1,f
  7748  0D36  0CDF               	rrf	___ftadd@f1,f
  7749  0D37  0B89               	decfsz	9,f
  7750  0D38  2D34               	goto	u3965
  7751  0D39  3001               	movlw	1
  7752  0D3A  00E5               	movwf	??___ftadd
  7753  0D3B  0865               	movf	??___ftadd,w
  7754  0D3C  07EB               	addwf	___ftadd@exp1,f
  7755  0D3D                     l3174:	
  7756  0D3D  086B               	movf	___ftadd@exp1,w
  7757  0D3E  066A               	xorwf	___ftadd@exp2,w
  7758  0D3F  1903               	btfsc	3,2
  7759  0D40  2D67               	goto	l631
  7760  0D41  2D33               	goto	l3172
  7761  0D42                     l3176:	
  7762  0D42  086B               	movf	___ftadd@exp1,w
  7763  0D43  026A               	subwf	___ftadd@exp2,w
  7764  0D44  1803               	skipnc
  7765  0D45  2D67               	goto	l631
  7766  0D46                     l3178:	
  7767  0D46  3001               	movlw	1
  7768  0D47                     u3995:	
  7769  0D47  35DF               	lslf	___ftadd@f1,f
  7770  0D48  0DE0               	rlf	___ftadd@f1+1,f
  7771  0D49  0DE1               	rlf	___ftadd@f1+2,f
  7772  0D4A  0B89               	decfsz	9,f
  7773  0D4B  2D47               	goto	u3995
  7774  0D4C  3001               	movlw	1
  7775  0D4D  02EB               	subwf	___ftadd@exp1,f
  7776  0D4E  086A               	movf	___ftadd@exp2,w
  7777  0D4F  066B               	xorwf	___ftadd@exp1,w
  7778  0D50  1903               	skipnz
  7779  0D51  2D63               	goto	l3186
  7780  0D52  3001               	movlw	1
  7781  0D53  02E9               	subwf	___ftadd@sign,f
  7782  0D54  0869               	movf	___ftadd@sign,w
  7783  0D55  3907               	andlw	7
  7784  0D56  1903               	btfsc	3,2
  7785  0D57  2D63               	goto	l3186
  7786  0D58  2D46               	goto	l3178
  7787  0D59                     l3184:	
  7788  0D59  3001               	movlw	1
  7789  0D5A                     u4025:	
  7790  0D5A  36E4               	lsrf	___ftadd@f2+2,f
  7791  0D5B  0CE3               	rrf	___ftadd@f2+1,f
  7792  0D5C  0CE2               	rrf	___ftadd@f2,f
  7793  0D5D  0B89               	decfsz	9,f
  7794  0D5E  2D5A               	goto	u4025
  7795  0D5F  3001               	movlw	1
  7796  0D60  00E5               	movwf	??___ftadd
  7797  0D61  0865               	movf	??___ftadd,w
  7798  0D62  07EA               	addwf	___ftadd@exp2,f
  7799  0D63                     l3186:	
  7800  0D63  086B               	movf	___ftadd@exp1,w
  7801  0D64  066A               	xorwf	___ftadd@exp2,w
  7802  0D65  1D03               	skipz
  7803  0D66  2D59               	goto	l3184
  7804  0D67                     l631:	
  7805  0D67  1FE9               	btfss	___ftadd@sign,7
  7806  0D68  2D79               	goto	l3190
  7807  0D69  30FF               	movlw	255
  7808  0D6A  06DF               	xorwf	___ftadd@f1,f
  7809  0D6B  30FF               	movlw	255
  7810  0D6C  06E0               	xorwf	___ftadd@f1+1,f
  7811  0D6D  30FF               	movlw	255
  7812  0D6E  06E1               	xorwf	___ftadd@f1+2,f
  7813  0D6F  3001               	movlw	1
  7814  0D70  07DF               	addwf	___ftadd@f1,f
  7815  0D71  3000               	movlw	0
  7816  0D72  1803               	skipnc
  7817  0D73  3001               	movlw	1
  7818  0D74  07E0               	addwf	___ftadd@f1+1,f
  7819  0D75  3000               	movlw	0
  7820  0D76  1803               	skipnc
  7821  0D77  3001               	movlw	1
  7822  0D78  07E1               	addwf	___ftadd@f1+2,f
  7823  0D79                     l3190:	
  7824  0D79  1F69               	btfss	___ftadd@sign,6
  7825  0D7A  2D8B               	goto	l3194
  7826  0D7B  30FF               	movlw	255
  7827  0D7C  06E2               	xorwf	___ftadd@f2,f
  7828  0D7D  30FF               	movlw	255
  7829  0D7E  06E3               	xorwf	___ftadd@f2+1,f
  7830  0D7F  30FF               	movlw	255
  7831  0D80  06E4               	xorwf	___ftadd@f2+2,f
  7832  0D81  3001               	movlw	1
  7833  0D82  07E2               	addwf	___ftadd@f2,f
  7834  0D83  3000               	movlw	0
  7835  0D84  1803               	skipnc
  7836  0D85  3001               	movlw	1
  7837  0D86  07E3               	addwf	___ftadd@f2+1,f
  7838  0D87  3000               	movlw	0
  7839  0D88  1803               	skipnc
  7840  0D89  3001               	movlw	1
  7841  0D8A  07E4               	addwf	___ftadd@f2+2,f
  7842  0D8B                     l3194:	
  7843  0D8B  01E9               	clrf	___ftadd@sign
  7844  0D8C  085F               	movf	___ftadd@f1,w
  7845  0D8D  07E2               	addwf	___ftadd@f2,f
  7846  0D8E  0860               	movf	___ftadd@f1+1,w
  7847  0D8F  3DE3               	addwfc	___ftadd@f2+1,f
  7848  0D90  0861               	movf	___ftadd@f1+2,w
  7849  0D91  3DE4               	addwfc	___ftadd@f2+2,f
  7850  0D92  1FE4               	btfss	___ftadd@f2+2,7
  7851  0D93  2DA6               	goto	l3204
  7852  0D94  30FF               	movlw	255
  7853  0D95  06E2               	xorwf	___ftadd@f2,f
  7854  0D96  30FF               	movlw	255
  7855  0D97  06E3               	xorwf	___ftadd@f2+1,f
  7856  0D98  30FF               	movlw	255
  7857  0D99  06E4               	xorwf	___ftadd@f2+2,f
  7858  0D9A  3001               	movlw	1
  7859  0D9B  07E2               	addwf	___ftadd@f2,f
  7860  0D9C  3000               	movlw	0
  7861  0D9D  1803               	skipnc
  7862  0D9E  3001               	movlw	1
  7863  0D9F  07E3               	addwf	___ftadd@f2+1,f
  7864  0DA0  3000               	movlw	0
  7865  0DA1  1803               	skipnc
  7866  0DA2  3001               	movlw	1
  7867  0DA3  07E4               	addwf	___ftadd@f2+2,f
  7868  0DA4  01E9               	clrf	___ftadd@sign
  7869  0DA5  0AE9               	incf	___ftadd@sign,f
  7870  0DA6                     l3204:	
  7871  0DA6  0862               	movf	___ftadd@f2,w
  7872  0DA7  00F2               	movwf	___ftpack@arg
  7873  0DA8  0863               	movf	___ftadd@f2+1,w
  7874  0DA9  00F3               	movwf	___ftpack@arg+1
  7875  0DAA  0864               	movf	___ftadd@f2+2,w
  7876  0DAB  00F4               	movwf	___ftpack@arg+2
  7877  0DAC  086B               	movf	___ftadd@exp1,w
  7878  0DAD  00E5               	movwf	??___ftadd
  7879  0DAE  0865               	movf	??___ftadd,w
  7880  0DAF  00F5               	movwf	___ftpack@exp
  7881  0DB0  0869               	movf	___ftadd@sign,w
  7882  0DB1  00E6               	movwf	??___ftadd+1
  7883  0DB2  0866               	movf	??___ftadd+1,w
  7884  0DB3  00F6               	movwf	___ftpack@sign
  7885  0DB4  3187  2797         	fcall	___ftpack
  7886  0DB6  0872               	movf	?___ftpack,w
  7887  0DB7  0020               	movlb	0	; select bank0
  7888  0DB8  00DF               	movwf	?___ftadd
  7889  0DB9  0873               	movf	?___ftpack+1,w
  7890  0DBA  00E0               	movwf	?___ftadd+1
  7891  0DBB  0874               	movf	?___ftpack+2,w
  7892  0DBC  00E1               	movwf	?___ftadd+2
  7893  0DBD  0008               	return
  7894  0DBE                     __end_of___ftadd:	
  7895                           
  7896                           	psect	text24
  7897  14F9                     __ptext24:	
  7898 ;; *************** function ___ftneg *****************
  7899 ;; Defined at:
  7900 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  f1              3   44[BANK0 ] float 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;		None
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  3   44[BANK0 ] float 
  7907 ;; Registers used:
  7908 ;;		wreg
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7914 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;Total ram usage:        3 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    4
  7921 ;; This function calls:
  7922 ;;		Nothing
  7923 ;; This function is called by:
  7924 ;;		_main
  7925 ;;		_pow
  7926 ;;		_exp
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           
  7931                           ;psect for function ___ftneg
  7932  14F9                     ___ftneg:	
  7933                           
  7934                           ;incstack = 0
  7935                           ; Regs used in ___ftneg: [wreg]
  7936  14F9  0020               	movlb	0	; select bank0
  7937  14FA  084E               	movf	___ftneg@f1+2,w
  7938  14FB  044D               	iorwf	___ftneg@f1+1,w
  7939  14FC  044C               	iorwf	___ftneg@f1,w
  7940  14FD  1903               	skipnz
  7941  14FE  0008               	return
  7942  14FF  3080               	movlw	128
  7943  1500  06CE               	xorwf	___ftneg@f1+2,f
  7944  1501  0008               	return
  7945  1502                     __end_of___ftneg:	
  7946                           
  7947                           	psect	text25
  7948  0AA6                     __ptext25:	
  7949 ;; *************** function ___ftdiv *****************
  7950 ;; Defined at:
  7951 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  f2              3    6[BANK0 ] float 
  7954 ;;  f1              3    9[BANK0 ] float 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  f3              3   17[BANK0 ] float 
  7957 ;;  sign            1   21[BANK0 ] unsigned char 
  7958 ;;  exp             1   20[BANK0 ] unsigned char 
  7959 ;;  cntr            1   16[BANK0 ] unsigned char 
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  3    6[BANK0 ] float 
  7962 ;; Registers used:
  7963 ;;		wreg, status,2, status,0, pclath, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7969 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;Total ram usage:       16 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    5
  7976 ;; This function calls:
  7977 ;;		___ftpack
  7978 ;; This function is called by:
  7979 ;;		_main
  7980 ;;		_exp
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           
  7985                           ;psect for function ___ftdiv
  7986  0AA6                     ___ftdiv:	
  7987                           
  7988                           ;incstack = 0
  7989                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7990  0AA6  0020               	movlb	0	; select bank0
  7991  0AA7  0829               	movf	___ftdiv@f1,w
  7992  0AA8  00AC               	movwf	??___ftdiv
  7993  0AA9  082A               	movf	___ftdiv@f1+1,w
  7994  0AAA  00AD               	movwf	??___ftdiv+1
  7995  0AAB  082B               	movf	___ftdiv@f1+2,w
  7996  0AAC  00AE               	movwf	??___ftdiv+2
  7997  0AAD  1003               	clrc
  7998  0AAE  0D2D               	rlf	??___ftdiv+1,w
  7999  0AAF  0D2E               	rlf	??___ftdiv+2,w
  8000  0AB0  00AF               	movwf	??___ftdiv+3
  8001  0AB1  082F               	movf	??___ftdiv+3,w
  8002  0AB2  00B4               	movwf	___ftdiv@exp
  8003  0AB3  0834               	movf	___ftdiv@exp,w
  8004  0AB4  1D03               	btfss	3,2
  8005  0AB5  2ABD               	goto	l3296
  8006  0AB6  3000               	movlw	0
  8007  0AB7  00A6               	movwf	?___ftdiv
  8008  0AB8  3000               	movlw	0
  8009  0AB9  00A7               	movwf	?___ftdiv+1
  8010  0ABA  3000               	movlw	0
  8011  0ABB  00A8               	movwf	?___ftdiv+2
  8012  0ABC  0008               	return
  8013  0ABD                     l3296:	
  8014  0ABD  0826               	movf	___ftdiv@f2,w
  8015  0ABE  00AC               	movwf	??___ftdiv
  8016  0ABF  0827               	movf	___ftdiv@f2+1,w
  8017  0AC0  00AD               	movwf	??___ftdiv+1
  8018  0AC1  0828               	movf	___ftdiv@f2+2,w
  8019  0AC2  00AE               	movwf	??___ftdiv+2
  8020  0AC3  1003               	clrc
  8021  0AC4  0D2D               	rlf	??___ftdiv+1,w
  8022  0AC5  0D2E               	rlf	??___ftdiv+2,w
  8023  0AC6  00AF               	movwf	??___ftdiv+3
  8024  0AC7  082F               	movf	??___ftdiv+3,w
  8025  0AC8  00B5               	movwf	___ftdiv@sign
  8026  0AC9  0835               	movf	___ftdiv@sign,w
  8027  0ACA  1D03               	btfss	3,2
  8028  0ACB  2AD3               	goto	l3302
  8029  0ACC  3000               	movlw	0
  8030  0ACD  00A6               	movwf	?___ftdiv
  8031  0ACE  3000               	movlw	0
  8032  0ACF  00A7               	movwf	?___ftdiv+1
  8033  0AD0  3000               	movlw	0
  8034  0AD1  00A8               	movwf	?___ftdiv+2
  8035  0AD2  0008               	return
  8036  0AD3                     l3302:	
  8037  0AD3  3000               	movlw	0
  8038  0AD4  00B1               	movwf	___ftdiv@f3
  8039  0AD5  3000               	movlw	0
  8040  0AD6  00B2               	movwf	___ftdiv@f3+1
  8041  0AD7  3000               	movlw	0
  8042  0AD8  00B3               	movwf	___ftdiv@f3+2
  8043  0AD9  3089               	movlw	137
  8044  0ADA  0735               	addwf	___ftdiv@sign,w
  8045  0ADB  00AC               	movwf	??___ftdiv
  8046  0ADC  082C               	movf	??___ftdiv,w
  8047  0ADD  02B4               	subwf	___ftdiv@exp,f
  8048  0ADE  0829               	movf	___ftdiv@f1,w
  8049  0ADF  00AC               	movwf	??___ftdiv
  8050  0AE0  082A               	movf	___ftdiv@f1+1,w
  8051  0AE1  00AD               	movwf	??___ftdiv+1
  8052  0AE2  082B               	movf	___ftdiv@f1+2,w
  8053  0AE3  00AE               	movwf	??___ftdiv+2
  8054  0AE4  3010               	movlw	16
  8055  0AE5                     u4255:	
  8056  0AE5  36AE               	lsrf	??___ftdiv+2,f
  8057  0AE6  0CAD               	rrf	??___ftdiv+1,f
  8058  0AE7  0CAC               	rrf	??___ftdiv,f
  8059  0AE8  0B89               	decfsz	9,f
  8060  0AE9  2AE5               	goto	u4255
  8061  0AEA  082C               	movf	??___ftdiv,w
  8062  0AEB  00AF               	movwf	??___ftdiv+3
  8063  0AEC  082F               	movf	??___ftdiv+3,w
  8064  0AED  00B5               	movwf	___ftdiv@sign
  8065  0AEE  0826               	movf	___ftdiv@f2,w
  8066  0AEF  00AC               	movwf	??___ftdiv
  8067  0AF0  0827               	movf	___ftdiv@f2+1,w
  8068  0AF1  00AD               	movwf	??___ftdiv+1
  8069  0AF2  0828               	movf	___ftdiv@f2+2,w
  8070  0AF3  00AE               	movwf	??___ftdiv+2
  8071  0AF4  3010               	movlw	16
  8072  0AF5                     u4265:	
  8073  0AF5  36AE               	lsrf	??___ftdiv+2,f
  8074  0AF6  0CAD               	rrf	??___ftdiv+1,f
  8075  0AF7  0CAC               	rrf	??___ftdiv,f
  8076  0AF8  0B89               	decfsz	9,f
  8077  0AF9  2AF5               	goto	u4265
  8078  0AFA  082C               	movf	??___ftdiv,w
  8079  0AFB  00AF               	movwf	??___ftdiv+3
  8080  0AFC  082F               	movf	??___ftdiv+3,w
  8081  0AFD  06B5               	xorwf	___ftdiv@sign,f
  8082  0AFE  3080               	movlw	128
  8083  0AFF  00AC               	movwf	??___ftdiv
  8084  0B00  082C               	movf	??___ftdiv,w
  8085  0B01  05B5               	andwf	___ftdiv@sign,f
  8086  0B02  17AA               	bsf	___ftdiv@f1+1,7
  8087  0B03  30FF               	movlw	255
  8088  0B04  05A9               	andwf	___ftdiv@f1,f
  8089  0B05  30FF               	movlw	255
  8090  0B06  05AA               	andwf	___ftdiv@f1+1,f
  8091  0B07  3000               	movlw	0
  8092  0B08  05AB               	andwf	___ftdiv@f1+2,f
  8093  0B09  17A7               	bsf	___ftdiv@f2+1,7
  8094  0B0A  30FF               	movlw	255
  8095  0B0B  05A6               	andwf	___ftdiv@f2,f
  8096  0B0C  30FF               	movlw	255
  8097  0B0D  05A7               	andwf	___ftdiv@f2+1,f
  8098  0B0E  3000               	movlw	0
  8099  0B0F  05A8               	andwf	___ftdiv@f2+2,f
  8100  0B10  3018               	movlw	24
  8101  0B11  00AC               	movwf	??___ftdiv
  8102  0B12  082C               	movf	??___ftdiv,w
  8103  0B13  00B0               	movwf	___ftdiv@cntr
  8104  0B14                     l3316:	
  8105  0B14  3001               	movlw	1
  8106  0B15                     u4275:	
  8107  0B15  35B1               	lslf	___ftdiv@f3,f
  8108  0B16  0DB2               	rlf	___ftdiv@f3+1,f
  8109  0B17  0DB3               	rlf	___ftdiv@f3+2,f
  8110  0B18  0B89               	decfsz	9,f
  8111  0B19  2B15               	goto	u4275
  8112  0B1A  0828               	movf	___ftdiv@f2+2,w
  8113  0B1B  022B               	subwf	___ftdiv@f1+2,w
  8114  0B1C  1D03               	skipz
  8115  0B1D  2B24               	goto	u4285
  8116  0B1E  0827               	movf	___ftdiv@f2+1,w
  8117  0B1F  022A               	subwf	___ftdiv@f1+1,w
  8118  0B20  1D03               	skipz
  8119  0B21  2B24               	goto	u4285
  8120  0B22  0826               	movf	___ftdiv@f2,w
  8121  0B23  0229               	subwf	___ftdiv@f1,w
  8122  0B24                     u4285:	
  8123  0B24  1C03               	skipc
  8124  0B25  2B2D               	goto	l3324
  8125  0B26  0826               	movf	___ftdiv@f2,w
  8126  0B27  02A9               	subwf	___ftdiv@f1,f
  8127  0B28  0827               	movf	___ftdiv@f2+1,w
  8128  0B29  3BAA               	subwfb	___ftdiv@f1+1,f
  8129  0B2A  0828               	movf	___ftdiv@f2+2,w
  8130  0B2B  3BAB               	subwfb	___ftdiv@f1+2,f
  8131  0B2C  1431               	bsf	___ftdiv@f3,0
  8132  0B2D                     l3324:	
  8133  0B2D  3001               	movlw	1
  8134  0B2E                     u4295:	
  8135  0B2E  35A9               	lslf	___ftdiv@f1,f
  8136  0B2F  0DAA               	rlf	___ftdiv@f1+1,f
  8137  0B30  0DAB               	rlf	___ftdiv@f1+2,f
  8138  0B31  0B89               	decfsz	9,f
  8139  0B32  2B2E               	goto	u4295
  8140  0B33  3001               	movlw	1
  8141  0B34  02B0               	subwf	___ftdiv@cntr,f
  8142  0B35  1D03               	btfss	3,2
  8143  0B36  2B14               	goto	l3316
  8144  0B37  0831               	movf	___ftdiv@f3,w
  8145  0B38  00F2               	movwf	___ftpack@arg
  8146  0B39  0832               	movf	___ftdiv@f3+1,w
  8147  0B3A  00F3               	movwf	___ftpack@arg+1
  8148  0B3B  0833               	movf	___ftdiv@f3+2,w
  8149  0B3C  00F4               	movwf	___ftpack@arg+2
  8150  0B3D  0834               	movf	___ftdiv@exp,w
  8151  0B3E  00AC               	movwf	??___ftdiv
  8152  0B3F  082C               	movf	??___ftdiv,w
  8153  0B40  00F5               	movwf	___ftpack@exp
  8154  0B41  0835               	movf	___ftdiv@sign,w
  8155  0B42  00AD               	movwf	??___ftdiv+1
  8156  0B43  082D               	movf	??___ftdiv+1,w
  8157  0B44  00F6               	movwf	___ftpack@sign
  8158  0B45  3187  2797         	fcall	___ftpack
  8159  0B47  0872               	movf	?___ftpack,w
  8160  0B48  0020               	movlb	0	; select bank0
  8161  0B49  00A6               	movwf	?___ftdiv
  8162  0B4A  0873               	movf	?___ftpack+1,w
  8163  0B4B  00A7               	movwf	?___ftdiv+1
  8164  0B4C  0874               	movf	?___ftpack+2,w
  8165  0B4D  00A8               	movwf	?___ftdiv+2
  8166  0B4E  0008               	return
  8167  0B4F                     __end_of___ftdiv:	
  8168                           
  8169                           	psect	text26
  8170  161C                     __ptext26:	
  8171 ;; *************** function ___awtoft *****************
  8172 ;; Defined at:
  8173 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;  c               2    0[BANK0 ] int 
  8176 ;; Auto vars:     Size  Location     Type
  8177 ;;  sign            1    5[BANK0 ] unsigned char 
  8178 ;; Return value:  Size  Location     Type
  8179 ;;                  3    0[BANK0 ] float 
  8180 ;; Registers used:
  8181 ;;		wreg, status,2, status,0, pclath, cstack
  8182 ;; Tracked objects:
  8183 ;;		On entry : 0/0
  8184 ;;		On exit  : 0/0
  8185 ;;		Unchanged: 0/0
  8186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8187 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;Total ram usage:        6 bytes
  8192 ;; Hardware stack levels used:    1
  8193 ;; Hardware stack levels required when called:    5
  8194 ;; This function calls:
  8195 ;;		___ftpack
  8196 ;; This function is called by:
  8197 ;;		_main
  8198 ;;		_exp
  8199 ;;		_log
  8200 ;; This function uses a non-reentrant model
  8201 ;;
  8202                           
  8203                           
  8204                           ;psect for function ___awtoft
  8205  161C                     ___awtoft:	
  8206                           
  8207                           ;incstack = 0
  8208                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8209  161C  0020               	movlb	0	; select bank0
  8210  161D  01A5               	clrf	___awtoft@sign
  8211  161E  1FA1               	btfss	___awtoft@c+1,7
  8212  161F  2E27               	goto	l3286
  8213  1620  09A0               	comf	___awtoft@c,f
  8214  1621  09A1               	comf	___awtoft@c+1,f
  8215  1622  0AA0               	incf	___awtoft@c,f
  8216  1623  1903               	skipnz
  8217  1624  0AA1               	incf	___awtoft@c+1,f
  8218  1625  01A5               	clrf	___awtoft@sign
  8219  1626  0AA5               	incf	___awtoft@sign,f
  8220  1627                     l3286:	
  8221  1627  0820               	movf	___awtoft@c,w
  8222  1628  00F2               	movwf	___ftpack@arg
  8223  1629  0821               	movf	___awtoft@c+1,w
  8224  162A  00F3               	movwf	___ftpack@arg+1
  8225  162B  01F4               	clrf	___ftpack@arg+2
  8226  162C  308E               	movlw	142
  8227  162D  00A3               	movwf	??___awtoft
  8228  162E  0823               	movf	??___awtoft,w
  8229  162F  00F5               	movwf	___ftpack@exp
  8230  1630  0825               	movf	___awtoft@sign,w
  8231  1631  00A4               	movwf	??___awtoft+1
  8232  1632  0824               	movf	??___awtoft+1,w
  8233  1633  00F6               	movwf	___ftpack@sign
  8234  1634  3187  2797         	fcall	___ftpack
  8235  1636  0872               	movf	?___ftpack,w
  8236  1637  0020               	movlb	0	; select bank0
  8237  1638  00A0               	movwf	?___awtoft
  8238  1639  0873               	movf	?___ftpack+1,w
  8239  163A  00A1               	movwf	?___awtoft+1
  8240  163B  0874               	movf	?___ftpack+2,w
  8241  163C  00A2               	movwf	?___awtoft+2
  8242  163D  0008               	return
  8243  163E                     __end_of___awtoft:	
  8244                           
  8245                           	psect	text27
  8246  1660                     __ptext27:	
  8247 ;; *************** function ___lltoft *****************
  8248 ;; Defined at:
  8249 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;  c               4    0[BANK0 ] unsigned long 
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;  exp             1    5[BANK0 ] unsigned char 
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  3    0[BANK0 ] float 
  8256 ;; Registers used:
  8257 ;;		wreg, status,2, status,0, pclath, cstack
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8263 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;Total ram usage:        6 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    5
  8270 ;; This function calls:
  8271 ;;		___ftpack
  8272 ;; This function is called by:
  8273 ;;		_pow
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           
  8278                           ;psect for function ___lltoft
  8279  1660                     ___lltoft:	
  8280                           
  8281                           ;incstack = 0
  8282                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  8283  1660  308E               	movlw	142
  8284  1661  0020               	movlb	0	; select bank0
  8285  1662  00A4               	movwf	??___lltoft
  8286  1663  0824               	movf	??___lltoft,w
  8287  1664  00A5               	movwf	___lltoft@exp
  8288  1665                     l3566:	
  8289  1665  30FF               	movlw	255
  8290  1666  0523               	andwf	___lltoft@c+3,w
  8291  1667  1903               	btfsc	3,2
  8292  1668  2E75               	goto	l3568
  8293  1669  3001               	movlw	1
  8294  166A                     u4695:	
  8295  166A  36A3               	lsrf	___lltoft@c+3,f
  8296  166B  0CA2               	rrf	___lltoft@c+2,f
  8297  166C  0CA1               	rrf	___lltoft@c+1,f
  8298  166D  0CA0               	rrf	___lltoft@c,f
  8299  166E  0B89               	decfsz	9,f
  8300  166F  2E6A               	goto	u4695
  8301  1670  3001               	movlw	1
  8302  1671  00A4               	movwf	??___lltoft
  8303  1672  0824               	movf	??___lltoft,w
  8304  1673  07A5               	addwf	___lltoft@exp,f
  8305  1674  2E65               	goto	l3566
  8306  1675                     l3568:	
  8307  1675  0820               	movf	___lltoft@c,w
  8308  1676  00F2               	movwf	___ftpack@arg
  8309  1677  0821               	movf	___lltoft@c+1,w
  8310  1678  00F3               	movwf	___ftpack@arg+1
  8311  1679  0822               	movf	___lltoft@c+2,w
  8312  167A  00F4               	movwf	___ftpack@arg+2
  8313  167B  0825               	movf	___lltoft@exp,w
  8314  167C  00A4               	movwf	??___lltoft
  8315  167D  0824               	movf	??___lltoft,w
  8316  167E  00F5               	movwf	___ftpack@exp
  8317  167F  01F6               	clrf	___ftpack@sign
  8318  1680  3187  2797         	fcall	___ftpack
  8319  1682  0872               	movf	?___ftpack,w
  8320  1683  0020               	movlb	0	; select bank0
  8321  1684  00A0               	movwf	?___lltoft
  8322  1685  0873               	movf	?___ftpack+1,w
  8323  1686  00A1               	movwf	?___lltoft+1
  8324  1687  0874               	movf	?___ftpack+2,w
  8325  1688  00A2               	movwf	?___lltoft+2
  8326  1689  0008               	return
  8327  168A                     __end_of___lltoft:	
  8328                           
  8329                           	psect	text28
  8330  1531                     __ptext28:	
  8331 ;; *************** function ___lwtoft *****************
  8332 ;; Defined at:
  8333 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwtoft.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  c               2    0[BANK0 ] unsigned int 
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  3    0[BANK0 ] float 
  8340 ;; Registers used:
  8341 ;;		wreg, status,2, status,0, pclath, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8347 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;Total ram usage:        4 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    5
  8354 ;; This function calls:
  8355 ;;		___ftpack
  8356 ;; This function is called by:
  8357 ;;		_main
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           
  8362                           ;psect for function ___lwtoft
  8363  1531                     ___lwtoft:	
  8364                           
  8365                           ;incstack = 0
  8366                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  8367  1531  0020               	movlb	0	; select bank0
  8368  1532  0820               	movf	___lwtoft@c,w
  8369  1533  00F2               	movwf	___ftpack@arg
  8370  1534  0821               	movf	___lwtoft@c+1,w
  8371  1535  00F3               	movwf	___ftpack@arg+1
  8372  1536  01F4               	clrf	___ftpack@arg+2
  8373  1537  308E               	movlw	142
  8374  1538  00A3               	movwf	??___lwtoft
  8375  1539  0823               	movf	??___lwtoft,w
  8376  153A  00F5               	movwf	___ftpack@exp
  8377  153B  01F6               	clrf	___ftpack@sign
  8378  153C  3187  2797         	fcall	___ftpack
  8379  153E  0872               	movf	?___ftpack,w
  8380  153F  0020               	movlb	0	; select bank0
  8381  1540  00A0               	movwf	?___lwtoft
  8382  1541  0873               	movf	?___ftpack+1,w
  8383  1542  00A1               	movwf	?___lwtoft+1
  8384  1543  0874               	movf	?___ftpack+2,w
  8385  1544  00A2               	movwf	?___lwtoft+2
  8386  1545  0008               	return
  8387  1546                     __end_of___lwtoft:	
  8388                           
  8389                           	psect	text29
  8390  0797                     __ptext29:	
  8391 ;; *************** function ___ftpack *****************
  8392 ;; Defined at:
  8393 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;  arg             3    2[COMMON] unsigned um
  8396 ;;  exp             1    5[COMMON] unsigned char 
  8397 ;;  sign            1    6[COMMON] unsigned char 
  8398 ;; Auto vars:     Size  Location     Type
  8399 ;;		None
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  3    2[COMMON] float 
  8402 ;; Registers used:
  8403 ;;		wreg, status,2, status,0
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8409 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;Total ram usage:        8 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    4
  8416 ;; This function calls:
  8417 ;;		Nothing
  8418 ;; This function is called by:
  8419 ;;		___altoft
  8420 ;;		___awtoft
  8421 ;;		___ftadd
  8422 ;;		___ftdiv
  8423 ;;		___ftmul
  8424 ;;		___lltoft
  8425 ;;		___lwtoft
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           
  8430                           ;psect for function ___ftpack
  8431  0797                     ___ftpack:	
  8432                           
  8433                           ;incstack = 0
  8434                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8435  0797  0875               	movf	___ftpack@exp,w
  8436  0798  1903               	btfsc	3,2
  8437  0799  2F9F               	goto	l3094
  8438  079A  0874               	movf	___ftpack@arg+2,w
  8439  079B  0473               	iorwf	___ftpack@arg+1,w
  8440  079C  0472               	iorwf	___ftpack@arg,w
  8441  079D  1D03               	skipz
  8442  079E  2FB0               	goto	l3100
  8443  079F                     l3094:	
  8444  079F  3000               	movlw	0
  8445  07A0  00F2               	movwf	?___ftpack
  8446  07A1  3000               	movlw	0
  8447  07A2  00F3               	movwf	?___ftpack+1
  8448  07A3  3000               	movlw	0
  8449  07A4  00F4               	movwf	?___ftpack+2
  8450  07A5  0008               	return
  8451  07A6                     l3098:	
  8452  07A6  3001               	movlw	1
  8453  07A7  00F7               	movwf	??___ftpack
  8454  07A8  0877               	movf	??___ftpack,w
  8455  07A9  07F5               	addwf	___ftpack@exp,f
  8456  07AA  3001               	movlw	1
  8457  07AB                     u3715:	
  8458  07AB  36F4               	lsrf	___ftpack@arg+2,f
  8459  07AC  0CF3               	rrf	___ftpack@arg+1,f
  8460  07AD  0CF2               	rrf	___ftpack@arg,f
  8461  07AE  0B89               	decfsz	9,f
  8462  07AF  2FAB               	goto	u3715
  8463  07B0                     l3100:	
  8464  07B0  30FE               	movlw	254
  8465  07B1  0574               	andwf	___ftpack@arg+2,w
  8466  07B2  1903               	btfsc	3,2
  8467  07B3  2FC9               	goto	l600
  8468  07B4  2FA6               	goto	l3098
  8469  07B5                     l3102:	
  8470  07B5  3001               	movlw	1
  8471  07B6  00F7               	movwf	??___ftpack
  8472  07B7  0877               	movf	??___ftpack,w
  8473  07B8  07F5               	addwf	___ftpack@exp,f
  8474  07B9  3001               	movlw	1
  8475  07BA  07F2               	addwf	___ftpack@arg,f
  8476  07BB  3000               	movlw	0
  8477  07BC  1803               	skipnc
  8478  07BD  3001               	movlw	1
  8479  07BE  07F3               	addwf	___ftpack@arg+1,f
  8480  07BF  3000               	movlw	0
  8481  07C0  1803               	skipnc
  8482  07C1  3001               	movlw	1
  8483  07C2  07F4               	addwf	___ftpack@arg+2,f
  8484  07C3  3001               	movlw	1
  8485  07C4                     u3735:	
  8486  07C4  36F4               	lsrf	___ftpack@arg+2,f
  8487  07C5  0CF3               	rrf	___ftpack@arg+1,f
  8488  07C6  0CF2               	rrf	___ftpack@arg,f
  8489  07C7  0B89               	decfsz	9,f
  8490  07C8  2FC4               	goto	u3735
  8491  07C9                     l600:	
  8492  07C9  30FF               	movlw	255
  8493  07CA  0574               	andwf	___ftpack@arg+2,w
  8494  07CB  1903               	btfsc	3,2
  8495  07CC  2FD6               	goto	l3110
  8496  07CD  2FB5               	goto	l3102
  8497  07CE                     l3108:	
  8498  07CE  3001               	movlw	1
  8499  07CF  02F5               	subwf	___ftpack@exp,f
  8500  07D0  3001               	movlw	1
  8501  07D1                     u3755:	
  8502  07D1  35F2               	lslf	___ftpack@arg,f
  8503  07D2  0DF3               	rlf	___ftpack@arg+1,f
  8504  07D3  0DF4               	rlf	___ftpack@arg+2,f
  8505  07D4  0B89               	decfsz	9,f
  8506  07D5  2FD1               	goto	u3755
  8507  07D6                     l3110:	
  8508  07D6  1BF3               	btfsc	___ftpack@arg+1,7
  8509  07D7  2FDC               	goto	l607
  8510  07D8  3002               	movlw	2
  8511  07D9  0275               	subwf	___ftpack@exp,w
  8512  07DA  1803               	skipnc
  8513  07DB  2FCE               	goto	l3108
  8514  07DC                     l607:	
  8515  07DC  1875               	btfsc	___ftpack@exp,0
  8516  07DD  2FE4               	goto	l608
  8517  07DE  30FF               	movlw	255
  8518  07DF  05F2               	andwf	___ftpack@arg,f
  8519  07E0  307F               	movlw	127
  8520  07E1  05F3               	andwf	___ftpack@arg+1,f
  8521  07E2  30FF               	movlw	255
  8522  07E3  05F4               	andwf	___ftpack@arg+2,f
  8523  07E4                     l608:	
  8524  07E4  1003               	clrc
  8525  07E5  0CF5               	rrf	___ftpack@exp,f
  8526  07E6  0875               	movf	___ftpack@exp,w
  8527  07E7  00F7               	movwf	??___ftpack
  8528  07E8  01F8               	clrf	??___ftpack+1
  8529  07E9  01F9               	clrf	??___ftpack+2
  8530  07EA  3010               	movlw	16
  8531  07EB                     u3795:	
  8532  07EB  35F7               	lslf	??___ftpack,f
  8533  07EC  0DF8               	rlf	??___ftpack+1,f
  8534  07ED  0DF9               	rlf	??___ftpack+2,f
  8535  07EE  0B89               	decfsz	9,f
  8536  07EF  2FEB               	goto	u3795
  8537  07F0  0877               	movf	??___ftpack,w
  8538  07F1  04F2               	iorwf	___ftpack@arg,f
  8539  07F2  0878               	movf	??___ftpack+1,w
  8540  07F3  04F3               	iorwf	___ftpack@arg+1,f
  8541  07F4  0879               	movf	??___ftpack+2,w
  8542  07F5  04F4               	iorwf	___ftpack@arg+2,f
  8543  07F6  0876               	movf	___ftpack@sign,w
  8544  07F7  1903               	btfsc	3,2
  8545  07F8  0008               	return
  8546  07F9  17F4               	bsf	___ftpack@arg+2,7
  8547  07FA  0008               	return
  8548  07FB                     __end_of___ftpack:	
  8549                           
  8550                           	psect	text30
  8551  16E5                     __ptext30:	
  8552 ;; *************** function ___lmul *****************
  8553 ;; Defined at:
  8554 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  multiplier      4    2[COMMON] unsigned long 
  8557 ;;  multiplicand    4    6[COMMON] unsigned long 
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  product         4    0[BANK0 ] unsigned long 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;                  4    2[COMMON] unsigned long 
  8562 ;; Registers used:
  8563 ;;		wreg, status,2, status,0
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8569 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;Total ram usage:       12 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    4
  8576 ;; This function calls:
  8577 ;;		Nothing
  8578 ;; This function is called by:
  8579 ;;		_main
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           
  8584                           ;psect for function ___lmul
  8585  16E5                     ___lmul:	
  8586                           
  8587                           ;incstack = 0
  8588                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  8589  16E5  3000               	movlw	0
  8590  16E6  0020               	movlb	0	; select bank0
  8591  16E7  00A3               	movwf	___lmul@product+3
  8592  16E8  3000               	movlw	0
  8593  16E9  00A2               	movwf	___lmul@product+2
  8594  16EA  3000               	movlw	0
  8595  16EB  00A1               	movwf	___lmul@product+1
  8596  16EC  3000               	movlw	0
  8597  16ED  00A0               	movwf	___lmul@product
  8598  16EE                     l2954:	
  8599  16EE  1C72               	btfss	___lmul@multiplier,0
  8600  16EF  2EF9               	goto	l2958
  8601  16F0  0876               	movf	___lmul@multiplicand,w
  8602  16F1  0020               	movlb	0	; select bank0
  8603  16F2  07A0               	addwf	___lmul@product,f
  8604  16F3  0877               	movf	___lmul@multiplicand+1,w
  8605  16F4  3DA1               	addwfc	___lmul@product+1,f
  8606  16F5  0878               	movf	___lmul@multiplicand+2,w
  8607  16F6  3DA2               	addwfc	___lmul@product+2,f
  8608  16F7  0879               	movf	___lmul@multiplicand+3,w
  8609  16F8  3DA3               	addwfc	___lmul@product+3,f
  8610  16F9                     l2958:	
  8611  16F9  3001               	movlw	1
  8612  16FA                     u3535:	
  8613  16FA  35F6               	lslf	___lmul@multiplicand,f
  8614  16FB  0DF7               	rlf	___lmul@multiplicand+1,f
  8615  16FC  0DF8               	rlf	___lmul@multiplicand+2,f
  8616  16FD  0DF9               	rlf	___lmul@multiplicand+3,f
  8617  16FE  0B89               	decfsz	9,f
  8618  16FF  2EFA               	goto	u3535
  8619  1700  3001               	movlw	1
  8620  1701                     u3545:	
  8621  1701  36F5               	lsrf	___lmul@multiplier+3,f
  8622  1702  0CF4               	rrf	___lmul@multiplier+2,f
  8623  1703  0CF3               	rrf	___lmul@multiplier+1,f
  8624  1704  0CF2               	rrf	___lmul@multiplier,f
  8625  1705  0B89               	decfsz	9,f
  8626  1706  2F01               	goto	u3545
  8627  1707  0875               	movf	___lmul@multiplier+3,w
  8628  1708  0474               	iorwf	___lmul@multiplier+2,w
  8629  1709  0473               	iorwf	___lmul@multiplier+1,w
  8630  170A  0472               	iorwf	___lmul@multiplier,w
  8631  170B  1D03               	skipz
  8632  170C  2EEE               	goto	l2954
  8633  170D  0020               	movlb	0	; select bank0
  8634  170E  0823               	movf	___lmul@product+3,w
  8635  170F  00F5               	movwf	?___lmul+3
  8636  1710  0822               	movf	___lmul@product+2,w
  8637  1711  00F4               	movwf	?___lmul+2
  8638  1712  0821               	movf	___lmul@product+1,w
  8639  1713  00F3               	movwf	?___lmul+1
  8640  1714  0820               	movf	___lmul@product,w
  8641  1715  00F2               	movwf	?___lmul
  8642  1716  0008               	return
  8643  1717                     __end_of___lmul:	
  8644                           
  8645                           	psect	text31
  8646  1522                     __ptext31:	
  8647 ;; *************** function _SYSTEM_Initialize *****************
  8648 ;; Defined at:
  8649 ;;		line 72 in file "mcc_generated_files/mcc.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;		None
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;		None
  8654 ;; Return value:  Size  Location     Type
  8655 ;;                  1    wreg      void 
  8656 ;; Registers used:
  8657 ;;		wreg, status,2, status,0, pclath, cstack
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;Total ram usage:        0 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    6
  8670 ;; This function calls:
  8671 ;;		_EUSART_Initialize
  8672 ;;		_EXT_INT_Initialize
  8673 ;;		_OSCILLATOR_Initialize
  8674 ;;		_PIN_MANAGER_Initialize
  8675 ;;		_WDT_Initialize
  8676 ;; This function is called by:
  8677 ;;		_main
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           
  8682                           ;psect for function _SYSTEM_Initialize
  8683  1522                     _SYSTEM_Initialize:	
  8684                           
  8685                           ;mcc.c: 75: PIN_MANAGER_Initialize();
  8686                           
  8687                           ;incstack = 0
  8688                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8689  1522  3195  258F  3195   	fcall	_PIN_MANAGER_Initialize
  8690                           
  8691                           ;mcc.c: 76: OSCILLATOR_Initialize();
  8692  1525  3195  2502  3195   	fcall	_OSCILLATOR_Initialize
  8693                           
  8694                           ;mcc.c: 77: WDT_Initialize();
  8695  1528  3194  24DA  3195   	fcall	_WDT_Initialize
  8696                           
  8697                           ;mcc.c: 78: EXT_INT_Initialize();
  8698  152B  3195  2517  3195   	fcall	_EXT_INT_Initialize
  8699                           
  8700                           ;mcc.c: 79: EUSART_Initialize();
  8701  152E  3195  2575         	fcall	_EUSART_Initialize
  8702  1530  0008               	return
  8703  1531                     __end_of_SYSTEM_Initialize:	
  8704                           
  8705                           	psect	text32
  8706  14DA                     __ptext32:	
  8707 ;; *************** function _WDT_Initialize *****************
  8708 ;; Defined at:
  8709 ;;		line 96 in file "mcc_generated_files/mcc.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;		None
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      void 
  8716 ;; Registers used:
  8717 ;;		wreg
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;Total ram usage:        0 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    4
  8730 ;; This function calls:
  8731 ;;		Nothing
  8732 ;; This function is called by:
  8733 ;;		_SYSTEM_Initialize
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           
  8738                           ;psect for function _WDT_Initialize
  8739  14DA                     _WDT_Initialize:	
  8740                           
  8741                           ;mcc.c: 99: WDTCON = 0x16;
  8742                           
  8743                           ;incstack = 0
  8744                           ; Regs used in _WDT_Initialize: [wreg]
  8745  14DA  3016               	movlw	22
  8746  14DB  0021               	movlb	1	; select bank1
  8747  14DC  0097               	movwf	23	;volatile
  8748  14DD  0008               	return
  8749  14DE                     __end_of_WDT_Initialize:	
  8750                           
  8751                           	psect	text33
  8752  158F                     __ptext33:	
  8753 ;; *************** function _PIN_MANAGER_Initialize *****************
  8754 ;; Defined at:
  8755 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;		None
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;		None
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  1    wreg      void 
  8762 ;; Registers used:
  8763 ;;		wreg, status,2
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;Total ram usage:        0 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; Hardware stack levels required when called:    4
  8776 ;; This function calls:
  8777 ;;		Nothing
  8778 ;; This function is called by:
  8779 ;;		_SYSTEM_Initialize
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           
  8784                           ;psect for function _PIN_MANAGER_Initialize
  8785  158F                     _PIN_MANAGER_Initialize:	
  8786                           
  8787                           ;pin_manager.c: 57: LATA = 0x00;
  8788                           
  8789                           ;incstack = 0
  8790                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8791  158F  0022               	movlb	2	; select bank2
  8792  1590  018C               	clrf	12	;volatile
  8793                           
  8794                           ;pin_manager.c: 58: LATB = 0x00;
  8795  1591  018D               	clrf	13	;volatile
  8796                           
  8797                           ;pin_manager.c: 59: LATC = 0x00;
  8798  1592  018E               	clrf	14	;volatile
  8799                           
  8800                           ;pin_manager.c: 64: TRISA = 0x30;
  8801  1593  3030               	movlw	48
  8802  1594  0021               	movlb	1	; select bank1
  8803  1595  008C               	movwf	12	;volatile
  8804                           
  8805                           ;pin_manager.c: 65: TRISB = 0x70;
  8806  1596  3070               	movlw	112
  8807  1597  008D               	movwf	13	;volatile
  8808                           
  8809                           ;pin_manager.c: 66: TRISC = 0xE7;
  8810  1598  30E7               	movlw	231
  8811  1599  008E               	movwf	14	;volatile
  8812                           
  8813                           ;pin_manager.c: 71: ANSELC = 0xCD;
  8814  159A  30CD               	movlw	205
  8815  159B  0023               	movlb	3	; select bank3
  8816  159C  008E               	movwf	14	;volatile
  8817                           
  8818                           ;pin_manager.c: 72: ANSELB = 0x00;
  8819  159D  018D               	clrf	13	;volatile
  8820                           
  8821                           ;pin_manager.c: 73: ANSELA = 0x10;
  8822  159E  3010               	movlw	16
  8823  159F  008C               	movwf	12	;volatile
  8824                           
  8825                           ;pin_manager.c: 78: WPUB = 0xF0;
  8826  15A0  30F0               	movlw	240
  8827  15A1  0024               	movlb	4	; select bank4
  8828  15A2  008D               	movwf	13	;volatile
  8829                           
  8830                           ;pin_manager.c: 79: WPUA = 0x38;
  8831  15A3  3038               	movlw	56
  8832  15A4  008C               	movwf	12	;volatile
  8833                           
  8834                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  8835  15A5  0021               	movlb	1	; select bank1
  8836  15A6  1395               	bcf	21,7	;volatile
  8837                           
  8838                           ;pin_manager.c: 86: APFCON = 0x00;
  8839  15A7  0022               	movlb	2	; select bank2
  8840  15A8  019D               	clrf	29	;volatile
  8841  15A9  0008               	return
  8842  15AA                     __end_of_PIN_MANAGER_Initialize:	
  8843                           
  8844                           	psect	text34
  8845  1502                     __ptext34:	
  8846 ;; *************** function _OSCILLATOR_Initialize *****************
  8847 ;; Defined at:
  8848 ;;		line 82 in file "mcc_generated_files/mcc.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;		None
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;		None
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      void 
  8855 ;; Registers used:
  8856 ;;		wreg, status,2
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;Total ram usage:        0 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    4
  8869 ;; This function calls:
  8870 ;;		Nothing
  8871 ;; This function is called by:
  8872 ;;		_SYSTEM_Initialize
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           
  8877                           ;psect for function _OSCILLATOR_Initialize
  8878  1502                     _OSCILLATOR_Initialize:	
  8879                           
  8880                           ;mcc.c: 85: OSCCON = 0x38;
  8881                           
  8882                           ;incstack = 0
  8883                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8884  1502  3038               	movlw	56
  8885  1503  0021               	movlb	1	; select bank1
  8886  1504  0099               	movwf	25	;volatile
  8887                           
  8888                           ;mcc.c: 87: OSCTUNE = 0x00;
  8889  1505  0198               	clrf	24	;volatile
  8890                           
  8891                           ;mcc.c: 89: ACTCON = 0x00;
  8892  1506  0027               	movlb	7	; select bank7
  8893  1507  019B               	clrf	27	;volatile
  8894  1508                     l84:	
  8895                           ;mcc.c: 92: {
  8896                           
  8897                           ;mcc.c: 91: while(PLLRDY == 0)
  8898                           
  8899  1508  0021               	movlb	1	; select bank1
  8900  1509  1B1A               	btfsc	26,6	;volatile
  8901  150A  0008               	return
  8902  150B  2D08               	goto	l84
  8903  150C                     __end_of_OSCILLATOR_Initialize:	
  8904                           
  8905                           	psect	text35
  8906  1517                     __ptext35:	
  8907 ;; *************** function _EXT_INT_Initialize *****************
  8908 ;; Defined at:
  8909 ;;		line 90 in file "mcc_generated_files/ext_int.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;		None
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;		None
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      void 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0, pclath, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;Total ram usage:        0 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    5
  8930 ;; This function calls:
  8931 ;;		_INT_SetInterruptHandler
  8932 ;; This function is called by:
  8933 ;;		_SYSTEM_Initialize
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           
  8938                           ;psect for function _EXT_INT_Initialize
  8939  1517                     _EXT_INT_Initialize:	
  8940                           
  8941                           ;ext_int.c: 99: (INTCONbits.INTF = 0);
  8942                           
  8943                           ;incstack = 0
  8944                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8945  1517  108B               	bcf	11,1	;volatile
  8946                           
  8947                           ;ext_int.c: 100: (OPTION_REGbits.INTEDG = 1);
  8948  1518  0021               	movlb	1	; select bank1
  8949  1519  1715               	bsf	21,6	;volatile
  8950                           
  8951                           ;ext_int.c: 102: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  8952  151A  30FF               	movlw	low _INT_DefaultInterruptHandler
  8953  151B  00F2               	movwf	INT_SetInterruptHandler@InterruptHandler
  8954  151C  3007               	movlw	high _INT_DefaultInterruptHandler
  8955  151D  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  8956  151E  3194  24DE         	fcall	_INT_SetInterruptHandler
  8957                           
  8958                           ;ext_int.c: 103: (INTCONbits.INTE = 1);
  8959  1520  160B               	bsf	11,4	;volatile
  8960  1521  0008               	return
  8961  1522                     __end_of_EXT_INT_Initialize:	
  8962                           
  8963                           	psect	text36
  8964  14DE                     __ptext36:	
  8965 ;; *************** function _INT_SetInterruptHandler *****************
  8966 ;; Defined at:
  8967 ;;		line 70 in file "mcc_generated_files/ext_int.c"
  8968 ;; Parameters:    Size  Location     Type
  8969 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  8970 ;;		 -> INT_DefaultInterruptHandler(1), 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;		None
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  1    wreg      void 
  8975 ;; Registers used:
  8976 ;;		wreg
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;Total ram usage:        2 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    4
  8989 ;; This function calls:
  8990 ;;		Nothing
  8991 ;; This function is called by:
  8992 ;;		_EXT_INT_Initialize
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           
  8997                           ;psect for function _INT_SetInterruptHandler
  8998  14DE                     _INT_SetInterruptHandler:	
  8999                           
  9000                           ;ext_int.c: 71: INT_InterruptHandler = InterruptHandler;
  9001                           
  9002                           ;incstack = 0
  9003                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  9004  14DE  0873               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  9005  14DF  0021               	movlb	1	; select bank1
  9006  14E0  00E8               	movwf	(_INT_InterruptHandler+1)^(0+128)
  9007  14E1  0872               	movf	INT_SetInterruptHandler@InterruptHandler,w
  9008  14E2  00E7               	movwf	_INT_InterruptHandler^(0+128)
  9009  14E3  0008               	return
  9010  14E4                     __end_of_INT_SetInterruptHandler:	
  9011                           
  9012                           	psect	text37
  9013  1575                     __ptext37:	
  9014 ;; *************** function _EUSART_Initialize *****************
  9015 ;; Defined at:
  9016 ;;		line 75 in file "mcc_generated_files/eusart.c"
  9017 ;; Parameters:    Size  Location     Type
  9018 ;;		None
  9019 ;; Auto vars:     Size  Location     Type
  9020 ;;		None
  9021 ;; Return value:  Size  Location     Type
  9022 ;;                  1    wreg      void 
  9023 ;; Registers used:
  9024 ;;		wreg, status,2
  9025 ;; Tracked objects:
  9026 ;;		On entry : 0/0
  9027 ;;		On exit  : 0/0
  9028 ;;		Unchanged: 0/0
  9029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;Total ram usage:        1 bytes
  9035 ;; Hardware stack levels used:    1
  9036 ;; Hardware stack levels required when called:    4
  9037 ;; This function calls:
  9038 ;;		Nothing
  9039 ;; This function is called by:
  9040 ;;		_SYSTEM_Initialize
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           
  9045                           ;psect for function _EUSART_Initialize
  9046  1575                     _EUSART_Initialize:	
  9047                           
  9048                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  9049                           
  9050                           ;incstack = 0
  9051                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  9052  1575  0021               	movlb	1	; select bank1
  9053  1576  1291               	bcf	17,5	;volatile
  9054                           
  9055                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  9056  1577  1211               	bcf	17,4	;volatile
  9057                           
  9058                           ;eusart.c: 84: BAUDCON = 0x08;
  9059  1578  3008               	movlw	8
  9060  1579  0023               	movlb	3	; select bank3
  9061  157A  009F               	movwf	31	;volatile
  9062                           
  9063                           ;eusart.c: 87: RCSTA = 0x90;
  9064  157B  3090               	movlw	144
  9065  157C  009D               	movwf	29	;volatile
  9066                           
  9067                           ;eusart.c: 90: TXSTA = 0x24;
  9068  157D  3024               	movlw	36
  9069  157E  009E               	movwf	30	;volatile
  9070                           
  9071                           ;eusart.c: 93: SPBRGL = 0x40;
  9072  157F  3040               	movlw	64
  9073  1580  009B               	movwf	27	;volatile
  9074                           
  9075                           ;eusart.c: 96: SPBRGH = 0x03;
  9076  1581  3003               	movlw	3
  9077  1582  009C               	movwf	28	;volatile
  9078                           
  9079                           ;eusart.c: 100: eusartTxHead = 0;
  9080  1583  0021               	movlb	1	; select bank1
  9081  1584  01EE               	clrf	_eusartTxHead^(0+128)	;volatile
  9082                           
  9083                           ;eusart.c: 101: eusartTxTail = 0;
  9084  1585  01ED               	clrf	_eusartTxTail^(0+128)	;volatile
  9085                           
  9086                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  9087  1586  3008               	movlw	8
  9088  1587  00F2               	movwf	??_EUSART_Initialize
  9089  1588  0872               	movf	??_EUSART_Initialize,w
  9090  1589  00EC               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  9091                           
  9092                           ;eusart.c: 104: eusartRxHead = 0;
  9093  158A  01EB               	clrf	_eusartRxHead^(0+128)	;volatile
  9094                           
  9095                           ;eusart.c: 105: eusartRxTail = 0;
  9096  158B  01EA               	clrf	_eusartRxTail^(0+128)	;volatile
  9097                           
  9098                           ;eusart.c: 106: eusartRxCount = 0;
  9099  158C  01E9               	clrf	_eusartRxCount^(0+128)	;volatile
  9100                           
  9101                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  9102  158D  1691               	bsf	17,5	;volatile
  9103  158E  0008               	return
  9104  158F                     __end_of_EUSART_Initialize:	
  9105                           
  9106                           	psect	text38
  9107  14F0                     __ptext38:	
  9108 ;; *************** function _ADC_Initialize *****************
  9109 ;; Defined at:
  9110 ;;		line 64 in file "mcc_generated_files/adc.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;		None
  9113 ;; Auto vars:     Size  Location     Type
  9114 ;;		None
  9115 ;; Return value:  Size  Location     Type
  9116 ;;                  1    wreg      void 
  9117 ;; Registers used:
  9118 ;;		wreg, status,2
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;Total ram usage:        0 bytes
  9129 ;; Hardware stack levels used:    1
  9130 ;; Hardware stack levels required when called:    4
  9131 ;; This function calls:
  9132 ;;		Nothing
  9133 ;; This function is called by:
  9134 ;;		_main
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           
  9139                           ;psect for function _ADC_Initialize
  9140  14F0                     _ADC_Initialize:	
  9141                           
  9142                           ;adc.c: 69: ADCON0 = 0x01;
  9143                           
  9144                           ;incstack = 0
  9145                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  9146  14F0  3001               	movlw	1
  9147  14F1  0021               	movlb	1	; select bank1
  9148  14F2  009D               	movwf	29	;volatile
  9149                           
  9150                           ;adc.c: 72: ADCON1 = 0xF0;
  9151  14F3  30F0               	movlw	240
  9152  14F4  009E               	movwf	30	;volatile
  9153                           
  9154                           ;adc.c: 75: ADCON2 = 0x00;
  9155  14F5  019F               	clrf	31	;volatile
  9156                           
  9157                           ;adc.c: 78: ADRESL = 0x00;
  9158  14F6  019B               	clrf	27	;volatile
  9159                           
  9160                           ;adc.c: 81: ADRESH = 0x00;
  9161  14F7  019C               	clrf	28	;volatile
  9162  14F8  0008               	return
  9163  14F9                     __end_of_ADC_Initialize:	
  9164                           
  9165                           	psect	text39
  9166  155C                     __ptext39:	
  9167 ;; *************** function _ADC_GetConversion *****************
  9168 ;; Defined at:
  9169 ;;		line 112 in file "mcc_generated_files/adc.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;  channel         1    wreg     enum E2635
  9172 ;; Auto vars:     Size  Location     Type
  9173 ;;  channel         1    5[COMMON] enum E2635
  9174 ;; Return value:  Size  Location     Type
  9175 ;;                  2    2[COMMON] unsigned int 
  9176 ;; Registers used:
  9177 ;;		wreg, status,2, status,0
  9178 ;; Tracked objects:
  9179 ;;		On entry : 0/0
  9180 ;;		On exit  : 0/0
  9181 ;;		Unchanged: 0/0
  9182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9183 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;Total ram usage:        4 bytes
  9188 ;; Hardware stack levels used:    1
  9189 ;; Hardware stack levels required when called:    4
  9190 ;; This function calls:
  9191 ;;		Nothing
  9192 ;; This function is called by:
  9193 ;;		_main
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           
  9198                           ;psect for function _ADC_GetConversion
  9199  155C                     _ADC_GetConversion:	
  9200                           
  9201                           ;incstack = 0
  9202                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  9203                           ;ADC_GetConversion@channel stored from wreg
  9204  155C  00F5               	movwf	ADC_GetConversion@channel
  9205                           
  9206                           ;adc.c: 115: ADCON0bits.CHS = channel;
  9207  155D  0875               	movf	ADC_GetConversion@channel,w
  9208  155E  00F4               	movwf	??_ADC_GetConversion
  9209  155F  0DF4               	rlf	??_ADC_GetConversion,f
  9210  1560  0DF4               	rlf	??_ADC_GetConversion,f
  9211  1561  0021               	movlb	1	; select bank1
  9212  1562  081D               	movf	29,w	;volatile
  9213  1563  0674               	xorwf	??_ADC_GetConversion,w
  9214  1564  3983               	andlw	-125
  9215  1565  0674               	xorwf	??_ADC_GetConversion,w
  9216  1566  009D               	movwf	29	;volatile
  9217                           
  9218                           ;adc.c: 118: ADCON0bits.ADON = 1;
  9219  1567  141D               	bsf	29,0	;volatile
  9220                           
  9221                           ;adc.c: 120: _delay((unsigned long)((5)*(32000000/4000000.0)));
  9222  1568  300D               	movlw	13
  9223  1569                     u5067:	
  9224  1569  0B89               	decfsz	9,f
  9225  156A  2D69               	goto	u5067
  9226  156B  0000               	nop
  9227                           
  9228                           ;adc.c: 123: ADCON0bits.GO_nDONE = 1;
  9229  156C  0021               	movlb	1	; select bank1
  9230  156D  149D               	bsf	29,1	;volatile
  9231  156E                     l32:	
  9232                           ;adc.c: 127: {
  9233                           
  9234                           ;adc.c: 126: while (ADCON0bits.GO_nDONE)
  9235                           
  9236  156E  189D               	btfsc	29,1	;volatile
  9237  156F  2D6E               	goto	l32
  9238                           
  9239                           ;adc.c: 128: }
  9240                           ;adc.c: 131: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  9241  1570  081C               	movf	28,w	;volatile
  9242  1571  00F3               	movwf	?_ADC_GetConversion+1
  9243  1572  081B               	movf	27,w	;volatile
  9244  1573  00F2               	movwf	?_ADC_GetConversion
  9245  1574  0008               	return
  9246  1575                     __end_of_ADC_GetConversion:	
  9247                           
  9248                           	psect	intentry
  9249  0004                     __pintentry:	
  9250 ;; *************** function _INTERRUPT_InterruptManager *****************
  9251 ;; Defined at:
  9252 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;		None
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;		None
  9257 ;; Return value:  Size  Location     Type
  9258 ;;                  1    wreg      void 
  9259 ;; Registers used:
  9260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;Total ram usage:        1 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; Hardware stack levels required when called:    3
  9273 ;; This function calls:
  9274 ;;		_EUSART_Receive_ISR
  9275 ;;		_EUSART_Transmit_ISR
  9276 ;;		_INT_ISR
  9277 ;; This function is called by:
  9278 ;;		Interrupt level 1
  9279 ;; This function uses a non-reentrant model
  9280 ;;
  9281                           
  9282  0004                     _INTERRUPT_InterruptManager:	
  9283                           
  9284                           ;incstack = 0
  9285  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9286                           
  9287                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9288  0005  3180               	pagesel	$
  9289  0006  0020               	movlb	0	; select bank0
  9290  0007  087F               	movf	127,w
  9291  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  9292                           
  9293                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  9294  0009  1F0B               	btfss	11,6	;volatile
  9295  000A  2815               	goto	i1l52
  9296  000B  0021               	movlb	1	; select bank1
  9297  000C  1E11               	btfss	17,4	;volatile
  9298  000D  2815               	goto	i1l52
  9299  000E  0020               	movlb	0	; select bank0
  9300  000F  1E11               	btfss	17,4	;volatile
  9301  0010  2815               	goto	i1l52
  9302                           
  9303                           ;interrupt_manager.c: 55: {
  9304                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  9305  0011  3195  25E1  3180   	fcall	_EUSART_Transmit_ISR
  9306                           
  9307                           ;interrupt_manager.c: 57: }
  9308  0014  2826               	goto	i1l58
  9309  0015                     i1l52:	
  9310                           
  9311                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  9312  0015  1F0B               	btfss	11,6	;volatile
  9313  0016  2821               	goto	i1l54
  9314  0017  0021               	movlb	1	; select bank1
  9315  0018  1E91               	btfss	17,5	;volatile
  9316  0019  2821               	goto	i1l54
  9317  001A  0020               	movlb	0	; select bank0
  9318  001B  1E91               	btfss	17,5	;volatile
  9319  001C  2821               	goto	i1l54
  9320                           
  9321                           ;interrupt_manager.c: 59: {
  9322                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  9323  001D  3195  25C5  3180   	fcall	_EUSART_Receive_ISR
  9324                           
  9325                           ;interrupt_manager.c: 61: }
  9326  0020  2826               	goto	i1l58
  9327  0021                     i1l54:	
  9328                           
  9329                           ;interrupt_manager.c: 62: else if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
  9330  0021  1A0B               	btfsc	11,4	;volatile
  9331  0022  1C8B               	btfss	11,1	;volatile
  9332  0023  2826               	goto	i1l58
  9333                           
  9334                           ;interrupt_manager.c: 63: {
  9335                           ;interrupt_manager.c: 64: INT_ISR();
  9336  0024  3194  24D6         	fcall	_INT_ISR
  9337  0026                     i1l58:	
  9338                           ;interrupt_manager.c: 66: else
  9339                           ;interrupt_manager.c: 67: {
  9340                           
  9341                           ;interrupt_manager.c: 65: }
  9342                           
  9343  0026  0871               	movf	??_INTERRUPT_InterruptManager,w
  9344  0027  0020               	movlb	0	; select bank0
  9345  0028  00FF               	movwf	127
  9346  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9347  002A  0009               	retfie
  9348  002B                     __end_of_INTERRUPT_InterruptManager:	
  9349                           
  9350                           	psect	text41
  9351  14D6                     __ptext41:	
  9352 ;; *************** function _INT_ISR *****************
  9353 ;; Defined at:
  9354 ;;		line 43 in file "mcc_generated_files/ext_int.c"
  9355 ;; Parameters:    Size  Location     Type
  9356 ;;		None
  9357 ;; Auto vars:     Size  Location     Type
  9358 ;;		None
  9359 ;; Return value:  Size  Location     Type
  9360 ;;                  1    wreg      void 
  9361 ;; Registers used:
  9362 ;;		wreg, status,2, status,0, pclath, cstack
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;Total ram usage:        0 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; Hardware stack levels required when called:    2
  9375 ;; This function calls:
  9376 ;;		_INT_CallBack
  9377 ;; This function is called by:
  9378 ;;		_INTERRUPT_InterruptManager
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           
  9383                           ;psect for function _INT_ISR
  9384  14D6                     _INT_ISR:	
  9385                           
  9386                           ;ext_int.c: 49: (INTCONbits.INTF = 0);
  9387                           
  9388                           ;incstack = 0
  9389                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
  9390  14D6  108B               	bcf	11,1	;volatile
  9391                           
  9392                           ;ext_int.c: 52: INT_CallBack();
  9393  14D7  3195  250C         	fcall	_INT_CallBack
  9394  14D9  0008               	return
  9395  14DA                     __end_of_INT_ISR:	
  9396                           
  9397                           	psect	text42
  9398  150C                     __ptext42:	
  9399 ;; *************** function _INT_CallBack *****************
  9400 ;; Defined at:
  9401 ;;		line 58 in file "mcc_generated_files/ext_int.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;		None
  9406 ;; Return value:  Size  Location     Type
  9407 ;;                  1    wreg      void 
  9408 ;; Registers used:
  9409 ;;		wreg, status,2, status,0, pclath, cstack
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;Total ram usage:        0 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    1
  9422 ;; This function calls:
  9423 ;;		Absolute function
  9424 ;;		_INT_DefaultInterruptHandler
  9425 ;; This function is called by:
  9426 ;;		_INT_ISR
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           
  9431                           ;psect for function _INT_CallBack
  9432  150C                     _INT_CallBack:	
  9433                           
  9434                           ;ext_int.c: 61: if(INT_InterruptHandler)
  9435                           
  9436                           ;incstack = 0
  9437                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
  9438  150C  0021               	movlb	1	; select bank1
  9439  150D  0867               	movf	_INT_InterruptHandler^(0+128),w
  9440  150E  0468               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
  9441  150F  1903               	btfsc	3,2
  9442  1510  0008               	return
  9443                           
  9444                           ;ext_int.c: 62: {
  9445                           ;ext_int.c: 63: INT_InterruptHandler();
  9446  1511  0868               	movf	(_INT_InterruptHandler+1)^(0+128),w
  9447  1512  008A               	movwf	10
  9448  1513  0867               	movf	_INT_InterruptHandler^(0+128),w
  9449  1514  000A               	callw
  9450  1515  3195               	pagesel	$
  9451  1516  0008               	return
  9452  1517                     __end_of_INT_CallBack:	
  9453                           
  9454                           	psect	text43
  9455  07FF                     __ptext43:	
  9456 ;; *************** function _INT_DefaultInterruptHandler *****************
  9457 ;; Defined at:
  9458 ;;		line 77 in file "mcc_generated_files/ext_int.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;		None
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;		None
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  1    wreg      void 
  9465 ;; Registers used:
  9466 ;;		None
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;Total ram usage:        0 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; This function calls:
  9479 ;;		Nothing
  9480 ;; This function is called by:
  9481 ;;		_EXT_INT_Initialize
  9482 ;;		_INT_CallBack
  9483 ;; This function uses a non-reentrant model
  9484 ;;
  9485                           
  9486                           
  9487                           ;psect for function _INT_DefaultInterruptHandler
  9488  07FF                     _INT_DefaultInterruptHandler:	
  9489                           
  9490                           ;incstack = 0
  9491                           ; Regs used in _INT_DefaultInterruptHandler: []
  9492  07FF  0008               	return
  9493  0800                     __end_of_INT_DefaultInterruptHandler:	
  9494                           
  9495                           	psect	text44
  9496  15E1                     __ptext44:	
  9497 ;; *************** function _EUSART_Transmit_ISR *****************
  9498 ;; Defined at:
  9499 ;;		line 165 in file "mcc_generated_files/eusart.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;		None
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;		None
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      void 
  9506 ;; Registers used:
  9507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;Total ram usage:        1 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; This function calls:
  9520 ;;		Nothing
  9521 ;; This function is called by:
  9522 ;;		_INTERRUPT_InterruptManager
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           
  9527                           ;psect for function _EUSART_Transmit_ISR
  9528  15E1                     _EUSART_Transmit_ISR:	
  9529                           
  9530                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  9531                           
  9532                           ;incstack = 0
  9533                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9534  15E1  3008               	movlw	8
  9535  15E2  0021               	movlb	1	; select bank1
  9536  15E3  026C               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
  9537  15E4  1803               	skipnc
  9538  15E5  2DFC               	goto	i1l208
  9539                           
  9540                           ;eusart.c: 170: {
  9541                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
  9542  15E6  086D               	movf	_eusartTxTail^(0+128),w
  9543  15E7  3ECD               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  9544  15E8  0086               	movwf	6
  9545  15E9  3001               	movlw	1	; select bank3/4
  9546  15EA  0087               	movwf	7
  9547  15EB  0801               	movf	1,w
  9548  15EC  0023               	movlb	3	; select bank3
  9549  15ED  009A               	movwf	26	;volatile
  9550  15EE  3001               	movlw	1
  9551  15EF  00F0               	movwf	??_EUSART_Transmit_ISR
  9552  15F0  0870               	movf	??_EUSART_Transmit_ISR,w
  9553  15F1  0021               	movlb	1	; select bank1
  9554  15F2  07ED               	addwf	_eusartTxTail^(0+128),f	;volatile
  9555                           
  9556                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  9557  15F3  3008               	movlw	8
  9558  15F4  026D               	subwf	_eusartTxTail^(0+128),w	;volatile
  9559  15F5  1803               	btfsc	3,0
  9560                           
  9561                           ;eusart.c: 173: {
  9562                           ;eusart.c: 174: eusartTxTail = 0;
  9563  15F6  01ED               	clrf	_eusartTxTail^(0+128)	;volatile
  9564                           
  9565                           ;eusart.c: 175: }
  9566                           ;eusart.c: 176: eusartTxBufferRemaining++;
  9567  15F7  3001               	movlw	1
  9568  15F8  00F0               	movwf	??_EUSART_Transmit_ISR
  9569  15F9  0870               	movf	??_EUSART_Transmit_ISR,w
  9570  15FA  07EC               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  9571                           
  9572                           ;eusart.c: 177: }
  9573  15FB  0008               	return
  9574  15FC                     i1l208:	
  9575                           
  9576                           ;eusart.c: 178: else
  9577                           ;eusart.c: 179: {
  9578                           ;eusart.c: 180: PIE1bits.TXIE = 0;
  9579  15FC  1211               	bcf	17,4	;volatile
  9580  15FD  0008               	return
  9581  15FE                     __end_of_EUSART_Transmit_ISR:	
  9582                           
  9583                           	psect	text45
  9584  15C5                     __ptext45:	
  9585 ;; *************** function _EUSART_Receive_ISR *****************
  9586 ;; Defined at:
  9587 ;;		line 184 in file "mcc_generated_files/eusart.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;		None
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      void 
  9594 ;; Registers used:
  9595 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;Total ram usage:        1 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; This function calls:
  9608 ;;		Nothing
  9609 ;; This function is called by:
  9610 ;;		_INTERRUPT_InterruptManager
  9611 ;; This function uses a non-reentrant model
  9612 ;;
  9613                           
  9614                           
  9615                           ;psect for function _EUSART_Receive_ISR
  9616  15C5                     _EUSART_Receive_ISR:	
  9617                           
  9618                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
  9619                           
  9620                           ;incstack = 0
  9621                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9622  15C5  0023               	movlb	3	; select bank3
  9623  15C6  1C9D               	btfss	29,1	;volatile
  9624  15C7  2DCA               	goto	i1l2796
  9625                           
  9626                           ;eusart.c: 188: {
  9627                           ;eusart.c: 191: RCSTAbits.CREN = 0;
  9628  15C8  121D               	bcf	29,4	;volatile
  9629                           
  9630                           ;eusart.c: 192: RCSTAbits.CREN = 1;
  9631  15C9  161D               	bsf	29,4	;volatile
  9632  15CA                     i1l2796:	
  9633                           
  9634                           ;eusart.c: 193: }
  9635                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
  9636  15CA  0819               	movf	25,w	;volatile
  9637  15CB  00F0               	movwf	??_EUSART_Receive_ISR
  9638  15CC  0021               	movlb	1	; select bank1
  9639  15CD  086B               	movf	_eusartRxHead^(0+128),w
  9640  15CE  3EC5               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  9641  15CF  0086               	movwf	6
  9642  15D0  3001               	movlw	1	; select bank3/4
  9643  15D1  0087               	movwf	7
  9644  15D2  0870               	movf	??_EUSART_Receive_ISR,w
  9645  15D3  0081               	movwf	1
  9646  15D4  3001               	movlw	1
  9647  15D5  00F0               	movwf	??_EUSART_Receive_ISR
  9648  15D6  0870               	movf	??_EUSART_Receive_ISR,w
  9649  15D7  07EB               	addwf	_eusartRxHead^(0+128),f	;volatile
  9650                           
  9651                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9652  15D8  3008               	movlw	8
  9653  15D9  026B               	subwf	_eusartRxHead^(0+128),w	;volatile
  9654  15DA  1803               	btfsc	3,0
  9655                           
  9656                           ;eusart.c: 198: {
  9657                           ;eusart.c: 199: eusartRxHead = 0;
  9658  15DB  01EB               	clrf	_eusartRxHead^(0+128)	;volatile
  9659                           
  9660                           ;eusart.c: 200: }
  9661                           ;eusart.c: 201: eusartRxCount++;
  9662  15DC  3001               	movlw	1
  9663  15DD  00F0               	movwf	??_EUSART_Receive_ISR
  9664  15DE  0870               	movf	??_EUSART_Receive_ISR,w
  9665  15DF  07E9               	addwf	_eusartRxCount^(0+128),f	;volatile
  9666  15E0  0008               	return
  9667  15E1                     __end_of_EUSART_Receive_ISR:	
  9668  007E                     btemp	set	126	;btemp
  9669  007E                     int$flags	set	126
  9670  007E                     wtemp0	set	126


Data Sizes:
    Strings     68
    Constant    120
    Data        32
    BSS         159
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     80      80
    BANK1            80     65      79
    BANK2            80      0      80
    BANK3            80      0      65
    BANK4            80      0      30
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK1[2]), floor@expon(BANK1[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_6(CODE[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(1) Largest target is 6
		 -> str8(BANK3[6]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), str8(BANK3[6]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_8(CODE[5]), STR_7(CODE[4]), STR_5(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), str8(BANK3[6]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_8(CODE[5]), STR_7(CODE[4]), STR_6(CODE[5]), STR_5(CODE[7]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_9(CODE[7]), 
		 -> str8(BANK3[6]), 

    S528__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    S528__prbuf$ptr	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), str8(BANK3[6]), 

    _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), str8(BANK3[6]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 4
		 -> sprintf@pb(BANK0[3]), printf@pb(BANK0[3]), 

    main@c	PTR unsigned char  size(1) Largest target is 6
		 -> str8(BANK3[6]), 

    message	PTR unsigned char  size(2) Largest target is 3
		 -> STR_4(CODE[3]), 

    packet	PTR unsigned char  size(2) Largest target is 26
		 -> STR_3(CODE[26]), 

    Fixeddata	PTR unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[11]), 

    preamble	PTR unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMMON

    _main->___lmul
    _sendChar->_dit_dah
    __doprnt->___lwdiv
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    ___altoft->___ftpack
    ___altoft->___lmul
    ___ftmul->___ftpack
    ___ftmul->___ftpack
    ___ftadd->___ftpack
    ___ftadd->___lmul
    ___ftneg->___lmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _EXT_INT_Initialize->_INT_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___lwmod
    _pow->_log
    _log->_eval_poly
    _exp->_floor
    _exp->_log
    _ldexp->_eval_poly
    _floor->___ftadd
    ___fttol->___ftdiv
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftneg
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftneg->___altoft
    ___ftdiv->___awtoft

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0  128621
                                             42 BANK1     23    23      0
                  _ADC_GetConversion
                     _ADC_Initialize
                  _SYSTEM_Initialize
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                             ___lmul
                           ___lwtoft
                                _pow
                             _printf
                           _sendChar
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             12     6      6    3248
                                             21 BANK0     12     6      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _sendChar                                             4     4      0    5467
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                            _dit_dah
 ---------------------------------------------------------------------------------
 (2) _dit_dah                                              5     3      2    5021
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                               9     5      4    3293
                                             21 BANK0      9     5      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             21    18      3    2833
                                              6 BANK0     15    12      3
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     0      1     281
                                              4 COMMON     1     0      1
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     386
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (1) _pow                                                 18    12      6   90538
                                             24 BANK1     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   29759
                                             79 BANK0      1     1      0
                                              7 BANK1      5     2      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 10     7      3   48746
                                             14 BANK1     10     7      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                7     2      5    2097
                                              7 BANK1      7     2      5
                             ___ftge
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                                9     6      3   12108
                                             76 BANK0      4     1      3
                                              0 BANK1      5     5      0
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     480
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     572
                                             22 BANK0     14    10      4
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1584
                                              2 COMMON     6     0      6
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    3002
                                             36 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7   12645
                                             76 BANK0      3     3      0
                                              0 BANK1      7     0      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     348
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    5556
                                             47 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6275
                                              0 BANK1      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    6025
                                             63 BANK0     13     7      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___lmul (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     365
                                             44 BANK0      3     0      3
                           ___altoft (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3834
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3085
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2823
                                              0 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    2829
                                              0 BANK0      4     1      3
                  _ADC_GetConversion (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2644
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     220
                                              2 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      86
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      86
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                            _INT_ISR
 ---------------------------------------------------------------------------------
 (7) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (8) _INT_CallBack                                         0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _INT_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _ADC_Initialize
   _SYSTEM_Initialize
     _EUSART_Initialize
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   ___altoft
     ___ftpack
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lmul (ARG)
   ___awtoft
     ___ftpack
   ___ftadd
     ___altoft (ARG)
       ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___lmul (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___lmul (ARG)
         ___lmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___lmul (ARG)
       ___lmul (ARG)
     ___ftpack (ARG)
     ___lmul (ARG)
     ___wmul (ARG)
     _frexp (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___lmul (ARG)
       ___lmul (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___ftneg
     ___altoft (ARG)
       ___ftpack
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___lmul (ARG)
     ___lmul (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___lmul
   ___lwtoft
     _ADC_GetConversion (ARG)
     ___ftpack (ARG)
   _pow
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___lmul (ARG)
         ___lmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___altoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___lmul (ARG)
       ___lmul (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _exp
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___lmul (ARG)
           ___lmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___altoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___lmul (ARG)
         ___lmul (ARG)
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___lmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___lmul (ARG)
               ___lmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___lmul (ARG)
           ___ftpack (ARG)
           ___lmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _eval_poly
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___lmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___lmul (ARG)
               ___lmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___lmul (ARG)
           ___ftpack (ARG)
           ___lmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___lmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___lmul (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___lmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___lmul (ARG)
               ___lmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___lmul (ARG)
           ___ftpack (ARG)
           ___lmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         _frexp
       _ldexp
         ___ftge
         _eval_poly (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___lmul (ARG)
                 ___lmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___lmul (ARG)
               ___lmul (ARG)
             ___ftpack (ARG)
             ___lmul (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___lmul (ARG)
               ___lmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
       _log (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___lmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___lmul (ARG)
               ___lmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___lmul (ARG)
           ___ftpack (ARG)
           ___lmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___lmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___lmul (ARG)
                 ___lmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___lmul (ARG)
               ___lmul (ARG)
             ___ftpack (ARG)
             ___lmul (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___lmul (ARG)
               ___lmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___lmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___lmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___lmul (ARG)
           ___lmul (ARG)
         ___ftpack (ARG)
         ___lmul (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___lmul (ARG)
           ___lmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___lmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___lmul (ARG)
               ___lmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___lmul (ARG)
           ___ftpack (ARG)
           ___lmul (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___lmul (ARG)
             ___lmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp
   _printf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
         _EUSART_Write
   _sendChar
     _dit_dah
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
         _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     41      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      41      11       81.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1E      13       37.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Feb 13 11:57:15 2018

                           ___altoft@exp 004A                                        _m 1835  
                            _thousandths 0146                              __CFG_CP$OFF 0000  
                          ___altoft@sign 004B                                       l32 156E  
                                     l84 1508                                       _m2 1893  
                    ___wmul@multiplicand 0074                             ___ftadd@exp1 006B  
                           ___ftadd@exp2 006A                              __CFG_LVP$ON 0000  
                           ___ftadd@sign 0069                                      l330 0074  
                                    l600 07C9                                      l352 0943  
                                    l345 0910                                      l329 0073  
                                    l355 095A                                      l196 1649  
                                    l348 096F                                      l349 092C  
                                    l358 0973                                      l390 0FED  
                                    l607 07DC                                      l631 0D67  
                                    l439 15B2                                      l608 07E4  
                                    l803 0DDB                                      l387 0FD7  
                                    l691 09F2                                      _exp 0646  
                                    _log 0C03                                      _pow 0DBE  
                           __CFG_BORV$LO 0000                                      wreg 0009  
                           __CFG_IESO$ON 0000                             ___ftdiv@cntr 0030  
                           ___ftdiv@sign 0035                                     l3100 07B0  
                                   l3110 07D6                                     l3102 07B5  
                                   l2072 165D                                     l2250 099E  
                                   l2402 1746                                     l2058 163F  
                                   l3108 07CE                                     l3204 0DA6  
                                   l2076 15AC                                     l3132 179B  
                                   l3212 17DA                                     l3302 0AD3  
                                   l3134 17AB                                     l2270 09DC  
                                   l3144 0CF0                                     l3240 0B7C  
                                   l3216 17F1                                     l3154 0D06  
                                   l3234 0B66                                     l2282 0A03  
                                   l3324 0B2D                                     l3316 0B14  
                                   l3172 0D33                                     l3148 0CF7  
                                   l3252 0BB7                                     l2276 09E9  
                                   l2268 09CE                                     l3500 053A  
                                   l3094 079F                                     l3190 0D79  
                                   l3174 0D3D                                     l3166 0D20  
                                   l2278 09F5                                     l2294 175D  
                                   l3406 089C                                     l2390 171F  
                                   l3350 169D                                     l3510 0562  
                                   l3184 0D59                                     l3176 0D42  
                                   l3336 16BF                                     l3264 0BD3  
                                   l3256 0BBF                                     l3432 08F0  
                                   l3416 08BE                                     l3600 0653  
                                   l2392 172B                                     l3520 0596  
                                   l3504 054E                                     l3512 057F  
                                   l3098 07A6                                     l3194 0D8B  
                                   l3186 0D63                                     l3178 0D46  
                                   l3354 16A9                                     l3268 0BDB  
                                   l3372 0A37                                     l3428 08E8  
                                   l3612 0690                                     l3348 1691  
                                   l3532 05BB                                     l3452 0941  
                                   l3286 1627                                     l3606 0671  
                                   l2398 173D                                     l3358 16B2  
                                   l3550 062F                                     l3542 05E6  
                                   l3526 059C                                     l3446 0925  
                                   l3710 0EEA                                     l3296 0ABD  
                                   l3376 0A3F                                     l3456 0958  
                                   l3386 0A99                                     l3618 06C6  
                                   l3554 05EB                                     l3538 05D3  
                                   l3490 0513                                     l3730 0F35  
                                   l3714 0EFF                                     l3706 0EDC  
                                   l3396 0882                                     l3636 0777  
                                   l3660 0DE3                                     l3476 04D9  
                                   l3556 04AE                                     l3566 1665  
                                   l3478 04DB                                     l3558 0643  
                                   l3742 0F89                                     l3734 0F4A  
                                   l3726 0F27                                     l3718 0F1B  
                                   l3750 0FD4                                     l3568 1675  
                                   l3584 0C35                                     l3496 04EF  
                                   l2954 16EE                                     l3578 0C22  
                                   l3674 0E50                                     l3666 0DEF  
                                   l3498 052E                                     l3754 0FEA  
                                   l3746 0FA5                                     l3738 0F66  
                                   l3842 0463                                     l3844 048F  
                                   l2958 16F9                                     l3678 0E70  
                                   l3848 0496                                     l3776 0081  
                                   ?_exp 00AE                                     ?_log 00A7  
                                   ?_pow 00B8                                     STR_1 187E  
                                   STR_2 182A                                     STR_3 181B  
                                   STR_4 18B9                                     STR_5 18A4  
                                   STR_6 18B0                                     STR_7 18B5  
                                   STR_8 18AB                                     STR_9 189D  
                                   u2015 15B3                                     u2025 15B8  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 14DA                                     _LATC 010E  
                                   u4025 0D5A                                     u4205 0BE2  
                                   u4125 0B88                                     u2525 09EA  
                                   u5005 0FF7                                     u4135 0B98  
                                   u2465 09A5                                     u2705 172C  
                                   u4155 0BC0                                     u2715 1736  
                                   u4165 0BC6                                     u2725 173E  
                                   u5045 04A2                                     u3535 16FA  
                                   u4255 0AE5                                     u2495 09CF  
                                   u4335 1694                                     u3545 1701  
                                   u4265 0AF5                                     u4505 0936  
                                   u5067 1569                                     u3715 07AB  
                                   u4275 0B15                                     u4195 0BDC  
                                   u4355 16A3                                     u4515 094D  
                                   u4285 0B24                                     u2685 1722  
                                   u4365 16AA                                     u4525 0964  
                                   u3735 07C4                                     u4295 0B2E  
                                   u4455 08C7                                     u4535 097D  
                                   u3825 17A0                                     u4625 05B1  
                                   u3755 07D1                                     i1l52 0015  
                                   u4485 091A                                     i1l54 0021  
                                   u3935 0D21                                     u4760 06A4  
                                   i1l58 0026                                     u4770 06A5  
                                   u3795 07EB                                     u3965 0D34  
                                   u4695 166A                                     u4855 0E41  
                                   u3995 0D47                                     u4995 0FE1  
                                   _WPUA 020C                                     _WPUB 020D  
                           __CFG_WRT$OFF 0000                            __CFG_FCMEN$ON 0000  
                                   _main 0064                             ___ftpack@arg 0072  
                           ___ftpack@exp 0075                                     _temp 013B  
                                   _tens 014E                                     _str8 01DB  
                                   fsr0h 0005                                     fsr1h 0007  
                                   indf0 0000                                     fsr0l 0004  
                                   indf1 0001                                     fsr1l 0006  
                                   btemp 007E                                     exp@x 00AE  
                                   log@x 00A7                              main@waitind 00DE  
    __end_of_INT_DefaultInterruptHandler 0800              _INT_DefaultInterruptHandler 07FF  
                                   pow@x 00B8                                     pow@y 00BB  
                                   start 002B          __end_of_INT_SetInterruptHandler 14E4  
                          __CFG_MCLRE$ON 0000                             ___ftmul@cntr 005D  
                           ___ftmul@sign 005E                             ___fttol@exp1 0043  
                                  ??_exp 00B1                                    ??_log 006F  
                           ___fttol@lval 003F                                    ??_pow 00BE  
                          ?_EUSART_Write 0070           __size_of_OSCILLATOR_Initialize 000A  
          __end_of_OSCILLATOR_Initialize 150C                                    ?_main 0070  
                        __end_of___ftadd 0DBE                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 0B4F                          __end_of___ftneg 1502  
                        __end_of___ftmul 0C03                          __end_of___ftsub 16E5  
                        __end_of___fttol 0A0C                                    _LATC3 0873  
                                  _LATC4 0874                          __end_of___lwdiv 174B  
                                  i1l208 15FC                          __end_of___lwmod 16B7  
                                  _RCREG 0199                                    _RCSTA 019D  
                        __end_of__doprnt 0646                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _TXREG 019A                                    _TXSTA 019E  
                    ___lmul@multiplicand 0076                             ___lltoft@exp 0025  
                        __end_of_dit_dah 0985                            ___awtoft@sign 0025  
                                  _delay 007A                          __end_of_dpowers 1893  
                         _WDT_Initialize 14DA                                    _floor 0A0C  
                                  _ldexp 088F                                    _frexp 174B  
                                  _errno 013E                                    _sleep 0140  
                          ___ftpack@sign 0076                                    _putch 07FB  
                                  main@c 00E0                                    main@i 00CC  
                                  _units 014C                           __CFG_BOREN$OFF 0000  
                                  pclath 000A                                    pow@yi 00C6  
                                  status 0003                                    wtemp0 007E  
                        __end_of_sprintf 161C                              exp@exponent 00B5  
                            ldexp@newexp 00AA                          __initialization 002D  
                            log@exponent 00AA                             __end_of_main 04AC  
                         ??_EUSART_Write 0072                           __CFG_LPBOR$OFF 0000  
            ?_INTERRUPT_InterruptManager 0070                                   ??_main 00CA  
                          ___fttol@sign1 003E                      __CFG_USBLSCLK$24MHz 0000  
                 __end_of_WDT_Initialize 14DE                                ??_INT_ISR 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                                 _ADCON2 009F                                   ?_floor 006C  
                                 ?_ldexp 00A7                                   ?_frexp 0072  
                       __end_of___altoft 17C3                                   _ACTCON 039B  
                                 _ADRESH 009C                                   _ADRESL 009B  
                                 _APFCON 011D                                   _ADCres 0166  
                       __end_of___awtoft 163E                                   _ANSELA 018C  
                                 ?_putch 0074                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 07FB  
                       __end_of___lltoft 168A                                   i1l2796 15CA  
                       __end_of___lwtoft 1546                                   _OSCCON 0099  
                                 _PLLRDY 04D6                                   _SPBRGH 019C  
                                 _SPBRGL 019B                                   _WDTCON 0097  
                         __CFG_PWRTE$OFF 0000                                   ___ftge 17C3  
                                 ___lmul 16E5                                   ___wmul 15AA  
                              ??___ftadd 0065                           __CFG_STVREN$ON 0000  
                              ??___ftdiv 002C                                ??___ftneg 007A  
                              ??___ftmul 0055                                ??___ftsub 007A  
                              ??___fttol 003A                                ??___lwdiv 0076  
                              ??___lwmod 0024                      _EUSART_Transmit_ISR 15E1  
                                 _packet 016A                                ??__doprnt 0029  
                                 _tenths 014A                             __doprnt@flag 002D  
                                 _printf 1546                                ??_dit_dah 0074  
                       __end_of_sendChar 1000                             __doprnt@prec 002E  
                          ?_INT_CallBack 0070                                   floor@i 00A0  
                                 floor@x 006C                    ___ftmul@f3_as_product 005A  
                           __pdataCOMMON 007A                          ?_WDT_Initialize 0070  
               ADC_GetConversion@channel 0075         __size_of_INT_SetInterruptHandler 0006  
INT_SetInterruptHandler@InterruptHandler 0072                                ??_sprintf 003B  
                   ?_EUSART_Transmit_ISR 0070                         __end_ofexp@coeff 187E  
                      _SYSTEM_Initialize 1522                         __end_oflog@coeff 181B  
                __end_of__initialization 0060                               ___altoft@c 0044  
                             ___ftadd@f1 005F                               ___ftadd@f2 0062  
                             ___ftge@ff1 0072                               ___ftge@ff2 0075  
                          _IN_CAP_TO_GND 0132                       ?_SYSTEM_Initialize 0070  
                           eval_poly@res 006C                               ___ftdiv@f1 0029  
                             ___ftdiv@f2 0026                               ___ftdiv@f3 0031  
                             ___ftneg@f1 004C                               ___awtoft@c 0020  
                             ___ftmul@f1 004F                               ___ftmul@f2 0052  
                             ___ftsub@f1 00A3                               ___ftsub@f2 00A0  
                             ___fttol@f1 0036                           __pcstackCOMMON 0070  
                           __pidataBANK2 0801                      ??_SYSTEM_Initialize 0074  
                             ___lltoft@c 0020                            __end_of_floor 0AA6  
                          __end_of_ldexp 0908                            __end_of_frexp 1786  
                          __end_of_putch 07FF                               __end_of_m2 189D  
                         ??_INT_CallBack 0070                               ___lwtoft@c 0020  
            __size_of_EXT_INT_Initialize 000B                           _OPTION_REGbits 0095  
                             __doprnt@ap 0028                               __doprnt@cp 0031  
                             __doprnt@pb 0034                                  ??_floor 006F  
                                ??_ldexp 00AC                                  ??_frexp 0076  
              __end_of_SYSTEM_Initialize 1531                    ??_EUSART_Transmit_ISR 0070  
                                ??_putch 0075                               __pbssBANK1 00E1  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                       __size_of_eval_poly 0070  
                   __end_of_EUSART_Write 1660              __size_of_EUSART_Receive_ISR 001C  
                             __pmaintext 0064                                  ?___ftge 0072  
                                ?___lmul 0072                          __CFG_PLLMULT$4x 0000  
                                ?___wmul 0072                               __pintentry 0004  
                              ?___altoft 0044                                  _BAUDCON 019F  
                         ___lmul@product 0020                                ?___awtoft 0020  
                              ?___ftpack 0072                                  ?_printf 0035  
                              ?___lltoft 0020                  __size_of_ADC_Initialize 0009  
                              ?___lwtoft 0020                            _eusartRxCount 00E9  
                                _NODE_ID 0164                                  _INT_ISR 14D6  
                                _OSCTUNE 0098                                _ADC0mVolt 01D8  
                              _ADC1mVolt 01D5                                  _FactorA 015E  
                                _FactorB 015B                                  _FactorC 0158  
                                _FactorD 0155                                ?_sendChar 0070  
                        __size_of___ftge 003D                          __size_of___lmul 0032  
                                ___ftadd 0CC8                                  ___ftdiv 0AA6  
                                ___ftneg 14F9                          __size_of___wmul 001B  
                                ___ftmul 0B4F                                  ___ftsub 16B7  
                                ___fttol 0985                                  ___lwdiv 1717  
                                ___lwmod 168A                               ??___altoft 0048  
                                __doprnt 04AC                               ??___awtoft 0023  
                             ??___ftpack 0077                        __end_of_eval_poly 088F  
                             ??___lltoft 0024                                  _dit_dah 0908  
                                __ptext1 15FE                                  __ptext2 0ED4  
                                __ptext3 0908                                  __ptext4 1546  
                                __ptext5 04AC                                  __ptext6 07FB  
                                __ptext7 163E                                  __ptext8 168A  
                                __ptext9 1717                          __size_of_printf 0016  
                             ??___lwtoft 0023                                  _packet1 01A0  
                                _packet2 0220                                  _dpowers 1889  
                  _OSCILLATOR_Initialize 1502                             __size_of_exp 0151  
                           __size_of_log 00C5                             __size_of_pow 0116  
                                _message 0168                 ??_PIN_MANAGER_Initialize 0072  
                _INT_SetInterruptHandler 14DE                                  _sensor0 0123  
                                _sensor1 0120                               _hundredths 0148  
             __size_of_SYSTEM_Initialize 000F                                  _sprintf 15FE  
                                clrloop0 14E5                               _nocodedbit 01B8  
                                _voltref 0152                     end_of_initialization 0060  
                                exp@sign 00B7                                  init_ram 14EA  
                                initloop 14EB                     __end_of_INT_CallBack 1517  
                      _EUSART_Initialize 1575                               ??_sendChar 0077  
                       __CFG_CLKOUTEN$ON 0000                                  pow@sign 00C5  
                     ?_EUSART_Initialize 0070                                _RCSTAbits 019D  
                                printf@f 0035                      ??_EUSART_Initialize 0072  
                       ??_WDT_Initialize 0072                         __CFG_FOSC$INTOSC 0000  
                  __size_of_EUSART_Write 0022                __end_of_EUSART_Initialize 158F  
                            ___ftdiv@exp 0034                       __CFG_PLLEN$ENABLED 0000  
                            ___ftmul@exp 0059                           __end_of___ftge 1800  
                         __end_of___lmul 1717                           __end_of___wmul 15C5  
                          __pidataCOMMON 0002                             _EUSART_Write 163E  
                         _ADC_Initialize 14F0                   ?_OSCILLATOR_Initialize 0070  
              ??_INT_SetInterruptHandler 0074                                _Fixeddata 016C  
                             floor@expon 00A3                           __end_of_printf 155C  
                    start_initialization 002D                               eval_poly@d 00A3  
                             eval_poly@n 00A5                               eval_poly@x 00A0  
                             ldexp@value 00A7          __size_of_PIN_MANAGER_Initialize 001B  
                            __end_of_exp 0797                              __end_of_log 0CC8  
                            __end_of_pow 0ED4                              putch@txData 0074  
                             frexp@value 0072             ?_INT_DefaultInterruptHandler 0070  
                               ??___ftge 0020                                 ??___lmul 007A  
                               ??___wmul 0076                   __end_of_ADC_Initialize 14F9  
                            __doprnt@val 002F                              _capacitance 012F  
                            __pdataBANK2 0152               __end_of_EXT_INT_Initialize 1522  
                               ??_printf 0039                        __size_of___altoft 003D  
                      __size_of___awtoft 0022                        __size_of___ftpack 0064  
            __end_of_EUSART_Transmit_ISR 15FE                        __size_of___lltoft 002A  
                              ___latbits 0002                        __size_of___lwtoft 0015  
                               ?_INT_ISR 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00A0                    __size_of_INT_CallBack 000B  
                              __end_of_m 1860               __end_of_EUSART_Receive_ISR 15E1  
             __size_of_EUSART_Initialize 001A                                __doprnt@c 0033  
                              __doprnt@f 0026                      _IN_STRAY_CAP_TO_GND 0161  
                              _main$1021 00D2                                _main$1022 00D5  
                              _main$1023 00D8                                _main$1024 00DB  
                              _main$1025 00CF                         ___lwdiv@dividend 0074  
                 _PIN_MANAGER_Initialize 158F            ??_INT_DefaultInterruptHandler 0070  
                      __size_of_sendChar 012C                                 ?___ftadd 005F  
                               ?___ftdiv 0026                                 ?___ftneg 004C  
                               ?___ftmul 004F                                 ?___ftsub 00A0  
                               ?___fttol 0036                                 ?___lwdiv 0072  
                               ?___lwmod 0020                          ?_ADC_Initialize 0070  
                           _eusartRxHead 00EB                             _eusartTxHead 00EE  
                           _eusartRxTail 00EA                                 ?__doprnt 0026  
                           _eusartTxTail 00ED             ??_INTERRUPT_InterruptManager 0071  
                               ?_dit_dah 0072                  _eusartTxBufferRemaining 00EC  
                           _INT_CallBack 150C                                _eval_poly 081F  
                       ___lwdiv@quotient 0077                                 ?_sprintf 0035  
                         __size_of_floor 009A                           __size_of_ldexp 0079  
                         __size_of_frexp 003B                           __size_of_putch 0004  
                         _eusartRxBuffer 01C5                           _eusartTxBuffer 01CD  
                         ___wmul@product 0076                                _remainder 0138  
                              clear_ram0 14E4                                 _PIE1bits 0091  
    __size_of_INTERRUPT_InterruptManager 0027                                 _PIR1bits 0011  
                               _SENSORID 0142                               _ADC0mVolt1 00E4  
                             _ADC0mVolt2 00E1                               _ADCON0bits 009D  
                      ___wmul@multiplier 0072                                main@count 00CE  
   __size_of_INT_DefaultInterruptHandler 0001                               ?_eval_poly 00A0  
                       __size_of_INT_ISR 0004                      _IN_EXTRA_CAP_TO_GND 0135  
                      ___lmul@multiplier 0072                                frexp@eptr 0075  
                         _tenthousandths 0144                                 _TempDIFF 0126  
                               _TemporC1 012C                                 _TemporC2 0129  
                      _ADC_GetConversion 155C                  ??_OSCILLATOR_Initialize 0072  
                     ?_ADC_GetConversion 0072                         __size_of___ftadd 00F6  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                               ___altoft 1786                         __size_of___ftmul 00B4  
                       __size_of___ftsub 002E                         __size_of___fttol 0087  
                       __size_of___lwdiv 0034                         __size_of___lwmod 002D  
                               ___awtoft 161C                                 ___ftpack 0797  
                       __size_of__doprnt 019A                                 ___lltoft 1660  
                               ___lwtoft 1531                         __size_of_dit_dah 007D  
                               _exp$1028 00B2                      ??_ADC_GetConversion 0074  
                              sendChar@a 0022                                sendChar@i 0020  
                        ___lwdiv@divisor 0072                          ___lwdiv@counter 0079  
                               __ptext10 0DBE                                 __ptext11 0C03  
                               __ptext20 15AA                                 __ptext12 0646  
                               __ptext21 0B4F                                 __ptext13 088F  
                               __ptext30 16E5                                 __ptext22 16B7  
                               __ptext14 0A0C                                 __ptext31 1522  
                               __ptext23 0CC8                                 __ptext15 174B  
                               __ptext32 14DA                                 __ptext24 14F9  
                               __ptext16 0985                                 __ptext41 14D6  
                               __ptext33 158F                                 __ptext25 0AA6  
                               __ptext17 17C3                                 __ptext42 150C  
                               __ptext34 1502                                 __ptext26 161C  
                               __ptext18 1786                                 __ptext43 07FF  
                               __ptext35 1517                                 __ptext27 1660  
                               __ptext19 081F                                 __ptext44 15E1  
                               __ptext36 14DE                                 __ptext28 1531  
                               __ptext45 15C5                                 __ptext37 1575  
                               __ptext29 0797                                 __ptext38 14F0  
                               __ptext39 155C                                 _pow$1026 00BF  
                               _pow$1027 00C2                         __size_of_sprintf 001E  
                          __size_of_main 0448                                 _hundreds 0150  
                               _sendChar 0ED4                __end_of_ADC_GetConversion 1575  
                               _preamble 016E                                 dit_dah@i 0075  
                               int$flags 007E       __end_of_INTERRUPT_InterruptManager 002B  
             _INTERRUPT_InterruptManager 0004                                 exp@coeff 1860  
                               log@coeff 1800                               _INTCONbits 000B  
                            ??_eval_poly 007A                     _INT_InterruptHandler 00E7  
                         __pstringtext10 18B0                           __pstringtext11 18B5  
                         __pstringtext12 18B9                           __pstringtext13 0000  
                     _EXT_INT_Initialize 1517                  __size_of_WDT_Initialize 0004  
                               intlevel1 0000                                sprintf@ap 003D  
                              sprintf@pb 003E                                sprintf@wh 003C  
                       ___lwmod@dividend 0022                  ?_PIN_MANAGER_Initialize 0070  
                           dit_dah@index 0072                      ?_EXT_INT_Initialize 0070  
                       ??_ADC_Initialize 0072                                 printf@ap 003A  
                               printf@pb 003B                       _EUSART_Receive_ISR 15C5  
                   __CFG_CPUDIV$NOCLKDIV 0000                 ?_INT_SetInterruptHandler 0072  
                          __pstringtext1 1835                            __pstringtext2 1889  
                          __pstringtext3 1893                            __pstringtext4 1860  
                          __pstringtext5 1800                            __pstringtext6 187E  
                          __pstringtext7 189D                            __pstringtext8 18A4  
                          __pstringtext9 18AB                     ??_EXT_INT_Initialize 0074  
                               sprintf@f 0035                      ?_EUSART_Receive_ISR 0070  
                        ___lwmod@divisor 0020                          ___lwmod@counter 0025  
                     EUSART_Write@txData 0073             __size_of_EUSART_Transmit_ISR 001D  
         __end_of_PIN_MANAGER_Initialize 15AA                     ??_EUSART_Receive_ISR 0070  
             __size_of_ADC_GetConversion 0019  
